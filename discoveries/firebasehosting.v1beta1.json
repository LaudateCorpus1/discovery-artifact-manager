{
  "rootUrl": "https://firebasehosting.googleapis.com/",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/firebase": {
          "description": "View and administer all your Firebase data and settings"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud Platform data"
        },
        "https://www.googleapis.com/auth/cloud-platform.read-only": {
          "description": "View your data across Google Cloud Platform services"
        },
        "https://www.googleapis.com/auth/firebase.readonly": {
          "description": "View all your Firebase data and settings"
        }
      }
    }
  },
  "documentationLink": "https://firebase.google.com/docs/hosting/",
  "mtlsRootUrl": "https://firebasehosting.mtls.googleapis.com/",
  "baseUrl": "https://firebasehosting.googleapis.com/",
  "fullyEncodeReservedExpansion": true,
  "canonicalName": "Firebase Hosting",
  "name": "firebasehosting",
  "title": "Firebase Hosting API",
  "batchPath": "batch",
  "parameters": {
    "quotaUser": {
      "type": "string",
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query",
      "type": "string"
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "access_token": {
      "description": "OAuth access token.",
      "location": "query",
      "type": "string"
    },
    "uploadType": {
      "location": "query",
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
    },
    "$.xgafv": {
      "type": "string",
      "enum": [
        "1",
        "2"
      ],
      "location": "query",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "description": "V1 error format."
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "prettyPrint": {
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "type": "boolean",
      "location": "query"
    },
    "alt": {
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "description": "Data format for response.",
      "location": "query",
      "type": "string",
      "default": "json",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ]
    },
    "fields": {
      "type": "string",
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "oauth_token": {
      "location": "query",
      "type": "string",
      "description": "OAuth 2.0 token for the current user."
    }
  },
  "ownerName": "Google",
  "version": "v1beta1",
  "description": "The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.",
  "discoveryVersion": "v1",
  "ownerDomain": "google.com",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "basePath": "",
  "version_module": true,
  "servicePath": "",
  "schemas": {
    "Status": {
      "id": "Status",
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "properties": {
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          },
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
        },
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The status code, which should be an enum value of google.rpc.Code."
        }
      },
      "type": "object"
    },
    "ListSitesResponse": {
      "id": "ListSitesResponse",
      "type": "object",
      "properties": {
        "sites": {
          "type": "array",
          "items": {
            "$ref": "Site"
          },
          "description": "A list of Site objects associated with the specified Firebase project."
        },
        "nextPageToken": {
          "description": "The pagination token, if more results exist beyond the ones in this response. Include this token in your next call to `ListSites`. Page tokens are short-lived and should not be stored.",
          "type": "string"
        }
      }
    },
    "ActingUser": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "The email address of the user when the user performed the action."
        },
        "imageUrl": {
          "type": "string",
          "description": "A profile image URL for the user. May not be present if the user has changed their email address or deleted their account."
        }
      },
      "id": "ActingUser",
      "description": "Contains metadata about the user who performed an action, such as creating a release or finalizing a version."
    },
    "Operation": {
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "properties": {
        "done": {
          "type": "boolean",
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
        },
        "error": {
          "$ref": "Status",
          "description": "The error result of the operation in case of failure or cancellation."
        },
        "metadata": {
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "type": "object",
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any."
        },
        "response": {
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "type": "object"
        },
        "name": {
          "type": "string",
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
        }
      },
      "id": "Operation",
      "type": "object"
    },
    "VersionFile": {
      "type": "object",
      "description": "A static content file that is part of a version.",
      "id": "VersionFile",
      "properties": {
        "status": {
          "enumDescriptions": [
            "The default status; should not be intentionally used.",
            "The file has been included in the version and is expected to be uploaded in the near future.",
            "The file has already been uploaded to Firebase Hosting."
          ],
          "enum": [
            "STATUS_UNSPECIFIED",
            "EXPECTED",
            "ACTIVE"
          ],
          "type": "string",
          "description": "Output only. The current status of a particular file in the specified version. The value will be either `pending upload` or `uploaded`."
        },
        "path": {
          "type": "string",
          "description": "The URI at which the file's content should display."
        },
        "hash": {
          "description": "The SHA256 content hash of the file.",
          "type": "string"
        }
      }
    },
    "ListDomainsResponse": {
      "id": "ListDomainsResponse",
      "properties": {
        "nextPageToken": {
          "description": "The pagination token, if more results exist.",
          "type": "string"
        },
        "domains": {
          "items": {
            "$ref": "Domain"
          },
          "type": "array",
          "description": "The list of domains, if any exist."
        }
      },
      "type": "object",
      "description": "The response to listing Domains."
    },
    "Version": {
      "properties": {
        "fileCount": {
          "description": "Output only. The total number of files associated with the version. This value is calculated after a version is `FINALIZED`.",
          "format": "int64",
          "type": "string"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The labels used for extra metadata and/or filtering.",
          "type": "object"
        },
        "createTime": {
          "description": "Output only. The time at which the version was created.",
          "format": "google-datetime",
          "type": "string"
        },
        "finalizeUser": {
          "$ref": "ActingUser",
          "description": "Output only. Identifies the user who `FINALIZED` the version."
        },
        "deleteUser": {
          "description": "Output only. Identifies the user who `DELETED` the version.",
          "$ref": "ActingUser"
        },
        "versionBytes": {
          "type": "string",
          "format": "int64",
          "description": "Output only. The total stored bytesize of the version. This value is calculated after a version is `FINALIZED`."
        },
        "finalizeTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Output only. The time at which the version was `FINALIZED`."
        },
        "name": {
          "description": "The fully-qualified resource name for the version, in the format: sites/ SITE_ID/versions/VERSION_ID This name is provided in the response body when you call [`CreateVersion`](sites.versions/create).",
          "type": "string"
        },
        "preview": {
          "$ref": "PreviewConfig",
          "description": "Deprecated in favor of [site channels](sites.channels)."
        },
        "createUser": {
          "$ref": "ActingUser",
          "description": "Output only. Identifies the user who created the version."
        },
        "deleteTime": {
          "description": "Output only. The time at which the version was `DELETED`.",
          "format": "google-datetime",
          "type": "string"
        },
        "config": {
          "description": "The configuration for the behavior of the site. This configuration exists in the [`firebase.json`](https://firebase.google.com/docs/cli/#the_firebasejson_file) file.",
          "$ref": "ServingConfig"
        },
        "status": {
          "description": "The deploy status of the version. For a successful deploy, call [`CreateVersion`](sites.versions/create) to make a new version (`CREATED` status), [upload all desired files](sites.versions/populateFiles) to the version, then [update](sites.versions/patch) the version to the `FINALIZED` status. Note that if you leave the version in the `CREATED` state for more than 12 hours, the system will automatically mark the version as `ABANDONED`. You can also change the status of a version to `DELETED` by calling [`DeleteVersion`](sites.versions/delete).",
          "enumDescriptions": [
            "The default status; should not be intentionally used.",
            "The version has been created, and content is currently being added to the version.",
            "All content has been added to the version, and the version can no longer be changed.",
            "The version has been deleted.",
            "The version was not updated to `FINALIZED` within 12 hours and was automatically deleted.",
            "The version is outside the site-configured limit for the number of retained versions, so the version's content is scheduled for deletion.",
            "The version is being cloned from another version. All content is still being copied over."
          ],
          "enum": [
            "VERSION_STATUS_UNSPECIFIED",
            "CREATED",
            "FINALIZED",
            "DELETED",
            "ABANDONED",
            "EXPIRED",
            "CLONING"
          ],
          "type": "string"
        }
      },
      "id": "Version",
      "description": "A `Version` is a configuration and a collection of static files which determine how a site is displayed.",
      "type": "object"
    },
    "ListReleasesResponse": {
      "id": "ListReleasesResponse",
      "properties": {
        "releases": {
          "type": "array",
          "description": "The list of hashes of files that still need to be uploaded, if any exist.",
          "items": {
            "$ref": "Release"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "The pagination token, if more results exist beyond the ones in this response. Include this token in your next call to `ListReleases`. Page tokens are short-lived and should not be stored."
        }
      },
      "type": "object"
    },
    "Channel": {
      "properties": {
        "expireTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "The time at which the channel will be automatically deleted. If null, the channel will not be automatically deleted. This field is present in the output whether it's set directly or via the `ttl` field."
        },
        "labels": {
          "description": "Text labels used for extra metadata and/or filtering.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "updateTime": {
          "description": "Output only. The time at which the channel was last updated.",
          "format": "google-datetime",
          "readOnly": true,
          "type": "string"
        },
        "release": {
          "$ref": "Release",
          "description": "Output only. The current release for the channel, if any.",
          "readOnly": true
        },
        "ttl": {
          "format": "google-duration",
          "description": "Input only. A time-to-live for this channel. Sets `expire_time` to the provided duration past the time of the request.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The fully-qualified resource name for the channel, in the format: sites/ SITE_ID/channels/CHANNEL_ID"
        },
        "createTime": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The time at which the channel was created.",
          "format": "google-datetime"
        },
        "url": {
          "type": "string",
          "description": "Output only. The URL at which the content of this channel's current release can be viewed. This URL is a Firebase-provided subdomain of `web.app`. The content of this channel's current release can also be viewed at the Firebase-provided subdomain of `firebaseapp.com`. If this channel is the `live` channel for the Hosting site, then the content of this channel's current release can also be viewed at any connected custom domains.",
          "readOnly": true
        },
        "retainedReleaseCount": {
          "description": "The number of previous releases to retain on the channel for rollback or other purposes. Must be a number between 1-100. Defaults to 10 for new channels.",
          "type": "integer",
          "format": "int32"
        }
      },
      "description": "A `Channel` represents a stream of releases for a site. All sites have a default `live` channel that serves content to the Firebase-provided subdomains and any connected custom domains.",
      "id": "Channel",
      "type": "object"
    },
    "PopulateVersionFilesResponse": {
      "id": "PopulateVersionFilesResponse",
      "type": "object",
      "properties": {
        "uploadRequiredHashes": {
          "items": {
            "type": "string"
          },
          "description": "The content hashes of the specified files that need to be uploaded to the specified URL.",
          "type": "array"
        },
        "uploadUrl": {
          "description": "The URL to which the files should be uploaded, in the format: \"https://upload-firebasehosting.googleapis.com/upload/sites/SITE_ID /versions/VERSION_ID/files\" Perform a multipart `POST` of the Gzipped file contents to the URL using a forward slash and the hash of the file appended to the end.",
          "type": "string"
        }
      }
    },
    "PreviewConfig": {
      "id": "PreviewConfig",
      "description": "Deprecated in favor of [site channels](sites.channels).",
      "properties": {
        "expireTime": {
          "description": "Indicates the expiration time for previewing this version; preview URL requests received after this time will 404.",
          "type": "string",
          "format": "google-datetime"
        },
        "active": {
          "description": "If true, preview URLs are enabled for this version.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "Rewrite": {
      "type": "object",
      "properties": {
        "path": {
          "description": "The URL path to rewrite the request to.",
          "type": "string"
        },
        "run": {
          "description": "The request will be forwarded to Cloud Run.",
          "$ref": "CloudRunRewrite"
        },
        "function": {
          "description": "The function to proxy requests to. Must match the exported function name exactly.",
          "type": "string"
        },
        "dynamicLinks": {
          "description": "The request will be forwarded to Firebase Dynamic Links.",
          "type": "boolean"
        },
        "regex": {
          "type": "string",
          "description": "The user-supplied RE2 regular expression to match against the request URL path."
        },
        "glob": {
          "description": "The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.",
          "type": "string"
        }
      },
      "description": "A [`Rewrite`](https://firebase.google.com/docs/hosting/full-config#rewrites) specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond as if the service were given the specified destination URL.",
      "id": "Rewrite"
    },
    "CloudRunRewrite": {
      "type": "object",
      "id": "CloudRunRewrite",
      "properties": {
        "region": {
          "type": "string",
          "description": "Optional. User-provided region where the Cloud Run service is hosted. Defaults to `us-central1` if not supplied."
        },
        "serviceId": {
          "type": "string",
          "description": "Required. User-defined ID of the Cloud Run service."
        }
      },
      "description": "A configured rewrite that directs requests to a Cloud Run service. If the Cloud Run service does not exist when setting or updating your Firebase Hosting configuration, then the request fails. Any errors from the Cloud Run service are passed to the end user (for example, if you delete a service, any requests directed to that service receive a `404` error)."
    },
    "Domain": {
      "description": "The intended behavior and status information of a domain.",
      "id": "Domain",
      "type": "object",
      "properties": {
        "provisioning": {
          "description": "Output only. Information about the provisioning of certificates and the health of the DNS resolution for the domain.",
          "$ref": "DomainProvisioning"
        },
        "domainName": {
          "description": "Required. The domain name of the association.",
          "type": "string"
        },
        "updateTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Output only. The time at which the domain was last updated."
        },
        "domainRedirect": {
          "$ref": "DomainRedirect",
          "description": "If set, the domain should redirect with the provided parameters."
        },
        "site": {
          "description": "Required. The site name of the association.",
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "DOMAIN_STATUS_UNSPECIFIED",
            "DOMAIN_CHANGE_PENDING",
            "DOMAIN_ACTIVE",
            "DOMAIN_VERIFICATION_REQUIRED",
            "DOMAIN_VERIFICATION_LOST"
          ],
          "enumDescriptions": [
            "Unspecified domain association status.",
            "An external operation is in progress on the domain association and no further operations can be performed until it is complete. Formerly used for metabase updates. Not currently used",
            "The domain association is active and no additional action is required.",
            "The domain was previously verified in the legacy system. User must reverify the domain through the ownership service.",
            "The domain verification has been lost and the domain is in the grace period before being removed from the Firebase Hosting site."
          ],
          "description": "Output only. Additional status of the domain association."
        }
      }
    },
    "Empty": {
      "properties": {},
      "id": "Empty",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.",
      "type": "object"
    },
    "I18nConfig": {
      "type": "object",
      "properties": {
        "root": {
          "type": "string",
          "description": "Required. The user-supplied path where country and language specific content will be looked for within the public directory."
        }
      },
      "id": "I18nConfig",
      "description": "If provided, i18n rewrites are enabled."
    },
    "Redirect": {
      "id": "Redirect",
      "description": "A [`Redirect`](https://firebase.google.com/docs/hosting/full-config#redirects) specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond with a redirect to the specified destination path.",
      "type": "object",
      "properties": {
        "statusCode": {
          "type": "integer",
          "description": "Required. The status HTTP code to return in the response. It must be a valid 3xx status code.",
          "format": "int32"
        },
        "location": {
          "type": "string",
          "description": "Required. The value to put in the HTTP location header of the response. The location can contain capture group values from the pattern using a `:` prefix to identify the segment and an optional `*` to capture the rest of the URL. For example: \"glob\": \"/:capture*\", \"statusCode\": 301, \"location\": \"https://example.com/foo/:capture\""
        },
        "glob": {
          "description": "The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.",
          "type": "string"
        },
        "regex": {
          "type": "string",
          "description": "The user-supplied RE2 regular expression to match against the request URL path."
        }
      }
    },
    "Site": {
      "description": "A `Site` represents a Firebase Hosting site.",
      "id": "Site",
      "properties": {
        "appId": {
          "description": "Optional. The [ID of a Web App](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id) associated with the Hosting site.",
          "type": "string"
        },
        "type": {
          "enumDescriptions": [
            "Unknown state, likely the result of an error on the backend.",
            "The default Hosting site that is provisioned when a Firebase project is created.",
            "A Hosting site that the user created."
          ],
          "readOnly": true,
          "type": "string",
          "description": "Output only. The type of Hosting site. Every Firebase project has a `DEFAULT_SITE`, which is created when Hosting is provisioned for the project. All additional sites are `USER_SITE`.",
          "enum": [
            "TYPE_UNSPECIFIED",
            "DEFAULT_SITE",
            "USER_SITE"
          ]
        },
        "labels": {
          "type": "object",
          "description": "Optional. User-specified labels for the Hosting site.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "type": "string",
          "description": "Output only. The fully-qualified resource name of the Hosting site, in the format: projects/PROJECT_IDENTIFIER/sites/SITE_ID PROJECT_IDENTIFIER: the Firebase project's [`ProjectNumber`](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its [`ProjectId`](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects#FirebaseProject.FIELDS.project_id). Learn more about using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510).",
          "readOnly": true
        },
        "defaultUrl": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. The default URL for the Hosting site."
        }
      },
      "type": "object"
    },
    "ListChannelsResponse": {
      "type": "object",
      "properties": {
        "channels": {
          "items": {
            "$ref": "Channel"
          },
          "type": "array",
          "description": "The list of channels."
        },
        "nextPageToken": {
          "type": "string",
          "description": "The pagination token, if more results exist beyond the ones in this response. Include this token in your next call to `ListChannels`. Page tokens are short-lived and should not be stored."
        }
      },
      "id": "ListChannelsResponse"
    },
    "SiteConfig": {
      "type": "object",
      "id": "SiteConfig",
      "description": "A `SiteConfig` contains metadata associated with a specific site that controls Firebase Hosting serving behavior",
      "properties": {
        "cloudLoggingEnabled": {
          "description": "Whether or not web requests made by site visitors are logged via Cloud Logging.",
          "type": "boolean"
        },
        "maxVersions": {
          "description": "The number of FINALIZED versions that will be held for a site before automatic deletion. When a new version is deployed, content for versions in storage in excess of this number will be deleted, and will no longer be billed for storage usage. Oldest versions will be deleted first; sites are created with an unlimited number of max_versions by default.",
          "format": "int64",
          "type": "string"
        }
      }
    },
    "CertDnsChallenge": {
      "type": "object",
      "description": "Represents a DNS certificate challenge.",
      "id": "CertDnsChallenge",
      "properties": {
        "token": {
          "type": "string",
          "description": "The value that must be present as a TXT record on the domain name to satisfy the challenge."
        },
        "domainName": {
          "description": "The domain name upon which the DNS challenge must be satisfied.",
          "type": "string"
        }
      }
    },
    "DomainRedirect": {
      "properties": {
        "type": {
          "enum": [
            "REDIRECT_TYPE_UNSPECIFIED",
            "MOVED_PERMANENTLY"
          ],
          "description": "Required. The redirect status code.",
          "type": "string",
          "enumDescriptions": [
            "The default redirect type; should not be intentionlly used.",
            "The redirect will respond with an HTTP status code of `301 Moved Permanently`."
          ]
        },
        "domainName": {
          "description": "Required. The domain name to redirect to.",
          "type": "string"
        }
      },
      "description": "Defines the behavior of a domain-level redirect. Domain redirects preserve the path of the redirect but replace the requested domain with the one specified in the redirect configuration.",
      "type": "object",
      "id": "DomainRedirect"
    },
    "ListVersionFilesResponse": {
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "The pagination token, if more results exist beyond the ones in this response. Include this token in your next call to `ListVersionFiles`. Page tokens are short-lived and should not be stored."
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "VersionFile"
          },
          "description": " The list of paths to the hashes of the files in the specified version."
        }
      },
      "id": "ListVersionFilesResponse",
      "type": "object"
    },
    "PathFilter": {
      "type": "object",
      "id": "PathFilter",
      "description": "A representation of filter path.",
      "properties": {
        "regexes": {
          "type": "array",
          "description": "An array of RegEx values by which to filter.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ServingConfig": {
      "description": "The configuration for how incoming requests to a site should be routed and processed before serving content. The URL request paths are matched against the specified URL patterns in the configuration, then Hosting applies the applicable configuration according to a specific [priority order](https://firebase.google.com/docs/hosting/full-config#hosting_priority_order).",
      "id": "ServingConfig",
      "type": "object",
      "properties": {
        "i18n": {
          "description": "Optional. Defines i18n rewrite behavior.",
          "$ref": "I18nConfig"
        },
        "appAssociation": {
          "enum": [
            "AUTO",
            "NONE"
          ],
          "enumDescriptions": [
            "The app association files will be automatically created from the apps that exist in the Firebase project.",
            "No special handling of the app association files will occur, these paths will result in a 404 unless caught with a Rewrite."
          ],
          "description": "How to handle well known App Association files.",
          "type": "string"
        },
        "headers": {
          "description": "An array of objects, where each object specifies a URL pattern that, if matched to the request URL path, triggers Hosting to apply the specified custom response headers.",
          "items": {
            "$ref": "Header"
          },
          "type": "array"
        },
        "cleanUrls": {
          "type": "boolean",
          "description": "Defines whether to drop the file extension from uploaded files."
        },
        "redirects": {
          "items": {
            "$ref": "Redirect"
          },
          "type": "array",
          "description": "An array of objects (called redirect rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond with a redirect to the specified destination path."
        },
        "rewrites": {
          "items": {
            "$ref": "Rewrite"
          },
          "description": "An array of objects (called rewrite rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond as if the service were given the specified destination URL.",
          "type": "array"
        },
        "trailingSlashBehavior": {
          "enum": [
            "TRAILING_SLASH_BEHAVIOR_UNSPECIFIED",
            "ADD",
            "REMOVE"
          ],
          "enumDescriptions": [
            "No behavior is specified. Files are served at their exact location only, and trailing slashes are only added to directory indexes.",
            "Trailing slashes are _added_ to directory indexes as well as to any URL path not ending in a file extension.",
            "Trailing slashes are _removed_ from directory indexes as well as from any URL path not ending in a file extension."
          ],
          "type": "string",
          "description": "Defines how to handle a trailing slash in the URL path."
        }
      }
    },
    "CloneVersionRequest": {
      "type": "object",
      "properties": {
        "include": {
          "description": "If provided, only paths that match one or more RegEx values in this list will be included in the new version.",
          "$ref": "PathFilter"
        },
        "finalize": {
          "description": "If true, the call to `CloneVersion` immediately finalizes the version after cloning is complete. If false, the cloned version will have a status of `CREATED`. Use [`UpdateVersion`](patch) to set the status of the version to `FINALIZED`.",
          "type": "boolean"
        },
        "exclude": {
          "$ref": "PathFilter",
          "description": "If provided, only paths that do not match any of the RegEx values in this list will be included in the new version."
        },
        "sourceVersion": {
          "description": "Required. The unique identifier for the version to be cloned, in the format: sites/SITE_ID/versions/VERSION_ID",
          "type": "string"
        }
      },
      "id": "CloneVersionRequest"
    },
    "DomainProvisioning": {
      "id": "DomainProvisioning",
      "properties": {
        "expectedIps": {
          "description": "The list of IPs to which the domain is expected to resolve.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "discoveredIps": {
          "description": "The IPs found at the last DNS fetch.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "dnsFetchTime": {
          "description": "The time at which the last DNS fetch occurred.",
          "type": "string",
          "format": "google-datetime"
        },
        "certChallengeDiscoveredTxt": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The TXT records (for the certificate challenge) that were found at the last DNS fetch."
        },
        "certStatus": {
          "description": "The certificate provisioning status; updated when Firebase Hosting provisions an SSL certificate for the domain.",
          "enumDescriptions": [
            "Unspecified certificate provisioning status.",
            "Waiting for certificate challenge to be created.",
            "Waiting for certificate challenge to be met.",
            "Certificate challenge met; attempting to acquire/propagate certificate.",
            "Certificate obtained; propagating to the CDN.",
            "Certificate provisioned and deployed across the CDN.",
            "Certificate provisioning failed in a non-recoverable manner."
          ],
          "enum": [
            "CERT_STATUS_UNSPECIFIED",
            "CERT_PENDING",
            "CERT_MISSING",
            "CERT_PROCESSING",
            "CERT_PROPAGATING",
            "CERT_ACTIVE",
            "CERT_ERROR"
          ],
          "type": "string"
        },
        "dnsStatus": {
          "type": "string",
          "enumDescriptions": [
            "Unspecified DNS status.",
            "No DNS records have been specified for this domain yet.",
            "None of the required DNS records have been detected on the domain.",
            "Some of the required DNS records were detected, but not all of them. No extra (non-required) DNS records were detected.",
            "All required DNS records were detected. No extra (non-required) DNS records were detected.",
            "The domain has at least one of the required DNS records, and it has at least one extra (non-required) DNS record."
          ],
          "enum": [
            "DNS_STATUS_UNSPECIFIED",
            "DNS_PENDING",
            "DNS_MISSING",
            "DNS_PARTIAL_MATCH",
            "DNS_MATCH",
            "DNS_EXTRANEOUS_MATCH"
          ],
          "description": "The DNS record match status as of the last DNS fetch."
        },
        "certChallengeHttp": {
          "$ref": "CertHttpChallenge",
          "description": "The HTTP challenge for generating a certificate."
        },
        "certChallengeDns": {
          "$ref": "CertDnsChallenge",
          "description": "The DNS challenge for generating a certificate."
        }
      },
      "description": "The current certificate provisioning status information for a domain.",
      "type": "object"
    },
    "ListVersionsResponse": {
      "id": "ListVersionsResponse",
      "type": "object",
      "properties": {
        "versions": {
          "type": "array",
          "description": "The list of versions, if any exist.",
          "items": {
            "$ref": "Version"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "The pagination token, if more results exist beyond the ones in this response. Include this token in your next call to `ListVersions`. Page tokens are short-lived and should not be stored."
        }
      }
    },
    "Header": {
      "type": "object",
      "description": "A [`Header`](https://firebase.google.com/docs/hosting/full-config#headers) specifies a URL pattern that, if matched to the request URL path, triggers Hosting to apply the specified custom response headers.",
      "properties": {
        "glob": {
          "description": "The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.",
          "type": "string"
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Required. The additional headers to add to the response."
        },
        "regex": {
          "description": "The user-supplied RE2 regular expression to match against the request URL path.",
          "type": "string"
        }
      },
      "id": "Header"
    },
    "Release": {
      "type": "object",
      "id": "Release",
      "properties": {
        "name": {
          "description": "Output only. The unique identifier for the release, in either of the following formats: - sites/SITE_ID/releases/RELEASE_ID - sites/SITE_ID/channels/CHANNEL_ID/releases/RELEASE_ID This name is provided in the response body when you call [`releases.create`](sites.releases/create) or [`channels.releases.create`](sites.channels.releases/create).",
          "type": "string"
        },
        "type": {
          "description": "Explains the reason for the release. Specify a value for this field only when creating a `SITE_DISABLE` type release.",
          "enum": [
            "TYPE_UNSPECIFIED",
            "DEPLOY",
            "ROLLBACK",
            "SITE_DISABLE"
          ],
          "type": "string",
          "enumDescriptions": [
            "An unspecified type. Indicates that a version was released. This is the default value when no other `type` is explicitly specified.",
            "A version was uploaded to Firebase Hosting and released.",
            "The release points back to a previously deployed version.",
            "The release prevents the site from serving content. Firebase Hosting acts as if the site never existed."
          ]
        },
        "releaseUser": {
          "$ref": "ActingUser",
          "description": "Output only. Identifies the user who created the release."
        },
        "version": {
          "description": "Output only. The configuration and content that was released.",
          "$ref": "Version"
        },
        "releaseTime": {
          "type": "string",
          "description": "Output only. The time at which the version is set to be public.",
          "format": "google-datetime"
        },
        "message": {
          "description": "The deploy description when the release was created. The value can be up to 512 characters.",
          "type": "string"
        }
      },
      "description": " A `Release` is a particular [collection of configurations and files](sites.versions) that is set to be public at a particular time."
    },
    "PopulateVersionFilesRequest": {
      "properties": {
        "files": {
          "description": "A set of file paths to the hashes corresponding to assets that should be added to the version. A file path to an empty hash will remove the path from the version. Calculate a hash by Gzipping the file then taking the SHA256 hash of the newly compressed file.",
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      },
      "type": "object",
      "id": "PopulateVersionFilesRequest"
    },
    "CertHttpChallenge": {
      "properties": {
        "token": {
          "type": "string",
          "description": "The token to serve at the specified URL path to satisfy the certificate challenge."
        },
        "path": {
          "description": "The URL path on which to serve the specified token to satisfy the certificate challenge.",
          "type": "string"
        }
      },
      "id": "CertHttpChallenge",
      "description": "Represents an HTTP certificate challenge.",
      "type": "object"
    }
  },
  "protocol": "rest",
  "id": "firebasehosting:v1beta1",
  "resources": {
    "sites": {
      "resources": {
        "versions": {
          "methods": {
            "populateFiles": {
              "path": "v1beta1/{+parent}:populateFiles",
              "flatPath": "v1beta1/sites/{sitesId}/versions/{versionsId}:populateFiles",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/firebase"
              ],
              "request": {
                "$ref": "PopulateVersionFilesRequest"
              },
              "parameterOrder": [
                "parent"
              ],
              "id": "firebasehosting.sites.versions.populateFiles",
              "parameters": {
                "parent": {
                  "description": "Required. The version to which to add files, in the format: sites/SITE_ID /versions/VERSION_ID",
                  "pattern": "^sites/[^/]+/versions/[^/]+$",
                  "required": true,
                  "location": "path",
                  "type": "string"
                }
              },
              "httpMethod": "POST",
              "description": " Adds content files to the specified version. Each file must be under 2 GB.",
              "response": {
                "$ref": "PopulateVersionFilesResponse"
              }
            },
            "list": {
              "description": "Lists the versions that have been created for the specified site. This list includes versions for both the default `live` channel and any active preview channels for the specified site.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/cloud-platform.read-only",
                "https://www.googleapis.com/auth/firebase",
                "https://www.googleapis.com/auth/firebase.readonly"
              ],
              "response": {
                "$ref": "ListVersionsResponse"
              },
              "parameters": {
                "pageSize": {
                  "type": "integer",
                  "location": "query",
                  "format": "int32",
                  "description": "The maximum number of versions to return. The service may return a lower number if fewer versions exist than this maximum number. If unspecified, defaults to 25. The maximum value is 100; values above 100 will be coerced to 100."
                },
                "parent": {
                  "required": true,
                  "type": "string",
                  "pattern": "^sites/[^/]+$",
                  "description": "Required. The site or channel for which to list versions, in either of the following formats: - sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID ",
                  "location": "path"
                },
                "filter": {
                  "type": "string",
                  "description": "A filter string used to return a subset of versions in the response. The currently supported fields for filtering are: `name`, `status`, and `create_time`. Learn more about filtering in Google's [AIP 160 standard](https://google.aip.dev/160).",
                  "location": "query"
                },
                "pageToken": {
                  "description": "A token from a previous call to `ListVersions` that tells the server where to resume listing.",
                  "type": "string",
                  "location": "query"
                }
              },
              "parameterOrder": [
                "parent"
              ],
              "httpMethod": "GET",
              "id": "firebasehosting.sites.versions.list",
              "flatPath": "v1beta1/sites/{sitesId}/versions",
              "path": "v1beta1/{+parent}/versions"
            },
            "delete": {
              "id": "firebasehosting.sites.versions.delete",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/firebase"
              ],
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Empty"
              },
              "httpMethod": "DELETE",
              "description": "Deletes the specified version.",
              "flatPath": "v1beta1/sites/{sitesId}/versions/{versionsId}",
              "path": "v1beta1/{+name}",
              "parameters": {
                "name": {
                  "type": "string",
                  "required": true,
                  "description": "Required. The fully-qualified resource name for the version, in the format: sites/SITE_ID/versions/VERSION_ID",
                  "location": "path",
                  "pattern": "^sites/[^/]+/versions/[^/]+$"
                }
              }
            },
            "create": {
              "flatPath": "v1beta1/sites/{sitesId}/versions",
              "response": {
                "$ref": "Version"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/firebase"
              ],
              "path": "v1beta1/{+parent}/versions",
              "description": "Creates a new version for the specified site.",
              "request": {
                "$ref": "Version"
              },
              "parameterOrder": [
                "parent"
              ],
              "parameters": {
                "versionId": {
                  "type": "string",
                  "description": "A unique id for the new version. This is was only specified for legacy version creations, and should be blank.",
                  "location": "query"
                },
                "sizeBytes": {
                  "location": "query",
                  "description": "The self-reported size of the version. This value is used for a pre-emptive quota check for legacy version uploads.",
                  "format": "int64",
                  "type": "string"
                },
                "parent": {
                  "required": true,
                  "type": "string",
                  "pattern": "^sites/[^/]+$",
                  "location": "path",
                  "description": "Required. The site in which to create the version, in the format: sites/ SITE_ID"
                }
              },
              "id": "firebasehosting.sites.versions.create",
              "httpMethod": "POST"
            },
            "clone": {
              "path": "v1beta1/{+parent}/versions:clone",
              "description": "Creates a new version on the specified target site using the content of the specified version.",
              "flatPath": "v1beta1/sites/{sitesId}/versions:clone",
              "parameters": {
                "parent": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "pattern": "^sites/[^/]+$",
                  "description": "Required. The target site for the cloned version, in the format: sites/ SITE_ID"
                }
              },
              "parameterOrder": [
                "parent"
              ],
              "request": {
                "$ref": "CloneVersionRequest"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/firebase"
              ],
              "id": "firebasehosting.sites.versions.clone",
              "httpMethod": "POST",
              "response": {
                "$ref": "Operation"
              }
            },
            "patch": {
              "path": "v1beta1/{+name}",
              "parameters": {
                "name": {
                  "pattern": "^sites/[^/]+/versions/[^/]+$",
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The fully-qualified resource name for the version, in the format: sites/ SITE_ID/versions/VERSION_ID This name is provided in the response body when you call [`CreateVersion`](sites.versions/create)."
                },
                "updateMask": {
                  "type": "string",
                  "location": "query",
                  "format": "google-fieldmask",
                  "description": "A set of field names from your [version](../sites.versions) that you want to update. A field will be overwritten if, and only if, it's in the mask. If a mask is not provided then a default mask of only [`status`](../sites.versions#Version.FIELDS.status) will be used."
                }
              },
              "description": " Updates the specified metadata for the specified version. This method will fail with `FAILED_PRECONDITION` in the event of an invalid state transition. The supported [state](../sites.versions#versionstatus) transitions for a version are from `CREATED` to `FINALIZED`. Use [`DeleteVersion`](delete) to set the status of a version to `DELETED`.",
              "response": {
                "$ref": "Version"
              },
              "parameterOrder": [
                "name"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/firebase"
              ],
              "httpMethod": "PATCH",
              "id": "firebasehosting.sites.versions.patch",
              "flatPath": "v1beta1/sites/{sitesId}/versions/{versionsId}",
              "request": {
                "$ref": "Version"
              }
            }
          },
          "resources": {
            "files": {
              "methods": {
                "list": {
                  "httpMethod": "GET",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-platform.read-only",
                    "https://www.googleapis.com/auth/firebase",
                    "https://www.googleapis.com/auth/firebase.readonly"
                  ],
                  "parameters": {
                    "parent": {
                      "description": "Required. The version for which to list files, in the format: sites/SITE_ID /versions/VERSION_ID",
                      "type": "string",
                      "required": true,
                      "pattern": "^sites/[^/]+/versions/[^/]+$",
                      "location": "path"
                    },
                    "pageSize": {
                      "format": "int32",
                      "description": "The maximum number of version files to return. The service may return a lower number if fewer version files exist than this maximum number. If unspecified, defaults to 1000.",
                      "type": "integer",
                      "location": "query"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "STATUS_UNSPECIFIED",
                        "EXPECTED",
                        "ACTIVE"
                      ],
                      "description": " The type of files that should be listed for the specified version.",
                      "location": "query",
                      "enumDescriptions": [
                        "The default status; should not be intentionally used.",
                        "The file has been included in the version and is expected to be uploaded in the near future.",
                        "The file has already been uploaded to Firebase Hosting."
                      ]
                    },
                    "pageToken": {
                      "location": "query",
                      "description": "A token from a previous call to `ListVersionFiles` that tells the server where to resume listing.",
                      "type": "string"
                    }
                  },
                  "id": "firebasehosting.sites.versions.files.list",
                  "description": "Lists the remaining files to be uploaded for the specified version.",
                  "response": {
                    "$ref": "ListVersionFilesResponse"
                  },
                  "flatPath": "v1beta1/sites/{sitesId}/versions/{versionsId}/files",
                  "path": "v1beta1/{+parent}/files",
                  "parameterOrder": [
                    "parent"
                  ]
                }
              }
            }
          }
        },
        "channels": {
          "methods": {
            "create": {
              "response": {
                "$ref": "Channel"
              },
              "description": "Creates a new channel in the specified site.",
              "path": "v1beta1/{+parent}/channels",
              "request": {
                "$ref": "Channel"
              },
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/firebase"
              ],
              "parameterOrder": [
                "parent"
              ],
              "flatPath": "v1beta1/sites/{sitesId}/channels",
              "parameters": {
                "parent": {
                  "location": "path",
                  "description": "Required. The site in which to create this channel, in the format: sites/ SITE_ID",
                  "type": "string",
                  "required": true,
                  "pattern": "^sites/[^/]+$"
                },
                "channelId": {
                  "description": "Required. Immutable. A unique ID within the site that identifies the channel.",
                  "location": "query",
                  "type": "string"
                }
              },
              "id": "firebasehosting.sites.channels.create"
            },
            "get": {
              "path": "v1beta1/{+name}",
              "parameterOrder": [
                "name"
              ],
              "description": "Retrieves information for the specified channel of the specified site.",
              "id": "firebasehosting.sites.channels.get",
              "httpMethod": "GET",
              "flatPath": "v1beta1/sites/{sitesId}/channels/{channelsId}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/cloud-platform.read-only",
                "https://www.googleapis.com/auth/firebase",
                "https://www.googleapis.com/auth/firebase.readonly"
              ],
              "parameters": {
                "name": {
                  "location": "path",
                  "required": true,
                  "pattern": "^sites/[^/]+/channels/[^/]+$",
                  "type": "string",
                  "description": "Required. The fully-qualified resource name for the channel, in the format: sites/SITE_ID/channels/CHANNEL_ID"
                }
              },
              "response": {
                "$ref": "Channel"
              }
            },
            "list": {
              "id": "firebasehosting.sites.channels.list",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/cloud-platform.read-only",
                "https://www.googleapis.com/auth/firebase",
                "https://www.googleapis.com/auth/firebase.readonly"
              ],
              "response": {
                "$ref": "ListChannelsResponse"
              },
              "description": "Lists the channels for the specified site. All sites have a default `live` channel.",
              "path": "v1beta1/{+parent}/channels",
              "parameters": {
                "parent": {
                  "pattern": "^sites/[^/]+$",
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "Required. The site for which to list channels, in the format: sites/SITE_ID"
                },
                "pageSize": {
                  "location": "query",
                  "type": "integer",
                  "description": "The maximum number of channels to return. The service may return a lower number if fewer channels exist than this maximum number. If unspecified, defaults to 10. The maximum value is 100; values above 100 will be coerced to 100.",
                  "format": "int32"
                },
                "pageToken": {
                  "location": "query",
                  "description": "A token from a previous call to `ListChannels` that tells the server where to resume listing.",
                  "type": "string"
                }
              },
              "httpMethod": "GET",
              "parameterOrder": [
                "parent"
              ],
              "flatPath": "v1beta1/sites/{sitesId}/channels"
            },
            "patch": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/firebase"
              ],
              "description": "Updates information for the specified channel of the specified site. Implicitly creates the channel if it doesn't already exist.",
              "response": {
                "$ref": "Channel"
              },
              "flatPath": "v1beta1/sites/{sitesId}/channels/{channelsId}",
              "httpMethod": "PATCH",
              "path": "v1beta1/{+name}",
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "name": {
                  "required": true,
                  "description": "The fully-qualified resource name for the channel, in the format: sites/ SITE_ID/channels/CHANNEL_ID",
                  "location": "path",
                  "type": "string",
                  "pattern": "^sites/[^/]+/channels/[^/]+$"
                },
                "updateMask": {
                  "description": "A comma-separated list of fields to be updated in this request.",
                  "format": "google-fieldmask",
                  "type": "string",
                  "location": "query"
                }
              },
              "id": "firebasehosting.sites.channels.patch",
              "request": {
                "$ref": "Channel"
              }
            },
            "delete": {
              "parameters": {
                "name": {
                  "pattern": "^sites/[^/]+/channels/[^/]+$",
                  "description": "Required. The fully-qualified resource name for the channel, in the format: sites/SITE_ID/channels/CHANNEL_ID",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              },
              "description": "Deletes the specified channel of the specified site. The `live` channel cannot be deleted.",
              "httpMethod": "DELETE",
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Empty"
              },
              "path": "v1beta1/{+name}",
              "flatPath": "v1beta1/sites/{sitesId}/channels/{channelsId}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/firebase"
              ],
              "id": "firebasehosting.sites.channels.delete"
            }
          },
          "resources": {
            "releases": {
              "methods": {
                "list": {
                  "parameterOrder": [
                    "parent"
                  ],
                  "id": "firebasehosting.sites.channels.releases.list",
                  "httpMethod": "GET",
                  "response": {
                    "$ref": "ListReleasesResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-platform.read-only",
                    "https://www.googleapis.com/auth/firebase",
                    "https://www.googleapis.com/auth/firebase.readonly"
                  ],
                  "parameters": {
                    "pageSize": {
                      "format": "int32",
                      "description": "The maximum number of releases to return. The service may return a lower number if fewer releases exist than this maximum number. If unspecified, defaults to 100.",
                      "type": "integer",
                      "location": "query"
                    },
                    "pageToken": {
                      "type": "string",
                      "location": "query",
                      "description": "A token from a previous call to `releases.list` or `channels.releases.list` that tells the server where to resume listing."
                    },
                    "parent": {
                      "required": true,
                      "pattern": "^sites/[^/]+/channels/[^/]+$",
                      "description": "Required. The site or channel for which to list releases, in either of the following formats: - sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID ",
                      "location": "path",
                      "type": "string"
                    }
                  },
                  "flatPath": "v1beta1/sites/{sitesId}/channels/{channelsId}/releases",
                  "description": "Lists the releases that have been created for the specified site or channel. When used to list releases for a site, this list includes releases for both the default `live` channel and any active preview channels for the specified site.",
                  "path": "v1beta1/{+parent}/releases"
                },
                "create": {
                  "request": {
                    "$ref": "Release"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/firebase"
                  ],
                  "parameters": {
                    "versionName": {
                      "description": " The unique identifier for a version, in the format: sites/SITE_ID/versions/ VERSION_ID The SITE_ID in this version identifier must match the SITE_ID in the `parent` parameter. This query parameter must be empty if the `type` field in the request body is `SITE_DISABLE`.",
                      "location": "query",
                      "type": "string"
                    },
                    "parent": {
                      "pattern": "^sites/[^/]+/channels/[^/]+$",
                      "description": "Required. The site or channel to which the release belongs, in either of the following formats: - sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID",
                      "required": true,
                      "location": "path",
                      "type": "string"
                    }
                  },
                  "description": "Creates a new release, which makes the content of the specified version actively display on the appropriate URL(s).",
                  "flatPath": "v1beta1/sites/{sitesId}/channels/{channelsId}/releases",
                  "id": "firebasehosting.sites.channels.releases.create",
                  "response": {
                    "$ref": "Release"
                  },
                  "httpMethod": "POST",
                  "parameterOrder": [
                    "parent"
                  ],
                  "path": "v1beta1/{+parent}/releases"
                }
              }
            }
          }
        },
        "releases": {
          "methods": {
            "list": {
              "httpMethod": "GET",
              "path": "v1beta1/{+parent}/releases",
              "flatPath": "v1beta1/sites/{sitesId}/releases",
              "id": "firebasehosting.sites.releases.list",
              "response": {
                "$ref": "ListReleasesResponse"
              },
              "description": "Lists the releases that have been created for the specified site or channel. When used to list releases for a site, this list includes releases for both the default `live` channel and any active preview channels for the specified site.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/cloud-platform.read-only",
                "https://www.googleapis.com/auth/firebase",
                "https://www.googleapis.com/auth/firebase.readonly"
              ],
              "parameterOrder": [
                "parent"
              ],
              "parameters": {
                "parent": {
                  "type": "string",
                  "description": "Required. The site or channel for which to list releases, in either of the following formats: - sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID ",
                  "required": true,
                  "location": "path",
                  "pattern": "^sites/[^/]+$"
                },
                "pageSize": {
                  "location": "query",
                  "format": "int32",
                  "type": "integer",
                  "description": "The maximum number of releases to return. The service may return a lower number if fewer releases exist than this maximum number. If unspecified, defaults to 100."
                },
                "pageToken": {
                  "location": "query",
                  "type": "string",
                  "description": "A token from a previous call to `releases.list` or `channels.releases.list` that tells the server where to resume listing."
                }
              }
            },
            "create": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/firebase"
              ],
              "parameters": {
                "parent": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "pattern": "^sites/[^/]+$",
                  "description": "Required. The site or channel to which the release belongs, in either of the following formats: - sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID"
                },
                "versionName": {
                  "location": "query",
                  "type": "string",
                  "description": " The unique identifier for a version, in the format: sites/SITE_ID/versions/ VERSION_ID The SITE_ID in this version identifier must match the SITE_ID in the `parent` parameter. This query parameter must be empty if the `type` field in the request body is `SITE_DISABLE`."
                }
              },
              "description": "Creates a new release, which makes the content of the specified version actively display on the appropriate URL(s).",
              "parameterOrder": [
                "parent"
              ],
              "response": {
                "$ref": "Release"
              },
              "id": "firebasehosting.sites.releases.create",
              "flatPath": "v1beta1/sites/{sitesId}/releases",
              "request": {
                "$ref": "Release"
              },
              "httpMethod": "POST",
              "path": "v1beta1/{+parent}/releases"
            }
          }
        },
        "domains": {
          "methods": {
            "delete": {
              "httpMethod": "DELETE",
              "parameterOrder": [
                "name"
              ],
              "id": "firebasehosting.sites.domains.delete",
              "path": "v1beta1/{+name}",
              "flatPath": "v1beta1/sites/{sitesId}/domains/{domainsId}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/firebase"
              ],
              "description": "Deletes the existing domain mapping on the specified site.",
              "parameters": {
                "name": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "pattern": "^sites/[^/]+/domains/[^/]+$",
                  "description": "Required. The name of the domain association to delete."
                }
              },
              "response": {
                "$ref": "Empty"
              }
            },
            "create": {
              "flatPath": "v1beta1/sites/{sitesId}/domains",
              "response": {
                "$ref": "Domain"
              },
              "id": "firebasehosting.sites.domains.create",
              "parameterOrder": [
                "parent"
              ],
              "parameters": {
                "parent": {
                  "required": true,
                  "location": "path",
                  "description": "Required. The parent to create the domain association for, in the format: sites/site-name",
                  "type": "string",
                  "pattern": "^sites/[^/]+$"
                }
              },
              "description": "Creates a domain mapping on the specified site.",
              "path": "v1beta1/{+parent}/domains",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/firebase"
              ],
              "httpMethod": "POST",
              "request": {
                "$ref": "Domain"
              }
            },
            "list": {
              "parameters": {
                "parent": {
                  "description": "Required. The parent for which to list domains, in the format: sites/ site-name",
                  "pattern": "^sites/[^/]+$",
                  "type": "string",
                  "required": true,
                  "location": "path"
                },
                "pageToken": {
                  "description": "The next_page_token from a previous request, if provided.",
                  "type": "string",
                  "location": "query"
                },
                "pageSize": {
                  "description": "The page size to return. Defaults to 50.",
                  "type": "integer",
                  "location": "query",
                  "format": "int32"
                }
              },
              "httpMethod": "GET",
              "description": "Lists the domains for the specified site.",
              "path": "v1beta1/{+parent}/domains",
              "flatPath": "v1beta1/sites/{sitesId}/domains",
              "response": {
                "$ref": "ListDomainsResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/cloud-platform.read-only",
                "https://www.googleapis.com/auth/firebase",
                "https://www.googleapis.com/auth/firebase.readonly"
              ],
              "id": "firebasehosting.sites.domains.list",
              "parameterOrder": [
                "parent"
              ]
            },
            "get": {
              "flatPath": "v1beta1/sites/{sitesId}/domains/{domainsId}",
              "description": "Gets a domain mapping on the specified site.",
              "httpMethod": "GET",
              "parameters": {
                "name": {
                  "pattern": "^sites/[^/]+/domains/[^/]+$",
                  "description": "Required. The name of the domain configuration to get.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/cloud-platform.read-only",
                "https://www.googleapis.com/auth/firebase",
                "https://www.googleapis.com/auth/firebase.readonly"
              ],
              "parameterOrder": [
                "name"
              ],
              "id": "firebasehosting.sites.domains.get",
              "response": {
                "$ref": "Domain"
              },
              "path": "v1beta1/{+name}"
            },
            "update": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/firebase"
              ],
              "parameters": {
                "name": {
                  "pattern": "^sites/[^/]+/domains/[^/]+$",
                  "location": "path",
                  "description": "Required. The name of the domain association to update or create, if an association doesn't already exist.",
                  "required": true,
                  "type": "string"
                }
              },
              "id": "firebasehosting.sites.domains.update",
              "flatPath": "v1beta1/sites/{sitesId}/domains/{domainsId}",
              "parameterOrder": [
                "name"
              ],
              "path": "v1beta1/{+name}",
              "description": "Updates the specified domain mapping, creating the mapping as if it does not exist.",
              "httpMethod": "PUT",
              "response": {
                "$ref": "Domain"
              },
              "request": {
                "$ref": "Domain"
              }
            }
          }
        }
      },
      "methods": {
        "updateConfig": {
          "flatPath": "v1beta1/sites/{sitesId}/config",
          "id": "firebasehosting.sites.updateConfig",
          "request": {
            "$ref": "SiteConfig"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/firebase"
          ],
          "httpMethod": "PATCH",
          "parameterOrder": [
            "name"
          ],
          "description": "Sets the Hosting metadata for a specific site.",
          "path": "v1beta1/{+name}",
          "parameters": {
            "name": {
              "required": true,
              "type": "string",
              "location": "path",
              "pattern": "^sites/[^/]+/config$",
              "description": "Required. The site for which to update the SiteConfig, in the format: sites/ site-name/config"
            },
            "updateMask": {
              "format": "google-fieldmask",
              "description": "A set of field names from your [site configuration](../sites.SiteConfig) that you want to update. A field will be overwritten if, and only if, it's in the mask. If a mask is not provided then a default mask of only [`max_versions`](../sites.SiteConfig.max_versions) will be used.",
              "type": "string",
              "location": "query"
            }
          },
          "response": {
            "$ref": "SiteConfig"
          }
        },
        "getConfig": {
          "path": "v1beta1/{+name}",
          "flatPath": "v1beta1/sites/{sitesId}/config",
          "parameterOrder": [
            "name"
          ],
          "id": "firebasehosting.sites.getConfig",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-platform.read-only",
            "https://www.googleapis.com/auth/firebase",
            "https://www.googleapis.com/auth/firebase.readonly"
          ],
          "parameters": {
            "name": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Required. The site for which to get the SiteConfig, in the format: sites/ site-name/config",
              "pattern": "^sites/[^/]+/config$"
            }
          },
          "description": "Gets the Hosting metadata for a specific site.",
          "response": {
            "$ref": "SiteConfig"
          },
          "httpMethod": "GET"
        }
      }
    },
    "projects": {
      "resources": {
        "operations": {
          "methods": {
            "get": {
              "parameterOrder": [
                "name"
              ],
              "httpMethod": "GET",
              "response": {
                "$ref": "Operation"
              },
              "path": "v1beta1/{+name}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/cloud-platform.read-only",
                "https://www.googleapis.com/auth/firebase",
                "https://www.googleapis.com/auth/firebase.readonly"
              ],
              "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
              "flatPath": "v1beta1/projects/{projectsId}/operations/{operationsId}",
              "parameters": {
                "name": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "pattern": "^projects/[^/]+/operations/[^/]+$",
                  "description": "The name of the operation resource."
                }
              },
              "id": "firebasehosting.projects.operations.get"
            }
          }
        },
        "sites": {
          "resources": {
            "domains": {
              "methods": {
                "update": {
                  "request": {
                    "$ref": "Domain"
                  },
                  "description": "Updates the specified domain mapping, creating the mapping as if it does not exist.",
                  "parameters": {
                    "name": {
                      "required": true,
                      "description": "Required. The name of the domain association to update or create, if an association doesn't already exist.",
                      "location": "path",
                      "pattern": "^projects/[^/]+/sites/[^/]+/domains/[^/]+$",
                      "type": "string"
                    }
                  },
                  "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/domains/{domainsId}",
                  "path": "v1beta1/{+name}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/firebase"
                  ],
                  "response": {
                    "$ref": "Domain"
                  },
                  "httpMethod": "PUT",
                  "id": "firebasehosting.projects.sites.domains.update",
                  "parameterOrder": [
                    "name"
                  ]
                },
                "list": {
                  "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/domains",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-platform.read-only",
                    "https://www.googleapis.com/auth/firebase",
                    "https://www.googleapis.com/auth/firebase.readonly"
                  ],
                  "id": "firebasehosting.projects.sites.domains.list",
                  "parameters": {
                    "parent": {
                      "description": "Required. The parent for which to list domains, in the format: sites/ site-name",
                      "location": "path",
                      "type": "string",
                      "required": true,
                      "pattern": "^projects/[^/]+/sites/[^/]+$"
                    },
                    "pageSize": {
                      "location": "query",
                      "format": "int32",
                      "type": "integer",
                      "description": "The page size to return. Defaults to 50."
                    },
                    "pageToken": {
                      "description": "The next_page_token from a previous request, if provided.",
                      "type": "string",
                      "location": "query"
                    }
                  },
                  "response": {
                    "$ref": "ListDomainsResponse"
                  },
                  "description": "Lists the domains for the specified site.",
                  "httpMethod": "GET",
                  "parameterOrder": [
                    "parent"
                  ],
                  "path": "v1beta1/{+parent}/domains"
                },
                "delete": {
                  "description": "Deletes the existing domain mapping on the specified site.",
                  "path": "v1beta1/{+name}",
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "firebasehosting.projects.sites.domains.delete",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/firebase"
                  ],
                  "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/domains/{domainsId}",
                  "response": {
                    "$ref": "Empty"
                  },
                  "parameters": {
                    "name": {
                      "description": "Required. The name of the domain association to delete.",
                      "pattern": "^projects/[^/]+/sites/[^/]+/domains/[^/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "httpMethod": "DELETE"
                },
                "get": {
                  "httpMethod": "GET",
                  "parameterOrder": [
                    "name"
                  ],
                  "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/domains/{domainsId}",
                  "description": "Gets a domain mapping on the specified site.",
                  "id": "firebasehosting.projects.sites.domains.get",
                  "parameters": {
                    "name": {
                      "description": "Required. The name of the domain configuration to get.",
                      "location": "path",
                      "pattern": "^projects/[^/]+/sites/[^/]+/domains/[^/]+$",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "response": {
                    "$ref": "Domain"
                  },
                  "path": "v1beta1/{+name}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-platform.read-only",
                    "https://www.googleapis.com/auth/firebase",
                    "https://www.googleapis.com/auth/firebase.readonly"
                  ]
                },
                "create": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/firebase"
                  ],
                  "description": "Creates a domain mapping on the specified site.",
                  "path": "v1beta1/{+parent}/domains",
                  "request": {
                    "$ref": "Domain"
                  },
                  "parameters": {
                    "parent": {
                      "type": "string",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects/[^/]+/sites/[^/]+$",
                      "description": "Required. The parent to create the domain association for, in the format: sites/site-name"
                    }
                  },
                  "response": {
                    "$ref": "Domain"
                  },
                  "httpMethod": "POST",
                  "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/domains",
                  "parameterOrder": [
                    "parent"
                  ],
                  "id": "firebasehosting.projects.sites.domains.create"
                }
              }
            },
            "versions": {
              "resources": {
                "files": {
                  "methods": {
                    "list": {
                      "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/versions/{versionsId}/files",
                      "path": "v1beta1/{+parent}/files",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-platform.read-only",
                        "https://www.googleapis.com/auth/firebase",
                        "https://www.googleapis.com/auth/firebase.readonly"
                      ],
                      "parameterOrder": [
                        "parent"
                      ],
                      "description": "Lists the remaining files to be uploaded for the specified version.",
                      "response": {
                        "$ref": "ListVersionFilesResponse"
                      },
                      "id": "firebasehosting.projects.sites.versions.files.list",
                      "parameters": {
                        "status": {
                          "location": "query",
                          "enumDescriptions": [
                            "The default status; should not be intentionally used.",
                            "The file has been included in the version and is expected to be uploaded in the near future.",
                            "The file has already been uploaded to Firebase Hosting."
                          ],
                          "enum": [
                            "STATUS_UNSPECIFIED",
                            "EXPECTED",
                            "ACTIVE"
                          ],
                          "type": "string",
                          "description": " The type of files that should be listed for the specified version."
                        },
                        "pageSize": {
                          "type": "integer",
                          "location": "query",
                          "format": "int32",
                          "description": "The maximum number of version files to return. The service may return a lower number if fewer version files exist than this maximum number. If unspecified, defaults to 1000."
                        },
                        "pageToken": {
                          "location": "query",
                          "type": "string",
                          "description": "A token from a previous call to `ListVersionFiles` that tells the server where to resume listing."
                        },
                        "parent": {
                          "required": true,
                          "pattern": "^projects/[^/]+/sites/[^/]+/versions/[^/]+$",
                          "description": "Required. The version for which to list files, in the format: sites/SITE_ID /versions/VERSION_ID",
                          "location": "path",
                          "type": "string"
                        }
                      },
                      "httpMethod": "GET"
                    }
                  }
                }
              },
              "methods": {
                "list": {
                  "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/versions",
                  "httpMethod": "GET",
                  "path": "v1beta1/{+parent}/versions",
                  "id": "firebasehosting.projects.sites.versions.list",
                  "parameterOrder": [
                    "parent"
                  ],
                  "description": "Lists the versions that have been created for the specified site. This list includes versions for both the default `live` channel and any active preview channels for the specified site.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-platform.read-only",
                    "https://www.googleapis.com/auth/firebase",
                    "https://www.googleapis.com/auth/firebase.readonly"
                  ],
                  "parameters": {
                    "filter": {
                      "type": "string",
                      "description": "A filter string used to return a subset of versions in the response. The currently supported fields for filtering are: `name`, `status`, and `create_time`. Learn more about filtering in Google's [AIP 160 standard](https://google.aip.dev/160).",
                      "location": "query"
                    },
                    "pageSize": {
                      "format": "int32",
                      "description": "The maximum number of versions to return. The service may return a lower number if fewer versions exist than this maximum number. If unspecified, defaults to 25. The maximum value is 100; values above 100 will be coerced to 100.",
                      "location": "query",
                      "type": "integer"
                    },
                    "pageToken": {
                      "location": "query",
                      "description": "A token from a previous call to `ListVersions` that tells the server where to resume listing.",
                      "type": "string"
                    },
                    "parent": {
                      "pattern": "^projects/[^/]+/sites/[^/]+$",
                      "required": true,
                      "description": "Required. The site or channel for which to list versions, in either of the following formats: - sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID ",
                      "location": "path",
                      "type": "string"
                    }
                  },
                  "response": {
                    "$ref": "ListVersionsResponse"
                  }
                },
                "populateFiles": {
                  "parameters": {
                    "parent": {
                      "type": "string",
                      "description": "Required. The version to which to add files, in the format: sites/SITE_ID /versions/VERSION_ID",
                      "pattern": "^projects/[^/]+/sites/[^/]+/versions/[^/]+$",
                      "location": "path",
                      "required": true
                    }
                  },
                  "id": "firebasehosting.projects.sites.versions.populateFiles",
                  "request": {
                    "$ref": "PopulateVersionFilesRequest"
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/firebase"
                  ],
                  "response": {
                    "$ref": "PopulateVersionFilesResponse"
                  },
                  "httpMethod": "POST",
                  "description": " Adds content files to the specified version. Each file must be under 2 GB.",
                  "path": "v1beta1/{+parent}:populateFiles",
                  "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/versions/{versionsId}:populateFiles"
                },
                "delete": {
                  "description": "Deletes the specified version.",
                  "parameters": {
                    "name": {
                      "description": "Required. The fully-qualified resource name for the version, in the format: sites/SITE_ID/versions/VERSION_ID",
                      "type": "string",
                      "location": "path",
                      "pattern": "^projects/[^/]+/sites/[^/]+/versions/[^/]+$",
                      "required": true
                    }
                  },
                  "response": {
                    "$ref": "Empty"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/versions/{versionsId}",
                  "httpMethod": "DELETE",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/firebase"
                  ],
                  "path": "v1beta1/{+name}",
                  "id": "firebasehosting.projects.sites.versions.delete"
                },
                "patch": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/firebase"
                  ],
                  "parameters": {
                    "updateMask": {
                      "type": "string",
                      "format": "google-fieldmask",
                      "location": "query",
                      "description": "A set of field names from your [version](../sites.versions) that you want to update. A field will be overwritten if, and only if, it's in the mask. If a mask is not provided then a default mask of only [`status`](../sites.versions#Version.FIELDS.status) will be used."
                    },
                    "name": {
                      "pattern": "^projects/[^/]+/sites/[^/]+/versions/[^/]+$",
                      "required": true,
                      "description": "The fully-qualified resource name for the version, in the format: sites/ SITE_ID/versions/VERSION_ID This name is provided in the response body when you call [`CreateVersion`](sites.versions/create).",
                      "type": "string",
                      "location": "path"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Version"
                  },
                  "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/versions/{versionsId}",
                  "httpMethod": "PATCH",
                  "path": "v1beta1/{+name}",
                  "id": "firebasehosting.projects.sites.versions.patch",
                  "description": " Updates the specified metadata for the specified version. This method will fail with `FAILED_PRECONDITION` in the event of an invalid state transition. The supported [state](../sites.versions#versionstatus) transitions for a version are from `CREATED` to `FINALIZED`. Use [`DeleteVersion`](delete) to set the status of a version to `DELETED`.",
                  "request": {
                    "$ref": "Version"
                  }
                },
                "create": {
                  "parameterOrder": [
                    "parent"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/firebase"
                  ],
                  "description": "Creates a new version for the specified site.",
                  "path": "v1beta1/{+parent}/versions",
                  "id": "firebasehosting.projects.sites.versions.create",
                  "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/versions",
                  "parameters": {
                    "sizeBytes": {
                      "format": "int64",
                      "description": "The self-reported size of the version. This value is used for a pre-emptive quota check for legacy version uploads.",
                      "location": "query",
                      "type": "string"
                    },
                    "parent": {
                      "required": true,
                      "pattern": "^projects/[^/]+/sites/[^/]+$",
                      "description": "Required. The site in which to create the version, in the format: sites/ SITE_ID",
                      "location": "path",
                      "type": "string"
                    },
                    "versionId": {
                      "location": "query",
                      "description": "A unique id for the new version. This is was only specified for legacy version creations, and should be blank.",
                      "type": "string"
                    }
                  },
                  "response": {
                    "$ref": "Version"
                  },
                  "httpMethod": "POST",
                  "request": {
                    "$ref": "Version"
                  }
                },
                "clone": {
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/firebase"
                  ],
                  "parameterOrder": [
                    "parent"
                  ],
                  "request": {
                    "$ref": "CloneVersionRequest"
                  },
                  "httpMethod": "POST",
                  "parameters": {
                    "parent": {
                      "required": true,
                      "description": "Required. The target site for the cloned version, in the format: sites/ SITE_ID",
                      "pattern": "^projects/[^/]+/sites/[^/]+$",
                      "type": "string",
                      "location": "path"
                    }
                  },
                  "id": "firebasehosting.projects.sites.versions.clone",
                  "path": "v1beta1/{+parent}/versions:clone",
                  "description": "Creates a new version on the specified target site using the content of the specified version.",
                  "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/versions:clone"
                }
              }
            },
            "channels": {
              "methods": {
                "create": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/firebase"
                  ],
                  "description": "Creates a new channel in the specified site.",
                  "path": "v1beta1/{+parent}/channels",
                  "response": {
                    "$ref": "Channel"
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "id": "firebasehosting.projects.sites.channels.create",
                  "parameters": {
                    "channelId": {
                      "location": "query",
                      "description": "Required. Immutable. A unique ID within the site that identifies the channel.",
                      "type": "string"
                    },
                    "parent": {
                      "location": "path",
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/sites/[^/]+$",
                      "description": "Required. The site in which to create this channel, in the format: sites/ SITE_ID"
                    }
                  },
                  "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/channels",
                  "httpMethod": "POST",
                  "request": {
                    "$ref": "Channel"
                  }
                },
                "delete": {
                  "parameters": {
                    "name": {
                      "location": "path",
                      "required": true,
                      "description": "Required. The fully-qualified resource name for the channel, in the format: sites/SITE_ID/channels/CHANNEL_ID",
                      "type": "string",
                      "pattern": "^projects/[^/]+/sites/[^/]+/channels/[^/]+$"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/channels/{channelsId}",
                  "id": "firebasehosting.projects.sites.channels.delete",
                  "path": "v1beta1/{+name}",
                  "response": {
                    "$ref": "Empty"
                  },
                  "httpMethod": "DELETE",
                  "description": "Deletes the specified channel of the specified site. The `live` channel cannot be deleted.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/firebase"
                  ]
                },
                "get": {
                  "httpMethod": "GET",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-platform.read-only",
                    "https://www.googleapis.com/auth/firebase",
                    "https://www.googleapis.com/auth/firebase.readonly"
                  ],
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/sites/[^/]+/channels/[^/]+$",
                      "type": "string",
                      "description": "Required. The fully-qualified resource name for the channel, in the format: sites/SITE_ID/channels/CHANNEL_ID",
                      "required": true,
                      "location": "path"
                    }
                  },
                  "id": "firebasehosting.projects.sites.channels.get",
                  "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/channels/{channelsId}",
                  "path": "v1beta1/{+name}",
                  "response": {
                    "$ref": "Channel"
                  },
                  "description": "Retrieves information for the specified channel of the specified site.",
                  "parameterOrder": [
                    "name"
                  ]
                },
                "list": {
                  "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/channels",
                  "id": "firebasehosting.projects.sites.channels.list",
                  "parameters": {
                    "pageSize": {
                      "format": "int32",
                      "description": "The maximum number of channels to return. The service may return a lower number if fewer channels exist than this maximum number. If unspecified, defaults to 10. The maximum value is 100; values above 100 will be coerced to 100.",
                      "location": "query",
                      "type": "integer"
                    },
                    "pageToken": {
                      "type": "string",
                      "location": "query",
                      "description": "A token from a previous call to `ListChannels` that tells the server where to resume listing."
                    },
                    "parent": {
                      "type": "string",
                      "pattern": "^projects/[^/]+/sites/[^/]+$",
                      "description": "Required. The site for which to list channels, in the format: sites/SITE_ID",
                      "location": "path",
                      "required": true
                    }
                  },
                  "httpMethod": "GET",
                  "response": {
                    "$ref": "ListChannelsResponse"
                  },
                  "description": "Lists the channels for the specified site. All sites have a default `live` channel.",
                  "path": "v1beta1/{+parent}/channels",
                  "parameterOrder": [
                    "parent"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-platform.read-only",
                    "https://www.googleapis.com/auth/firebase",
                    "https://www.googleapis.com/auth/firebase.readonly"
                  ]
                },
                "patch": {
                  "response": {
                    "$ref": "Channel"
                  },
                  "path": "v1beta1/{+name}",
                  "description": "Updates information for the specified channel of the specified site. Implicitly creates the channel if it doesn't already exist.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/firebase"
                  ],
                  "parameters": {
                    "updateMask": {
                      "format": "google-fieldmask",
                      "type": "string",
                      "description": "A comma-separated list of fields to be updated in this request.",
                      "location": "query"
                    },
                    "name": {
                      "description": "The fully-qualified resource name for the channel, in the format: sites/ SITE_ID/channels/CHANNEL_ID",
                      "required": true,
                      "pattern": "^projects/[^/]+/sites/[^/]+/channels/[^/]+$",
                      "type": "string",
                      "location": "path"
                    }
                  },
                  "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/channels/{channelsId}",
                  "request": {
                    "$ref": "Channel"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "firebasehosting.projects.sites.channels.patch",
                  "httpMethod": "PATCH"
                }
              },
              "resources": {
                "releases": {
                  "methods": {
                    "create": {
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/firebase"
                      ],
                      "path": "v1beta1/{+parent}/releases",
                      "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/channels/{channelsId}/releases",
                      "parameters": {
                        "parent": {
                          "type": "string",
                          "description": "Required. The site or channel to which the release belongs, in either of the following formats: - sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID",
                          "required": true,
                          "location": "path",
                          "pattern": "^projects/[^/]+/sites/[^/]+/channels/[^/]+$"
                        },
                        "versionName": {
                          "description": " The unique identifier for a version, in the format: sites/SITE_ID/versions/ VERSION_ID The SITE_ID in this version identifier must match the SITE_ID in the `parent` parameter. This query parameter must be empty if the `type` field in the request body is `SITE_DISABLE`.",
                          "location": "query",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "response": {
                        "$ref": "Release"
                      },
                      "httpMethod": "POST",
                      "request": {
                        "$ref": "Release"
                      },
                      "id": "firebasehosting.projects.sites.channels.releases.create",
                      "description": "Creates a new release, which makes the content of the specified version actively display on the appropriate URL(s)."
                    },
                    "list": {
                      "id": "firebasehosting.projects.sites.channels.releases.list",
                      "parameterOrder": [
                        "parent"
                      ],
                      "response": {
                        "$ref": "ListReleasesResponse"
                      },
                      "path": "v1beta1/{+parent}/releases",
                      "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/channels/{channelsId}/releases",
                      "parameters": {
                        "pageToken": {
                          "location": "query",
                          "type": "string",
                          "description": "A token from a previous call to `releases.list` or `channels.releases.list` that tells the server where to resume listing."
                        },
                        "parent": {
                          "pattern": "^projects/[^/]+/sites/[^/]+/channels/[^/]+$",
                          "location": "path",
                          "type": "string",
                          "required": true,
                          "description": "Required. The site or channel for which to list releases, in either of the following formats: - sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID "
                        },
                        "pageSize": {
                          "description": "The maximum number of releases to return. The service may return a lower number if fewer releases exist than this maximum number. If unspecified, defaults to 100.",
                          "location": "query",
                          "type": "integer",
                          "format": "int32"
                        }
                      },
                      "httpMethod": "GET",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-platform.read-only",
                        "https://www.googleapis.com/auth/firebase",
                        "https://www.googleapis.com/auth/firebase.readonly"
                      ],
                      "description": "Lists the releases that have been created for the specified site or channel. When used to list releases for a site, this list includes releases for both the default `live` channel and any active preview channels for the specified site."
                    }
                  }
                }
              }
            },
            "releases": {
              "methods": {
                "list": {
                  "parameters": {
                    "pageToken": {
                      "description": "A token from a previous call to `releases.list` or `channels.releases.list` that tells the server where to resume listing.",
                      "location": "query",
                      "type": "string"
                    },
                    "pageSize": {
                      "location": "query",
                      "type": "integer",
                      "description": "The maximum number of releases to return. The service may return a lower number if fewer releases exist than this maximum number. If unspecified, defaults to 100.",
                      "format": "int32"
                    },
                    "parent": {
                      "description": "Required. The site or channel for which to list releases, in either of the following formats: - sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID ",
                      "location": "path",
                      "type": "string",
                      "pattern": "^projects/[^/]+/sites/[^/]+$",
                      "required": true
                    }
                  },
                  "path": "v1beta1/{+parent}/releases",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-platform.read-only",
                    "https://www.googleapis.com/auth/firebase",
                    "https://www.googleapis.com/auth/firebase.readonly"
                  ],
                  "parameterOrder": [
                    "parent"
                  ],
                  "httpMethod": "GET",
                  "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/releases",
                  "description": "Lists the releases that have been created for the specified site or channel. When used to list releases for a site, this list includes releases for both the default `live` channel and any active preview channels for the specified site.",
                  "response": {
                    "$ref": "ListReleasesResponse"
                  },
                  "id": "firebasehosting.projects.sites.releases.list"
                },
                "create": {
                  "description": "Creates a new release, which makes the content of the specified version actively display on the appropriate URL(s).",
                  "parameterOrder": [
                    "parent"
                  ],
                  "id": "firebasehosting.projects.sites.releases.create",
                  "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/releases",
                  "response": {
                    "$ref": "Release"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/firebase"
                  ],
                  "path": "v1beta1/{+parent}/releases",
                  "httpMethod": "POST",
                  "request": {
                    "$ref": "Release"
                  },
                  "parameters": {
                    "parent": {
                      "pattern": "^projects/[^/]+/sites/[^/]+$",
                      "description": "Required. The site or channel to which the release belongs, in either of the following formats: - sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID",
                      "required": true,
                      "type": "string",
                      "location": "path"
                    },
                    "versionName": {
                      "description": " The unique identifier for a version, in the format: sites/SITE_ID/versions/ VERSION_ID The SITE_ID in this version identifier must match the SITE_ID in the `parent` parameter. This query parameter must be empty if the `type` field in the request body is `SITE_DISABLE`.",
                      "location": "query",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "methods": {
            "updateConfig": {
              "request": {
                "$ref": "SiteConfig"
              },
              "response": {
                "$ref": "SiteConfig"
              },
              "id": "firebasehosting.projects.sites.updateConfig",
              "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/config",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/firebase"
              ],
              "description": "Sets the Hosting metadata for a specific site.",
              "parameters": {
                "updateMask": {
                  "format": "google-fieldmask",
                  "description": "A set of field names from your [site configuration](../sites.SiteConfig) that you want to update. A field will be overwritten if, and only if, it's in the mask. If a mask is not provided then a default mask of only [`max_versions`](../sites.SiteConfig.max_versions) will be used.",
                  "location": "query",
                  "type": "string"
                },
                "name": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "Required. The site for which to update the SiteConfig, in the format: sites/ site-name/config",
                  "pattern": "^projects/[^/]+/sites/[^/]+/config$"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "path": "v1beta1/{+name}",
              "httpMethod": "PATCH"
            },
            "patch": {
              "id": "firebasehosting.projects.sites.patch",
              "path": "v1beta1/{+name}",
              "parameters": {
                "name": {
                  "required": true,
                  "pattern": "^projects/[^/]+/sites/[^/]+$",
                  "description": "Output only. The fully-qualified resource name of the Hosting site, in the format: projects/PROJECT_IDENTIFIER/sites/SITE_ID PROJECT_IDENTIFIER: the Firebase project's [`ProjectNumber`](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its [`ProjectId`](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects#FirebaseProject.FIELDS.project_id). Learn more about using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510).",
                  "type": "string",
                  "location": "path"
                },
                "updateMask": {
                  "location": "query",
                  "description": "A set of field names from your Site that you want to update.",
                  "format": "google-fieldmask",
                  "type": "string"
                }
              },
              "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}",
              "response": {
                "$ref": "Site"
              },
              "httpMethod": "PATCH",
              "request": {
                "$ref": "Site"
              },
              "description": "Updates attributes of the specified Hosting Site.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/firebase"
              ],
              "parameterOrder": [
                "name"
              ]
            },
            "create": {
              "flatPath": "v1beta1/projects/{projectsId}/sites",
              "response": {
                "$ref": "Site"
              },
              "parameterOrder": [
                "parent"
              ],
              "path": "v1beta1/{+parent}/sites",
              "parameters": {
                "siteId": {
                  "location": "query",
                  "description": "Required. Immutable. A globally unique identifier for the Hosting site. This identifier is used to construct the Firebase-provisioned subdomains for the site, so it must also be a valid domain name label.",
                  "type": "string"
                },
                "parent": {
                  "type": "string",
                  "pattern": "^projects/[^/]+$",
                  "location": "path",
                  "description": "Required. The Firebase project in which to create a Hosting site, in the format: projects/PROJECT_IDENTIFIER Refer to the `Site` [`name`](../projects#Site.FIELDS.name) field for details about PROJECT_IDENTIFIER values.",
                  "required": true
                }
              },
              "description": "Creates a new Hosting Site in the specified parent Firebase project. Note that Hosting sites can take several minutes to propagate through Firebase systems.",
              "httpMethod": "POST",
              "id": "firebasehosting.projects.sites.create",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/firebase"
              ],
              "request": {
                "$ref": "Site"
              }
            },
            "get": {
              "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}",
              "response": {
                "$ref": "Site"
              },
              "parameterOrder": [
                "name"
              ],
              "path": "v1beta1/{+name}",
              "description": "Gets the specified Hosting Site.",
              "parameters": {
                "name": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "pattern": "^projects/[^/]+/sites/[^/]+$",
                  "description": "Required. The fully-qualified resource name for the Hosting site, in the format: projects/PROJECT_IDENTIFIER/sites/SITE_ID Refer to the `Site` [`name`](../projects#Site.FIELDS.name) field for details about PROJECT_IDENTIFIER values. Since a SITE_ID is a globally unique identifier, you can also use the unique sub-collection resource access pattern, in the format: projects/-/sites/SITE_ID"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/cloud-platform.read-only",
                "https://www.googleapis.com/auth/firebase",
                "https://www.googleapis.com/auth/firebase.readonly"
              ],
              "id": "firebasehosting.projects.sites.get",
              "httpMethod": "GET"
            },
            "delete": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/firebase"
              ],
              "parameters": {
                "name": {
                  "description": "Required. The fully-qualified resource name for the Hosting site, in the format: projects/PROJECT_IDENTIFIER/sites/SITE_ID Refer to the `Site` [`name`](../projects#Site.FIELDS.name) field for details about PROJECT_IDENTIFIER values.",
                  "required": true,
                  "type": "string",
                  "pattern": "^projects/[^/]+/sites/[^/]+$",
                  "location": "path"
                }
              },
              "id": "firebasehosting.projects.sites.delete",
              "parameterOrder": [
                "name"
              ],
              "description": "Deletes the specified Hosting Site from the specified parent Firebase project.",
              "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}",
              "httpMethod": "DELETE",
              "path": "v1beta1/{+name}",
              "response": {
                "$ref": "Empty"
              }
            },
            "list": {
              "httpMethod": "GET",
              "parameterOrder": [
                "parent"
              ],
              "id": "firebasehosting.projects.sites.list",
              "description": "Lists each Hosting Site associated with the specified parent Firebase project.",
              "path": "v1beta1/{+parent}/sites",
              "response": {
                "$ref": "ListSitesResponse"
              },
              "flatPath": "v1beta1/projects/{projectsId}/sites",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/cloud-platform.read-only",
                "https://www.googleapis.com/auth/firebase",
                "https://www.googleapis.com/auth/firebase.readonly"
              ],
              "parameters": {
                "pageSize": {
                  "format": "int32",
                  "description": "Optional. The maximum number of sites to return. The service may return a lower number if fewer sites exist than this maximum number. If unspecified, defaults to 40.",
                  "location": "query",
                  "type": "integer"
                },
                "parent": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "Required. The Firebase project for which to list sites, in the format: projects/PROJECT_IDENTIFIER Refer to the `Site` [`name`](../projects#Site.FIELDS.name) field for details about PROJECT_IDENTIFIER values.",
                  "pattern": "^projects/[^/]+$"
                },
                "pageToken": {
                  "type": "string",
                  "location": "query",
                  "description": "Optional. A token from a previous call to `ListSites` that tells the server where to resume listing."
                }
              }
            },
            "getConfig": {
              "description": "Gets the Hosting metadata for a specific site.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/cloud-platform.read-only",
                "https://www.googleapis.com/auth/firebase",
                "https://www.googleapis.com/auth/firebase.readonly"
              ],
              "path": "v1beta1/{+name}",
              "parameters": {
                "name": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "Required. The site for which to get the SiteConfig, in the format: sites/ site-name/config",
                  "pattern": "^projects/[^/]+/sites/[^/]+/config$"
                }
              },
              "httpMethod": "GET",
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "SiteConfig"
              },
              "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/config",
              "id": "firebasehosting.projects.sites.getConfig"
            }
          }
        }
      }
    }
  },
  "revision": "20210411",
  "kind": "discovery#restDescription"
}
