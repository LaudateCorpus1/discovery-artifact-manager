{
  "mtlsRootUrl": "https://youtube.mtls.googleapis.com/",
  "documentationLink": "https://developers.google.com/youtube/",
  "ownerName": "Google",
  "protocol": "rest",
  "ownerDomain": "google.com",
  "fullyEncodeReservedExpansion": true,
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/youtube.upload": {
          "description": "Manage your YouTube videos"
        },
        "https://www.googleapis.com/auth/youtube.readonly": {
          "description": "View your YouTube account"
        },
        "https://www.googleapis.com/auth/youtubepartner": {
          "description": "View and manage your assets and associated content on YouTube"
        },
        "https://www.googleapis.com/auth/youtube.force-ssl": {
          "description": "See, edit, and permanently delete your YouTube videos, ratings, comments and captions"
        },
        "https://www.googleapis.com/auth/youtubepartner-channel-audit": {
          "description": "View private information of your YouTube channel relevant during the audit process with a YouTube partner"
        },
        "https://www.googleapis.com/auth/youtube": {
          "description": "Manage your YouTube account"
        },
        "https://www.googleapis.com/auth/youtube.channel-memberships.creator": {
          "description": "See a list of your current active channel members, their current level, and when they became a member"
        }
      }
    }
  },
  "id": "youtube:v3",
  "rootUrl": "https://youtube.googleapis.com/",
  "discoveryVersion": "v1",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "description": "The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.",
  "servicePath": "",
  "title": "YouTube Data API v3",
  "kind": "discovery#restDescription",
  "name": "youtube",
  "resources": {
    "channelSections": {
      "methods": {
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtube.readonly",
            "https://www.googleapis.com/auth/youtubepartner"
          ],
          "parameterOrder": [
            "part"
          ],
          "response": {
            "$ref": "ChannelSectionListResponse"
          },
          "httpMethod": "GET",
          "path": "youtube/v3/channelSections",
          "description": "Retrieves a list of resources, possibly filtered.",
          "parameters": {
            "mine": {
              "description": "Return the ChannelSections owned by the authenticated user.",
              "location": "query",
              "type": "boolean"
            },
            "channelId": {
              "type": "string",
              "description": "Return the ChannelSections owned by the specified channel ID.",
              "location": "query"
            },
            "part": {
              "type": "string",
              "location": "query",
              "repeated": true,
              "required": true,
              "description": "The *part* parameter specifies a comma-separated list of one or more channelSection resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, and contentDetails. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a channelSection resource, the snippet property contains other properties, such as a display title for the channelSection. If you set *part=snippet*, the API response will also contain all of those nested properties."
            },
            "onBehalfOfContentOwner": {
              "location": "query",
              "description": "*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.",
              "type": "string"
            },
            "id": {
              "location": "query",
              "repeated": true,
              "type": "string",
              "description": "Return the ChannelSections with the given IDs for Stubby or Apiary."
            },
            "hl": {
              "location": "query",
              "type": "string",
              "description": "Return content in specified language"
            }
          },
          "flatPath": "youtube/v3/channelSections",
          "id": "youtube.channelSections.list"
        },
        "update": {
          "httpMethod": "PUT",
          "parameters": {
            "onBehalfOfContentOwner": {
              "location": "query",
              "type": "string",
              "description": "*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."
            },
            "part": {
              "type": "string",
              "required": true,
              "location": "query",
              "repeated": true,
              "description": "The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. The part names that you can include in the parameter value are snippet and contentDetails."
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtubepartner"
          ],
          "parameterOrder": [
            "part"
          ],
          "path": "youtube/v3/channelSections",
          "response": {
            "$ref": "ChannelSection"
          },
          "flatPath": "youtube/v3/channelSections",
          "description": "Updates an existing resource.",
          "id": "youtube.channelSections.update",
          "request": {
            "$ref": "ChannelSection"
          }
        },
        "delete": {
          "description": "Deletes a resource.",
          "id": "youtube.channelSections.delete",
          "parameters": {
            "onBehalfOfContentOwner": {
              "type": "string",
              "location": "query",
              "description": "*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."
            },
            "id": {
              "required": true,
              "location": "query",
              "type": "string"
            }
          },
          "flatPath": "youtube/v3/channelSections",
          "path": "youtube/v3/channelSections",
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtubepartner"
          ],
          "parameterOrder": [
            "id"
          ],
          "httpMethod": "DELETE"
        },
        "insert": {
          "parameters": {
            "onBehalfOfContentOwnerChannel": {
              "description": "This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.",
              "location": "query",
              "type": "string"
            },
            "onBehalfOfContentOwner": {
              "location": "query",
              "description": "*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.",
              "type": "string"
            },
            "part": {
              "description": "The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. The part names that you can include in the parameter value are snippet and contentDetails.",
              "location": "query",
              "required": true,
              "type": "string",
              "repeated": true
            }
          },
          "parameterOrder": [
            "part"
          ],
          "request": {
            "$ref": "ChannelSection"
          },
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtubepartner"
          ],
          "path": "youtube/v3/channelSections",
          "description": "Inserts a new resource into this collection.",
          "flatPath": "youtube/v3/channelSections",
          "id": "youtube.channelSections.insert",
          "response": {
            "$ref": "ChannelSection"
          },
          "httpMethod": "POST"
        }
      }
    },
    "playlists": {
      "methods": {
        "update": {
          "response": {
            "$ref": "Playlist"
          },
          "path": "youtube/v3/playlists",
          "request": {
            "$ref": "Playlist"
          },
          "description": "Updates an existing resource.",
          "httpMethod": "PUT",
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtubepartner"
          ],
          "id": "youtube.playlists.update",
          "parameters": {
            "part": {
              "description": "The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. Note that this method will override the existing values for mutable properties that are contained in any parts that the request body specifies. For example, a playlist's description is contained in the snippet part, which must be included in the request body. If the request does not specify a value for the snippet.description property, the playlist's existing description will be deleted.",
              "required": true,
              "repeated": true,
              "location": "query",
              "type": "string"
            },
            "onBehalfOfContentOwner": {
              "type": "string",
              "location": "query",
              "description": "*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."
            }
          },
          "parameterOrder": [
            "part"
          ],
          "flatPath": "youtube/v3/playlists"
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtube.readonly",
            "https://www.googleapis.com/auth/youtubepartner"
          ],
          "parameters": {
            "mine": {
              "type": "boolean",
              "location": "query",
              "description": "Return the playlists owned by the authenticated user."
            },
            "maxResults": {
              "maximum": "50",
              "minimum": "0",
              "location": "query",
              "description": "The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.",
              "type": "integer",
              "default": "5",
              "format": "uint32"
            },
            "pageToken": {
              "description": "The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.",
              "type": "string",
              "location": "query"
            },
            "onBehalfOfContentOwner": {
              "location": "query",
              "description": "*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.",
              "type": "string"
            },
            "onBehalfOfContentOwnerChannel": {
              "location": "query",
              "type": "string",
              "description": "This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel."
            },
            "id": {
              "location": "query",
              "description": "Return the playlists with the given IDs for Stubby or Apiary.",
              "repeated": true,
              "type": "string"
            },
            "part": {
              "required": true,
              "location": "query",
              "repeated": true,
              "description": "The *part* parameter specifies a comma-separated list of one or more playlist resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a playlist resource, the snippet property contains properties like author, title, description, tags, and timeCreated. As such, if you set *part=snippet*, the API response will contain all of those properties.",
              "type": "string"
            },
            "hl": {
              "description": "Returen content in specified language",
              "type": "string",
              "location": "query"
            },
            "channelId": {
              "description": "Return the playlists owned by the specified channel ID.",
              "type": "string",
              "location": "query"
            }
          },
          "path": "youtube/v3/playlists",
          "parameterOrder": [
            "part"
          ],
          "description": "Retrieves a list of resources, possibly filtered.",
          "id": "youtube.playlists.list",
          "flatPath": "youtube/v3/playlists",
          "response": {
            "$ref": "PlaylistListResponse"
          },
          "httpMethod": "GET"
        },
        "delete": {
          "description": "Deletes a resource.",
          "flatPath": "youtube/v3/playlists",
          "parameterOrder": [
            "id"
          ],
          "parameters": {
            "onBehalfOfContentOwner": {
              "description": "*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.",
              "location": "query",
              "type": "string"
            },
            "id": {
              "required": true,
              "type": "string",
              "location": "query"
            }
          },
          "path": "youtube/v3/playlists",
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtubepartner"
          ],
          "httpMethod": "DELETE",
          "id": "youtube.playlists.delete"
        },
        "insert": {
          "description": "Inserts a new resource into this collection.",
          "path": "youtube/v3/playlists",
          "request": {
            "$ref": "Playlist"
          },
          "flatPath": "youtube/v3/playlists",
          "id": "youtube.playlists.insert",
          "parameterOrder": [
            "part"
          ],
          "response": {
            "$ref": "Playlist"
          },
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtubepartner"
          ],
          "httpMethod": "POST",
          "parameters": {
            "onBehalfOfContentOwnerChannel": {
              "description": "This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.",
              "type": "string",
              "location": "query"
            },
            "onBehalfOfContentOwner": {
              "type": "string",
              "description": "*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.",
              "location": "query"
            },
            "part": {
              "required": true,
              "description": "The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.",
              "repeated": true,
              "location": "query",
              "type": "string"
            }
          }
        }
      }
    },
    "channelBanners": {
      "methods": {
        "insert": {
          "parameterOrder": [],
          "path": "youtube/v3/channelBanners/insert",
          "mediaUpload": {
            "maxSize": "6291456",
            "protocols": {
              "simple": {
                "multipart": true,
                "path": "/upload/youtube/v3/channelBanners/insert"
              },
              "resumable": {
                "path": "/resumable/upload/youtube/v3/channelBanners/insert",
                "multipart": true
              }
            },
            "accept": [
              "image/jpeg",
              "image/png",
              "application/octet-stream"
            ]
          },
          "request": {
            "$ref": "ChannelBannerResource"
          },
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtube.upload"
          ],
          "id": "youtube.channelBanners.insert",
          "httpMethod": "POST",
          "response": {
            "$ref": "ChannelBannerResource"
          },
          "description": "Inserts a new resource into this collection.",
          "parameters": {
            "channelId": {
              "type": "string",
              "description": "Unused, channel_id is currently derived from the security context of the requestor.",
              "location": "query"
            },
            "onBehalfOfContentOwnerChannel": {
              "type": "string",
              "location": "query",
              "description": "This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel."
            },
            "onBehalfOfContentOwner": {
              "type": "string",
              "description": "*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.",
              "location": "query"
            }
          },
          "flatPath": "youtube/v3/channelBanners/insert",
          "supportsMediaUpload": true
        }
      }
    },
    "activities": {
      "methods": {
        "list": {
          "parameterOrder": [
            "part"
          ],
          "flatPath": "youtube/v3/activities",
          "description": "Retrieves a list of resources, possibly filtered.",
          "parameters": {
            "publishedAfter": {
              "type": "string",
              "location": "query",
              "format": "google-datetime"
            },
            "publishedBefore": {
              "format": "google-datetime",
              "location": "query",
              "type": "string"
            },
            "mine": {
              "type": "boolean",
              "location": "query"
            },
            "part": {
              "repeated": true,
              "type": "string",
              "location": "query",
              "description": "The *part* parameter specifies a comma-separated list of one or more activity resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in an activity resource, the snippet property contains other properties that identify the type of activity, a display title for the activity, and so forth. If you set *part=snippet*, the API response will also contain all of those nested properties.",
              "required": true
            },
            "regionCode": {
              "type": "string",
              "location": "query"
            },
            "pageToken": {
              "description": "The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.",
              "type": "string",
              "location": "query"
            },
            "maxResults": {
              "format": "uint32",
              "default": "5",
              "location": "query",
              "description": "The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.",
              "type": "integer",
              "maximum": "50",
              "minimum": "0"
            },
            "home": {
              "location": "query",
              "type": "boolean"
            },
            "channelId": {
              "type": "string",
              "location": "query"
            }
          },
          "httpMethod": "GET",
          "id": "youtube.activities.list",
          "response": {
            "$ref": "ActivityListResponse"
          },
          "path": "youtube/v3/activities",
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtube.readonly"
          ]
        }
      }
    },
    "members": {
      "methods": {
        "list": {
          "parameterOrder": [
            "part"
          ],
          "path": "youtube/v3/members",
          "id": "youtube.members.list",
          "flatPath": "youtube/v3/members",
          "description": "Retrieves a list of members that match the request criteria for a channel.",
          "response": {
            "$ref": "MemberListResponse"
          },
          "parameters": {
            "part": {
              "location": "query",
              "required": true,
              "description": "The *part* parameter specifies the member resource parts that the API response will include. Set the parameter value to snippet.",
              "repeated": true,
              "type": "string"
            },
            "filterByMemberChannelId": {
              "location": "query",
              "description": "Comma separated list of channel IDs. Only data about members that are part of this list will be included in the response.",
              "type": "string"
            },
            "hasAccessToLevel": {
              "description": "Filter members in the results set to the ones that have access to a level.",
              "type": "string",
              "location": "query"
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved."
            },
            "maxResults": {
              "location": "query",
              "maximum": "1000",
              "description": "The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.",
              "type": "integer",
              "format": "uint32",
              "default": "5",
              "minimum": "0"
            },
            "mode": {
              "enum": [
                "listMembersModeUnknown",
                "updates",
                "all_current"
              ],
              "description": "Parameter that specifies which channel members to return.",
              "type": "string",
              "location": "query",
              "enumDescriptions": [
                "",
                "Return only members that joined after the first call with this mode was made.",
                "Return all current members, from newest to oldest."
              ],
              "default": "all_current"
            }
          },
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/youtube.channel-memberships.creator"
          ]
        }
      }
    },
    "liveBroadcasts": {
      "methods": {
        "bind": {
          "flatPath": "youtube/v3/liveBroadcasts/bind",
          "parameters": {
            "id": {
              "type": "string",
              "location": "query",
              "required": true,
              "description": "Broadcast to bind to the stream"
            },
            "streamId": {
              "location": "query",
              "type": "string",
              "description": "Stream to bind, if not set unbind the current one."
            },
            "onBehalfOfContentOwner": {
              "type": "string",
              "location": "query",
              "description": "*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."
            },
            "onBehalfOfContentOwnerChannel": {
              "location": "query",
              "description": "This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.",
              "type": "string"
            },
            "part": {
              "description": "The *part* parameter specifies a comma-separated list of one or more liveBroadcast resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, contentDetails, and status.",
              "location": "query",
              "repeated": true,
              "required": true,
              "type": "string"
            }
          },
          "description": "Bind a broadcast to a stream.",
          "httpMethod": "POST",
          "id": "youtube.liveBroadcasts.bind",
          "response": {
            "$ref": "LiveBroadcast"
          },
          "path": "youtube/v3/liveBroadcasts/bind",
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl"
          ],
          "parameterOrder": [
            "id",
            "part"
          ]
        },
        "delete": {
          "parameterOrder": [
            "id"
          ],
          "httpMethod": "DELETE",
          "id": "youtube.liveBroadcasts.delete",
          "parameters": {
            "id": {
              "type": "string",
              "location": "query",
              "description": "Broadcast to delete.",
              "required": true
            },
            "onBehalfOfContentOwnerChannel": {
              "description": "This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.",
              "type": "string",
              "location": "query"
            },
            "onBehalfOfContentOwner": {
              "location": "query",
              "description": "*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.",
              "type": "string"
            }
          },
          "path": "youtube/v3/liveBroadcasts",
          "flatPath": "youtube/v3/liveBroadcasts",
          "description": "Delete a given broadcast.",
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl"
          ]
        },
        "update": {
          "id": "youtube.liveBroadcasts.update",
          "httpMethod": "PUT",
          "parameters": {
            "onBehalfOfContentOwner": {
              "description": "*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.",
              "type": "string",
              "location": "query"
            },
            "onBehalfOfContentOwnerChannel": {
              "location": "query",
              "description": "This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.",
              "type": "string"
            },
            "part": {
              "repeated": true,
              "description": "The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. The part properties that you can include in the parameter value are id, snippet, contentDetails, and status. Note that this method will override the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies. For example, a broadcast's privacy status is defined in the status part. As such, if your request is updating a private or unlisted broadcast, and the request's part parameter value includes the status part, the broadcast's privacy setting will be updated to whatever value the request body specifies. If the request body does not specify a value, the existing privacy setting will be removed and the broadcast will revert to the default privacy setting.",
              "type": "string",
              "required": true,
              "location": "query"
            }
          },
          "request": {
            "$ref": "LiveBroadcast"
          },
          "flatPath": "youtube/v3/liveBroadcasts",
          "parameterOrder": [
            "part"
          ],
          "description": "Updates an existing broadcast for the authenticated user.",
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl"
          ],
          "response": {
            "$ref": "LiveBroadcast"
          },
          "path": "youtube/v3/liveBroadcasts"
        },
        "list": {
          "parameterOrder": [
            "part"
          ],
          "id": "youtube.liveBroadcasts.list",
          "response": {
            "$ref": "LiveBroadcastListResponse"
          },
          "parameters": {
            "id": {
              "description": "Return broadcasts with the given ids from Stubby or Apiary.",
              "repeated": true,
              "type": "string",
              "location": "query"
            },
            "part": {
              "description": "The *part* parameter specifies a comma-separated list of one or more liveBroadcast resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, contentDetails, status and statistics.",
              "required": true,
              "type": "string",
              "location": "query",
              "repeated": true
            },
            "mine": {
              "type": "boolean",
              "location": "query"
            },
            "broadcastStatus": {
              "description": "Return broadcasts with a certain status, e.g. active broadcasts.",
              "enum": [
                "broadcastStatusFilterUnspecified",
                "all",
                "active",
                "upcoming",
                "completed"
              ],
              "location": "query",
              "enumDescriptions": [
                "",
                "Return all broadcasts.",
                "Return current live broadcasts.",
                "Return broadcasts that have not yet started.",
                "Return broadcasts that have already ended."
              ],
              "type": "string"
            },
            "onBehalfOfContentOwner": {
              "description": "*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.",
              "location": "query",
              "type": "string"
            },
            "onBehalfOfContentOwnerChannel": {
              "type": "string",
              "location": "query",
              "description": "This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel."
            },
            "maxResults": {
              "description": "The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.",
              "maximum": "50",
              "format": "uint32",
              "minimum": "0",
              "default": "5",
              "location": "query",
              "type": "integer"
            },
            "broadcastType": {
              "location": "query",
              "description": "Return only broadcasts with the selected type.",
              "type": "string",
              "default": "event",
              "enum": [
                "broadcastTypeFilterUnspecified",
                "all",
                "event",
                "persistent"
              ],
              "enumDescriptions": [
                "",
                "Return all broadcasts.",
                "Return only scheduled event broadcasts.",
                "Return only persistent broadcasts."
              ]
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved."
            }
          },
          "description": "Retrieve the list of broadcasts associated with the given channel.",
          "path": "youtube/v3/liveBroadcasts",
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtube.readonly"
          ],
          "httpMethod": "GET",
          "flatPath": "youtube/v3/liveBroadcasts"
        },
        "insert": {
          "httpMethod": "POST",
          "flatPath": "youtube/v3/liveBroadcasts",
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl"
          ],
          "description": "Inserts a new stream for the authenticated user.",
          "path": "youtube/v3/liveBroadcasts",
          "response": {
            "$ref": "LiveBroadcast"
          },
          "request": {
            "$ref": "LiveBroadcast"
          },
          "parameters": {
            "onBehalfOfContentOwner": {
              "location": "query",
              "type": "string",
              "description": "*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."
            },
            "part": {
              "required": true,
              "description": "The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. The part properties that you can include in the parameter value are id, snippet, contentDetails, and status.",
              "type": "string",
              "location": "query",
              "repeated": true
            },
            "onBehalfOfContentOwnerChannel": {
              "description": "This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.",
              "location": "query",
              "type": "string"
            }
          },
          "id": "youtube.liveBroadcasts.insert",
          "parameterOrder": [
            "part"
          ]
        },
        "transition": {
          "httpMethod": "POST",
          "path": "youtube/v3/liveBroadcasts/transition",
          "flatPath": "youtube/v3/liveBroadcasts/transition",
          "id": "youtube.liveBroadcasts.transition",
          "parameters": {
            "broadcastStatus": {
              "location": "query",
              "type": "string",
              "enumDescriptions": [
                "",
                "Start testing the broadcast. YouTube transmits video to the broadcast's monitor stream. Note that you can only transition a broadcast to the testing state if its contentDetails.monitorStream.enableMonitorStream property is set to true.\",",
                "Return only persistent broadcasts.",
                "The broadcast is over. YouTube stops transmitting video."
              ],
              "description": "The status to which the broadcast is going to transition.",
              "enum": [
                "statusUnspecified",
                "testing",
                "live",
                "complete"
              ],
              "required": true
            },
            "id": {
              "required": true,
              "description": "Broadcast to transition.",
              "location": "query",
              "type": "string"
            },
            "part": {
              "repeated": true,
              "type": "string",
              "required": true,
              "description": "The *part* parameter specifies a comma-separated list of one or more liveBroadcast resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, contentDetails, and status.",
              "location": "query"
            },
            "onBehalfOfContentOwner": {
              "type": "string",
              "location": "query",
              "description": "*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."
            },
            "onBehalfOfContentOwnerChannel": {
              "description": "This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.",
              "type": "string",
              "location": "query"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl"
          ],
          "response": {
            "$ref": "LiveBroadcast"
          },
          "parameterOrder": [
            "broadcastStatus",
            "id",
            "part"
          ],
          "description": "Transition a broadcast to a given status."
        }
      }
    },
    "liveChatMessages": {
      "methods": {
        "insert": {
          "parameterOrder": [
            "part"
          ],
          "flatPath": "youtube/v3/liveChat/messages",
          "request": {
            "$ref": "LiveChatMessage"
          },
          "description": "Inserts a new resource into this collection.",
          "httpMethod": "POST",
          "parameters": {
            "part": {
              "description": "The *part* parameter serves two purposes. It identifies the properties that the write operation will set as well as the properties that the API response will include. Set the parameter value to snippet.",
              "repeated": true,
              "location": "query",
              "type": "string",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl"
          ],
          "id": "youtube.liveChatMessages.insert",
          "path": "youtube/v3/liveChat/messages",
          "response": {
            "$ref": "LiveChatMessage"
          }
        },
        "list": {
          "description": "Retrieves a list of resources, possibly filtered.",
          "response": {
            "$ref": "LiveChatMessageListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtube.readonly"
          ],
          "parameters": {
            "liveChatId": {
              "required": true,
              "type": "string",
              "description": "The id of the live chat for which comments should be returned.",
              "location": "query"
            },
            "part": {
              "description": "The *part* parameter specifies the liveChatComment resource parts that the API response will include. Supported values are id and snippet.",
              "required": true,
              "type": "string",
              "repeated": true,
              "location": "query"
            },
            "pageToken": {
              "location": "query",
              "description": "The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken property identify other pages that could be retrieved.",
              "type": "string"
            },
            "profileImageSize": {
              "location": "query",
              "format": "uint32",
              "type": "integer",
              "description": "Specifies the size of the profile image that should be returned for each user.",
              "minimum": "16",
              "maximum": "720"
            },
            "hl": {
              "type": "string",
              "location": "query",
              "description": "Specifies the localization language in which the system messages should be returned."
            },
            "maxResults": {
              "description": "The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.",
              "type": "integer",
              "format": "uint32",
              "location": "query",
              "default": "500",
              "minimum": "200",
              "maximum": "2000"
            }
          },
          "path": "youtube/v3/liveChat/messages",
          "id": "youtube.liveChatMessages.list",
          "parameterOrder": [
            "liveChatId",
            "part"
          ],
          "httpMethod": "GET",
          "flatPath": "youtube/v3/liveChat/messages"
        },
        "delete": {
          "flatPath": "youtube/v3/liveChat/messages",
          "description": "Deletes a chat message.",
          "parameterOrder": [
            "id"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl"
          ],
          "httpMethod": "DELETE",
          "parameters": {
            "id": {
              "required": true,
              "type": "string",
              "location": "query"
            }
          },
          "path": "youtube/v3/liveChat/messages",
          "id": "youtube.liveChatMessages.delete"
        }
      }
    },
    "captions": {
      "methods": {
        "update": {
          "supportsMediaUpload": true,
          "httpMethod": "PUT",
          "path": "youtube/v3/captions",
          "flatPath": "youtube/v3/captions",
          "scopes": [
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtubepartner"
          ],
          "parameters": {
            "sync": {
              "location": "query",
              "type": "boolean",
              "description": "Extra parameter to allow automatically syncing the uploaded caption/transcript with the audio."
            },
            "part": {
              "type": "string",
              "location": "query",
              "required": true,
              "description": "The *part* parameter specifies a comma-separated list of one or more caption resource parts that the API response will include. The part names that you can include in the parameter value are id and snippet.",
              "repeated": true
            },
            "onBehalfOf": {
              "type": "string",
              "location": "query",
              "description": "ID of the Google+ Page for the channel that the request is on behalf of."
            },
            "onBehalfOfContentOwner": {
              "description": "*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.",
              "type": "string",
              "location": "query"
            }
          },
          "mediaUpload": {
            "protocols": {
              "resumable": {
                "path": "/resumable/upload/youtube/v3/captions",
                "multipart": true
              },
              "simple": {
                "multipart": true,
                "path": "/upload/youtube/v3/captions"
              }
            },
            "maxSize": "104857600",
            "accept": [
              "text/xml",
              "application/octet-stream",
              "*/*"
            ]
          },
          "description": "Updates an existing resource.",
          "response": {
            "$ref": "Caption"
          },
          "parameterOrder": [
            "part"
          ],
          "request": {
            "$ref": "Caption"
          },
          "id": "youtube.captions.update"
        },
        "download": {
          "scopes": [
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtubepartner"
          ],
          "useMediaDownloadService": true,
          "id": "youtube.captions.download",
          "flatPath": "youtube/v3/captions/{id}",
          "supportsMediaDownload": true,
          "httpMethod": "GET",
          "parameters": {
            "tlang": {
              "location": "query",
              "description": "tlang is the language code; machine translate the captions into this language.",
              "type": "string"
            },
            "tfmt": {
              "description": "Convert the captions into this format. Supported options are sbv, srt, and vtt.",
              "type": "string",
              "location": "query"
            },
            "onBehalfOf": {
              "type": "string",
              "description": "ID of the Google+ Page for the channel that the request is be on behalf of",
              "location": "query"
            },
            "id": {
              "required": true,
              "location": "path",
              "description": "The ID of the caption track to download, required for One Platform.",
              "type": "string"
            },
            "onBehalfOfContentOwner": {
              "description": "*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.",
              "type": "string",
              "location": "query"
            }
          },
          "parameterOrder": [
            "id"
          ],
          "description": "Downloads a caption track.",
          "path": "youtube/v3/captions/{id}"
        },
        "insert": {
          "httpMethod": "POST",
          "parameters": {
            "onBehalfOf": {
              "location": "query",
              "description": "ID of the Google+ Page for the channel that the request is be on behalf of",
              "type": "string"
            },
            "onBehalfOfContentOwner": {
              "location": "query",
              "description": "*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.",
              "type": "string"
            },
            "sync": {
              "location": "query",
              "description": "Extra parameter to allow automatically syncing the uploaded caption/transcript with the audio.",
              "type": "boolean"
            },
            "part": {
              "type": "string",
              "location": "query",
              "repeated": true,
              "required": true,
              "description": "The *part* parameter specifies the caption resource parts that the API response will include. Set the parameter value to snippet."
            }
          },
          "supportsMediaUpload": true,
          "id": "youtube.captions.insert",
          "response": {
            "$ref": "Caption"
          },
          "request": {
            "$ref": "Caption"
          },
          "mediaUpload": {
            "accept": [
              "text/xml",
              "application/octet-stream",
              "*/*"
            ],
            "maxSize": "104857600",
            "protocols": {
              "simple": {
                "path": "/upload/youtube/v3/captions",
                "multipart": true
              },
              "resumable": {
                "multipart": true,
                "path": "/resumable/upload/youtube/v3/captions"
              }
            }
          },
          "flatPath": "youtube/v3/captions",
          "parameterOrder": [
            "part"
          ],
          "path": "youtube/v3/captions",
          "scopes": [
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtubepartner"
          ],
          "description": "Inserts a new resource into this collection."
        },
        "list": {
          "id": "youtube.captions.list",
          "description": "Retrieves a list of resources, possibly filtered.",
          "response": {
            "$ref": "CaptionListResponse"
          },
          "path": "youtube/v3/captions",
          "parameterOrder": [
            "part",
            "videoId"
          ],
          "parameters": {
            "part": {
              "repeated": true,
              "type": "string",
              "location": "query",
              "description": "The *part* parameter specifies a comma-separated list of one or more caption resource parts that the API response will include. The part names that you can include in the parameter value are id and snippet.",
              "required": true
            },
            "id": {
              "description": "Returns the captions with the given IDs for Stubby or Apiary.",
              "repeated": true,
              "type": "string",
              "location": "query"
            },
            "onBehalfOfContentOwner": {
              "description": "*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.",
              "location": "query",
              "type": "string"
            },
            "videoId": {
              "description": "Returns the captions for the specified video.",
              "location": "query",
              "required": true,
              "type": "string"
            },
            "onBehalfOf": {
              "type": "string",
              "description": "ID of the Google+ Page for the channel that the request is on behalf of.",
              "location": "query"
            }
          },
          "flatPath": "youtube/v3/captions",
          "scopes": [
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtubepartner"
          ],
          "httpMethod": "GET"
        },
        "delete": {
          "flatPath": "youtube/v3/captions",
          "id": "youtube.captions.delete",
          "path": "youtube/v3/captions",
          "parameterOrder": [
            "id"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtubepartner"
          ],
          "description": "Deletes a resource.",
          "httpMethod": "DELETE",
          "parameters": {
            "onBehalfOf": {
              "type": "string",
              "location": "query",
              "description": "ID of the Google+ Page for the channel that the request is be on behalf of"
            },
            "onBehalfOfContentOwner": {
              "location": "query",
              "type": "string",
              "description": "*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner."
            },
            "id": {
              "type": "string",
              "location": "query",
              "required": true
            }
          }
        }
      }
    },
    "commentThreads": {
      "methods": {
        "list": {
          "description": "Retrieves a list of resources, possibly filtered.",
          "path": "youtube/v3/commentThreads",
          "scopes": [
            "https://www.googleapis.com/auth/youtube.force-ssl"
          ],
          "parameterOrder": [
            "part"
          ],
          "response": {
            "$ref": "CommentThreadListResponse"
          },
          "parameters": {
            "order": {
              "type": "string",
              "location": "query",
              "default": "time",
              "enumDescriptions": [
                "",
                "Order by time.",
                "Order by relevance."
              ],
              "enum": [
                "orderUnspecified",
                "time",
                "relevance"
              ]
            },
            "channelId": {
              "type": "string",
              "location": "query",
              "description": "Returns the comment threads for all the channel comments (ie does not include comments left on videos)."
            },
            "videoId": {
              "description": "Returns the comment threads of the specified video.",
              "type": "string",
              "location": "query"
            },
            "searchTerms": {
              "type": "string",
              "location": "query",
              "description": "Limits the returned comment threads to those matching the specified key words. Not compatible with the 'id' filter."
            },
            "allThreadsRelatedToChannelId": {
              "location": "query",
              "description": "Returns the comment threads of all videos of the channel and the channel comments as well.",
              "type": "string"
            },
            "textFormat": {
              "location": "query",
              "type": "string",
              "enum": [
                "textFormatUnspecified",
                "html",
                "plainText"
              ],
              "default": "html",
              "description": "The requested text format for the returned comments.",
              "enumDescriptions": [
                "",
                "Returns the comments in HTML format. This is the default value.",
                "Returns the comments in plain text format."
              ]
            },
            "pageToken": {
              "type": "string",
              "description": "The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.",
              "location": "query"
            },
            "moderationStatus": {
              "description": "Limits the returned comment threads to those with the specified moderation status. Not compatible with the 'id' filter. Valid values: published, heldForReview, likelySpam.",
              "type": "string",
              "enum": [
                "published",
                "heldForReview",
                "likelySpam",
                "rejected"
              ],
              "location": "query",
              "default": "published",
              "enumDescriptions": [
                "The comment is available for public display.",
                "The comment is awaiting review by a moderator.",
                "",
                "The comment is unfit for display."
              ]
            },
            "id": {
              "repeated": true,
              "type": "string",
              "description": "Returns the comment threads with the given IDs for Stubby or Apiary.",
              "location": "query"
            },
            "maxResults": {
              "description": "The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.",
              "minimum": "1",
              "type": "integer",
              "format": "uint32",
              "maximum": "100",
              "default": "20",
              "location": "query"
            },
            "part": {
              "description": "The *part* parameter specifies a comma-separated list of one or more commentThread resource properties that the API response will include.",
              "type": "string",
              "location": "query",
              "required": true,
              "repeated": true
            }
          },
          "id": "youtube.commentThreads.list",
          "httpMethod": "GET",
          "flatPath": "youtube/v3/commentThreads"
        },
        "insert": {
          "scopes": [
            "https://www.googleapis.com/auth/youtube.force-ssl"
          ],
          "parameterOrder": [
            "part"
          ],
          "httpMethod": "POST",
          "parameters": {
            "part": {
              "location": "query",
              "type": "string",
              "required": true,
              "description": "The *part* parameter identifies the properties that the API response will include. Set the parameter value to snippet. The snippet part has a quota cost of 2 units.",
              "repeated": true
            }
          },
          "flatPath": "youtube/v3/commentThreads",
          "description": "Inserts a new resource into this collection.",
          "id": "youtube.commentThreads.insert",
          "request": {
            "$ref": "CommentThread"
          },
          "response": {
            "$ref": "CommentThread"
          },
          "path": "youtube/v3/commentThreads"
        },
        "update": {
          "parameterOrder": [
            "part"
          ],
          "description": "Updates an existing resource.",
          "scopes": [
            "https://www.googleapis.com/auth/youtube.force-ssl"
          ],
          "request": {
            "$ref": "CommentThread"
          },
          "parameters": {
            "part": {
              "location": "query",
              "repeated": true,
              "required": true,
              "type": "string",
              "description": "The *part* parameter specifies a comma-separated list of commentThread resource properties that the API response will include. You must at least include the snippet part in the parameter value since that part contains all of the properties that the API request can update."
            }
          },
          "id": "youtube.commentThreads.update",
          "path": "youtube/v3/commentThreads",
          "response": {
            "$ref": "CommentThread"
          },
          "flatPath": "youtube/v3/commentThreads",
          "httpMethod": "PUT"
        }
      }
    },
    "liveChatBans": {
      "methods": {
        "insert": {
          "parameters": {
            "part": {
              "location": "query",
              "type": "string",
              "description": "The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response returns. Set the parameter value to snippet.",
              "required": true,
              "repeated": true
            }
          },
          "response": {
            "$ref": "LiveChatBan"
          },
          "flatPath": "youtube/v3/liveChat/bans",
          "parameterOrder": [
            "part"
          ],
          "request": {
            "$ref": "LiveChatBan"
          },
          "description": "Inserts a new resource into this collection.",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl"
          ],
          "path": "youtube/v3/liveChat/bans",
          "id": "youtube.liveChatBans.insert"
        },
        "delete": {
          "httpMethod": "DELETE",
          "parameterOrder": [
            "id"
          ],
          "description": "Deletes a chat ban.",
          "parameters": {
            "id": {
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "flatPath": "youtube/v3/liveChat/bans",
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl"
          ],
          "path": "youtube/v3/liveChat/bans",
          "id": "youtube.liveChatBans.delete"
        }
      }
    },
    "videoAbuseReportReasons": {
      "methods": {
        "list": {
          "id": "youtube.videoAbuseReportReasons.list",
          "description": "Retrieves a list of resources, possibly filtered.",
          "parameters": {
            "part": {
              "type": "string",
              "location": "query",
              "description": "The *part* parameter specifies the videoCategory resource parts that the API response will include. Supported values are id and snippet.",
              "required": true,
              "repeated": true
            },
            "hl": {
              "default": "en-US",
              "location": "query",
              "type": "string"
            }
          },
          "parameterOrder": [
            "part"
          ],
          "response": {
            "$ref": "VideoAbuseReportReasonListResponse"
          },
          "flatPath": "youtube/v3/videoAbuseReportReasons",
          "httpMethod": "GET",
          "path": "youtube/v3/videoAbuseReportReasons",
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtube.readonly"
          ]
        }
      }
    },
    "watermarks": {
      "methods": {
        "set": {
          "parameterOrder": [
            "channelId"
          ],
          "flatPath": "youtube/v3/watermarks/set",
          "description": "Allows upload of watermark image and setting it for a channel.",
          "request": {
            "$ref": "InvideoBranding"
          },
          "path": "youtube/v3/watermarks/set",
          "parameters": {
            "onBehalfOfContentOwner": {
              "location": "query",
              "type": "string",
              "description": "*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."
            },
            "channelId": {
              "required": true,
              "type": "string",
              "location": "query"
            }
          },
          "httpMethod": "POST",
          "mediaUpload": {
            "maxSize": "10485760",
            "protocols": {
              "resumable": {
                "path": "/resumable/upload/youtube/v3/watermarks/set",
                "multipart": true
              },
              "simple": {
                "multipart": true,
                "path": "/upload/youtube/v3/watermarks/set"
              }
            },
            "accept": [
              "image/jpeg",
              "image/png",
              "application/octet-stream"
            ]
          },
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtube.upload",
            "https://www.googleapis.com/auth/youtubepartner"
          ],
          "id": "youtube.watermarks.set",
          "supportsMediaUpload": true
        },
        "unset": {
          "parameters": {
            "onBehalfOfContentOwner": {
              "location": "query",
              "description": "*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.",
              "type": "string"
            },
            "channelId": {
              "type": "string",
              "required": true,
              "location": "query"
            }
          },
          "description": "Allows removal of channel watermark.",
          "httpMethod": "POST",
          "parameterOrder": [
            "channelId"
          ],
          "id": "youtube.watermarks.unset",
          "path": "youtube/v3/watermarks/unset",
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtubepartner"
          ],
          "flatPath": "youtube/v3/watermarks/unset"
        }
      }
    },
    "comments": {
      "methods": {
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/youtube.force-ssl"
          ],
          "path": "youtube/v3/comments",
          "httpMethod": "GET",
          "parameterOrder": [
            "part"
          ],
          "response": {
            "$ref": "CommentListResponse"
          },
          "flatPath": "youtube/v3/comments",
          "parameters": {
            "parentId": {
              "description": "Returns replies to the specified comment. Note, currently YouTube features only one level of replies (ie replies to top level comments). However replies to replies may be supported in the future.",
              "type": "string",
              "location": "query"
            },
            "textFormat": {
              "description": "The requested text format for the returned comments.",
              "location": "query",
              "default": "html",
              "enum": [
                "textFormatUnspecified",
                "html",
                "plainText"
              ],
              "enumDescriptions": [
                "",
                "Returns the comments in HTML format. This is the default value.",
                "Returns the comments in plain text format."
              ],
              "type": "string"
            },
            "maxResults": {
              "maximum": "100",
              "type": "integer",
              "default": "20",
              "format": "uint32",
              "description": "The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.",
              "location": "query",
              "minimum": "1"
            },
            "id": {
              "location": "query",
              "repeated": true,
              "description": "Returns the comments with the given IDs for One Platform.",
              "type": "string"
            },
            "pageToken": {
              "type": "string",
              "description": "The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.",
              "location": "query"
            },
            "part": {
              "type": "string",
              "required": true,
              "repeated": true,
              "location": "query",
              "description": "The *part* parameter specifies a comma-separated list of one or more comment resource properties that the API response will include."
            }
          },
          "description": "Retrieves a list of resources, possibly filtered.",
          "id": "youtube.comments.list"
        },
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/youtube.force-ssl"
          ],
          "path": "youtube/v3/comments",
          "parameters": {
            "id": {
              "required": true,
              "location": "query",
              "type": "string"
            }
          },
          "flatPath": "youtube/v3/comments",
          "httpMethod": "DELETE",
          "description": "Deletes a resource.",
          "id": "youtube.comments.delete",
          "parameterOrder": [
            "id"
          ]
        },
        "insert": {
          "path": "youtube/v3/comments",
          "request": {
            "$ref": "Comment"
          },
          "flatPath": "youtube/v3/comments",
          "id": "youtube.comments.insert",
          "parameters": {
            "part": {
              "location": "query",
              "required": true,
              "type": "string",
              "repeated": true,
              "description": "The *part* parameter identifies the properties that the API response will include. Set the parameter value to snippet. The snippet part has a quota cost of 2 units."
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/youtube.force-ssl"
          ],
          "parameterOrder": [
            "part"
          ],
          "description": "Inserts a new resource into this collection.",
          "response": {
            "$ref": "Comment"
          },
          "httpMethod": "POST"
        },
        "setModerationStatus": {
          "parameterOrder": [
            "id",
            "moderationStatus"
          ],
          "httpMethod": "POST",
          "path": "youtube/v3/comments/setModerationStatus",
          "parameters": {
            "banAuthor": {
              "description": "If set to true the author of the comment gets added to the ban list. This means all future comments of the author will autmomatically be rejected. Only valid in combination with STATUS_REJECTED.",
              "location": "query",
              "default": "false",
              "type": "boolean"
            },
            "moderationStatus": {
              "description": "Specifies the requested moderation status. Note, comments can be in statuses, which are not available through this call. For example, this call does not allow to mark a comment as 'likely spam'. Valid values: MODERATION_STATUS_PUBLISHED, MODERATION_STATUS_HELD_FOR_REVIEW, MODERATION_STATUS_REJECTED.",
              "type": "string",
              "location": "query",
              "required": true,
              "enumDescriptions": [
                "The comment is available for public display.",
                "The comment is awaiting review by a moderator.",
                "",
                "The comment is unfit for display."
              ],
              "enum": [
                "published",
                "heldForReview",
                "likelySpam",
                "rejected"
              ]
            },
            "id": {
              "type": "string",
              "description": "Modifies the moderation status of the comments with the given IDs",
              "repeated": true,
              "location": "query",
              "required": true
            }
          },
          "flatPath": "youtube/v3/comments/setModerationStatus",
          "description": "Sets the moderation status of one or more comments.",
          "id": "youtube.comments.setModerationStatus",
          "scopes": [
            "https://www.googleapis.com/auth/youtube.force-ssl"
          ]
        },
        "markAsSpam": {
          "scopes": [
            "https://www.googleapis.com/auth/youtube.force-ssl"
          ],
          "parameterOrder": [
            "id"
          ],
          "path": "youtube/v3/comments/markAsSpam",
          "parameters": {
            "id": {
              "repeated": true,
              "type": "string",
              "location": "query",
              "description": "Flags the comments with the given IDs as spam in the caller's opinion.",
              "required": true
            }
          },
          "flatPath": "youtube/v3/comments/markAsSpam",
          "httpMethod": "POST",
          "id": "youtube.comments.markAsSpam",
          "description": "Expresses the caller's opinion that one or more comments should be flagged as spam."
        },
        "update": {
          "parameters": {
            "part": {
              "repeated": true,
              "type": "string",
              "location": "query",
              "description": "The *part* parameter identifies the properties that the API response will include. You must at least include the snippet part in the parameter value since that part contains all of the properties that the API request can update.",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/youtube.force-ssl"
          ],
          "id": "youtube.comments.update",
          "parameterOrder": [
            "part"
          ],
          "description": "Updates an existing resource.",
          "response": {
            "$ref": "Comment"
          },
          "httpMethod": "PUT",
          "flatPath": "youtube/v3/comments",
          "path": "youtube/v3/comments",
          "request": {
            "$ref": "Comment"
          }
        }
      }
    },
    "thumbnails": {
      "methods": {
        "set": {
          "flatPath": "youtube/v3/thumbnails/set",
          "supportsMediaUpload": true,
          "path": "youtube/v3/thumbnails/set",
          "description": "As this is not an insert in a strict sense (it supports uploading/setting of a thumbnail for multiple videos, which doesn't result in creation of a single resource), I use a custom verb here.",
          "parameters": {
            "videoId": {
              "type": "string",
              "description": "Returns the Thumbnail with the given video IDs for Stubby or Apiary.",
              "location": "query",
              "required": true
            },
            "onBehalfOfContentOwner": {
              "description": "*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.",
              "location": "query",
              "type": "string"
            }
          },
          "mediaUpload": {
            "accept": [
              "image/jpeg",
              "image/png",
              "application/octet-stream"
            ],
            "protocols": {
              "simple": {
                "path": "/upload/youtube/v3/thumbnails/set",
                "multipart": true
              },
              "resumable": {
                "multipart": true,
                "path": "/resumable/upload/youtube/v3/thumbnails/set"
              }
            },
            "maxSize": "2097152"
          },
          "id": "youtube.thumbnails.set",
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtube.upload",
            "https://www.googleapis.com/auth/youtubepartner"
          ],
          "parameterOrder": [
            "videoId"
          ],
          "response": {
            "$ref": "ThumbnailSetResponse"
          },
          "httpMethod": "POST"
        }
      }
    },
    "channels": {
      "methods": {
        "list": {
          "httpMethod": "GET",
          "response": {
            "$ref": "ChannelListResponse"
          },
          "description": "Retrieves a list of resources, possibly filtered.",
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtube.readonly",
            "https://www.googleapis.com/auth/youtubepartner",
            "https://www.googleapis.com/auth/youtubepartner-channel-audit"
          ],
          "flatPath": "youtube/v3/channels",
          "id": "youtube.channels.list",
          "parameterOrder": [
            "part"
          ],
          "parameters": {
            "pageToken": {
              "location": "query",
              "description": "The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.",
              "type": "string"
            },
            "mine": {
              "location": "query",
              "description": "Return the ids of channels owned by the authenticated user.",
              "type": "boolean"
            },
            "mySubscribers": {
              "type": "boolean",
              "description": "Return the channels subscribed to the authenticated user",
              "location": "query"
            },
            "maxResults": {
              "format": "uint32",
              "default": "5",
              "type": "integer",
              "location": "query",
              "maximum": "50",
              "minimum": "0",
              "description": "The *maxResults* parameter specifies the maximum number of items that should be returned in the result set."
            },
            "forUsername": {
              "type": "string",
              "location": "query",
              "description": "Return the channel associated with a YouTube username."
            },
            "categoryId": {
              "location": "query",
              "description": "Return the channels within the specified guide category ID.",
              "type": "string"
            },
            "hl": {
              "location": "query",
              "type": "string",
              "description": "Stands for \"host language\". Specifies the localization language of the metadata to be filled into snippet.localized. The field is filled with the default metadata if there is no localization in the specified language. The parameter value must be a language code included in the list returned by the i18nLanguages.list method (e.g. en_US, es_MX)."
            },
            "managedByMe": {
              "location": "query",
              "type": "boolean",
              "description": "Return the channels managed by the authenticated user."
            },
            "part": {
              "required": true,
              "repeated": true,
              "description": "The *part* parameter specifies a comma-separated list of one or more channel resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a channel resource, the contentDetails property contains other properties, such as the uploads properties. As such, if you set *part=contentDetails*, the API response will also contain all of those nested properties.",
              "location": "query",
              "type": "string"
            },
            "id": {
              "location": "query",
              "type": "string",
              "repeated": true,
              "description": "Return the channels with the specified IDs."
            },
            "onBehalfOfContentOwner": {
              "location": "query",
              "type": "string",
              "description": "*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."
            }
          },
          "path": "youtube/v3/channels"
        },
        "update": {
          "response": {
            "$ref": "Channel"
          },
          "id": "youtube.channels.update",
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtubepartner"
          ],
          "flatPath": "youtube/v3/channels",
          "description": "Updates an existing resource.",
          "httpMethod": "PUT",
          "request": {
            "$ref": "Channel"
          },
          "path": "youtube/v3/channels",
          "parameters": {
            "part": {
              "description": "The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. The API currently only allows the parameter value to be set to either brandingSettings or invideoPromotion. (You cannot update both of those parts with a single request.) Note that this method overrides the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies.",
              "location": "query",
              "type": "string",
              "repeated": true,
              "required": true
            },
            "onBehalfOfContentOwner": {
              "description": "The *onBehalfOfContentOwner* parameter indicates that the authenticated user is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with needs to be linked to the specified YouTube content owner.",
              "location": "query",
              "type": "string"
            }
          },
          "parameterOrder": [
            "part"
          ]
        }
      }
    },
    "i18nRegions": {
      "methods": {
        "list": {
          "description": "Retrieves a list of resources, possibly filtered.",
          "id": "youtube.i18nRegions.list",
          "parameters": {
            "part": {
              "type": "string",
              "repeated": true,
              "description": "The *part* parameter specifies the i18nRegion resource properties that the API response will include. Set the parameter value to snippet.",
              "required": true,
              "location": "query"
            },
            "hl": {
              "type": "string",
              "location": "query",
              "default": "en_US"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtube.readonly",
            "https://www.googleapis.com/auth/youtubepartner"
          ],
          "httpMethod": "GET",
          "path": "youtube/v3/i18nRegions",
          "flatPath": "youtube/v3/i18nRegions",
          "parameterOrder": [
            "part"
          ],
          "response": {
            "$ref": "I18nRegionListResponse"
          }
        }
      }
    },
    "search": {
      "methods": {
        "list": {
          "response": {
            "$ref": "SearchListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtube.readonly",
            "https://www.googleapis.com/auth/youtubepartner"
          ],
          "description": "Retrieves a list of search resources",
          "path": "youtube/v3/search",
          "flatPath": "youtube/v3/search",
          "id": "youtube.search.list",
          "parameterOrder": [
            "part"
          ],
          "parameters": {
            "q": {
              "description": "Textual search terms to match.",
              "type": "string",
              "location": "query"
            },
            "maxResults": {
              "minimum": "0",
              "format": "uint32",
              "type": "integer",
              "default": "5",
              "description": "The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.",
              "maximum": "50",
              "location": "query"
            },
            "relatedToVideoId": {
              "type": "string",
              "description": "Search related to a resource.",
              "location": "query"
            },
            "videoSyndicated": {
              "location": "query",
              "description": "Filter on syndicated videos.",
              "enumDescriptions": [
                "",
                "Return all videos, syndicated or not.",
                "Only retrieve syndicated videos."
              ],
              "enum": [
                "videoSyndicatedUnspecified",
                "any",
                "true"
              ],
              "type": "string"
            },
            "onBehalfOfContentOwner": {
              "description": "*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.",
              "type": "string",
              "location": "query"
            },
            "forDeveloper": {
              "description": "Restrict the search to only retrieve videos uploaded using the project id of the authenticated user.",
              "type": "boolean",
              "location": "query"
            },
            "channelType": {
              "type": "string",
              "enumDescriptions": [
                "",
                "Return all channels.",
                "Only retrieve shows."
              ],
              "enum": [
                "channelTypeUnspecified",
                "any",
                "show"
              ],
              "description": "Add a filter on the channel search.",
              "location": "query"
            },
            "videoLicense": {
              "enumDescriptions": [
                "Return all videos, regardless of which license they have, that match the query parameters.",
                "Only return videos that have the standard YouTube license.",
                "Only return videos that have a Creative Commons license. Users can reuse videos with this license in other videos that they create. Learn more."
              ],
              "location": "query",
              "description": "Filter on the license of the videos.",
              "type": "string",
              "enum": [
                "any",
                "youtube",
                "creativeCommon"
              ]
            },
            "videoDefinition": {
              "location": "query",
              "enum": [
                "any",
                "standard",
                "high"
              ],
              "enumDescriptions": [
                "Return all videos, regardless of their resolution.",
                "Only retrieve videos in standard definition.",
                "Only retrieve HD videos."
              ],
              "type": "string",
              "description": "Filter on the definition of the videos."
            },
            "videoEmbeddable": {
              "type": "string",
              "location": "query",
              "enum": [
                "videoEmbeddableUnspecified",
                "any",
                "true"
              ],
              "enumDescriptions": [
                "",
                "Return all videos, embeddable or not.",
                "Only retrieve embeddable videos."
              ],
              "description": "Filter on embeddable videos."
            },
            "forMine": {
              "location": "query",
              "type": "boolean",
              "description": "Search for the private videos of the authenticated user."
            },
            "pageToken": {
              "location": "query",
              "description": "The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.",
              "type": "string"
            },
            "videoDimension": {
              "enumDescriptions": [
                "",
                "Restrict search results to exclude 3D videos.",
                "Restrict search results to only include 3D videos."
              ],
              "type": "string",
              "location": "query",
              "description": "Filter on 3d videos.",
              "enum": [
                "any",
                "2d",
                "3d"
              ]
            },
            "publishedAfter": {
              "description": "Filter on resources published after this date.",
              "format": "google-datetime",
              "type": "string",
              "location": "query"
            },
            "videoType": {
              "enumDescriptions": [
                "",
                "Return all videos.",
                "Only retrieve movies.",
                "Only retrieve episodes of shows."
              ],
              "location": "query",
              "description": "Filter on videos of a specific type.",
              "type": "string",
              "enum": [
                "videoTypeUnspecified",
                "any",
                "movie",
                "episode"
              ]
            },
            "type": {
              "default": "video,channel,playlist",
              "description": "Restrict results to a particular set of resource types from One Platform.",
              "type": "string",
              "repeated": true,
              "location": "query"
            },
            "channelId": {
              "description": "Filter on resources belonging to this channelId.",
              "location": "query",
              "type": "string"
            },
            "location": {
              "description": "Filter on location of the video",
              "type": "string",
              "location": "query"
            },
            "videoCategoryId": {
              "description": "Filter on videos in a specific category.",
              "type": "string",
              "location": "query"
            },
            "part": {
              "type": "string",
              "location": "query",
              "required": true,
              "description": "The *part* parameter specifies a comma-separated list of one or more search resource properties that the API response will include. Set the parameter value to snippet.",
              "repeated": true
            },
            "topicId": {
              "description": "Restrict results to a particular topic.",
              "location": "query",
              "type": "string"
            },
            "relevanceLanguage": {
              "type": "string",
              "location": "query",
              "description": "Return results relevant to this language."
            },
            "eventType": {
              "enum": [
                "none",
                "upcoming",
                "live",
                "completed"
              ],
              "enumDescriptions": [
                "",
                "The live broadcast is upcoming.",
                "The live broadcast is active.",
                "The live broadcast has been completed."
              ],
              "description": "Filter on the livestream status of the videos.",
              "type": "string",
              "location": "query"
            },
            "safeSearch": {
              "default": "moderate",
              "description": "Indicates whether the search results should include restricted content as well as standard content.",
              "location": "query",
              "type": "string",
              "enumDescriptions": [
                "",
                "YouTube will not filter the search result set.",
                "YouTube will filter some content from search results and, at the least, will filter content that is restricted in your locale. Based on their content, search results could be removed from search results or demoted in search results. This is the default parameter value.",
                "YouTube will try to exclude all restricted content from the search result set. Based on their content, search results could be removed from search results or demoted in search results."
              ],
              "enum": [
                "safeSearchSettingUnspecified",
                "none",
                "moderate",
                "strict"
              ]
            },
            "videoDuration": {
              "type": "string",
              "description": "Filter on the duration of the videos.",
              "enumDescriptions": [
                "",
                "Do not filter video search results based on their duration. This is the default value.",
                "Only include videos that are less than four minutes long.",
                "Only include videos that are between four and 20 minutes long (inclusive).",
                "Only include videos longer than 20 minutes."
              ],
              "enum": [
                "videoDurationUnspecified",
                "any",
                "short",
                "medium",
                "long"
              ],
              "location": "query"
            },
            "publishedBefore": {
              "location": "query",
              "format": "google-datetime",
              "description": "Filter on resources published before this date.",
              "type": "string"
            },
            "order": {
              "enumDescriptions": [
                "",
                "Resources are sorted in reverse chronological order based on the date they were created.",
                "Resources are sorted from highest to lowest rating.",
                "Resources are sorted from highest to lowest number of views.",
                "Resources are sorted based on their relevance to the search query. This is the default value for this parameter.",
                "Resources are sorted alphabetically by title.",
                "Channels are sorted in descending order of their number of uploaded videos."
              ],
              "enum": [
                "searchSortUnspecified",
                "date",
                "rating",
                "viewCount",
                "relevance",
                "title",
                "videoCount"
              ],
              "location": "query",
              "type": "string",
              "default": "relevance",
              "description": "Sort order of the results."
            },
            "locationRadius": {
              "description": "Filter on distance from the location (specified above).",
              "location": "query",
              "type": "string"
            },
            "regionCode": {
              "type": "string",
              "description": "Display the content as seen by viewers in this country.",
              "location": "query"
            },
            "forContentOwner": {
              "location": "query",
              "description": "Search owned by a content owner.",
              "type": "boolean"
            },
            "videoCaption": {
              "location": "query",
              "enumDescriptions": [
                "",
                "Do not filter results based on caption availability.",
                "Only include videos that have captions.",
                "Only include videos that do not have captions."
              ],
              "enum": [
                "videoCaptionUnspecified",
                "any",
                "closedCaption",
                "none"
              ],
              "type": "string",
              "description": "Filter on the presence of captions on the videos."
            }
          },
          "httpMethod": "GET"
        }
      }
    },
    "liveStreams": {
      "methods": {
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl"
          ],
          "parameters": {
            "id": {
              "required": true,
              "type": "string",
              "location": "query"
            },
            "onBehalfOfContentOwnerChannel": {
              "type": "string",
              "location": "query",
              "description": "This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel."
            },
            "onBehalfOfContentOwner": {
              "location": "query",
              "type": "string",
              "description": "*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."
            }
          },
          "httpMethod": "DELETE",
          "description": "Deletes an existing stream for the authenticated user.",
          "parameterOrder": [
            "id"
          ],
          "path": "youtube/v3/liveStreams",
          "id": "youtube.liveStreams.delete",
          "flatPath": "youtube/v3/liveStreams"
        },
        "insert": {
          "request": {
            "$ref": "LiveStream"
          },
          "response": {
            "$ref": "LiveStream"
          },
          "id": "youtube.liveStreams.insert",
          "parameterOrder": [
            "part"
          ],
          "httpMethod": "POST",
          "flatPath": "youtube/v3/liveStreams",
          "path": "youtube/v3/liveStreams",
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl"
          ],
          "description": "Inserts a new stream for the authenticated user.",
          "parameters": {
            "part": {
              "location": "query",
              "required": true,
              "description": "The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. The part properties that you can include in the parameter value are id, snippet, cdn, content_details, and status.",
              "repeated": true,
              "type": "string"
            },
            "onBehalfOfContentOwnerChannel": {
              "type": "string",
              "location": "query",
              "description": "This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel."
            },
            "onBehalfOfContentOwner": {
              "type": "string",
              "description": "*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.",
              "location": "query"
            }
          }
        },
        "update": {
          "parameters": {
            "onBehalfOfContentOwnerChannel": {
              "type": "string",
              "location": "query",
              "description": "This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel."
            },
            "part": {
              "repeated": true,
              "required": true,
              "location": "query",
              "description": "The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. The part properties that you can include in the parameter value are id, snippet, cdn, and status. Note that this method will override the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies. If the request body does not specify a value for a mutable property, the existing value for that property will be removed.",
              "type": "string"
            },
            "onBehalfOfContentOwner": {
              "type": "string",
              "description": "*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.",
              "location": "query"
            }
          },
          "parameterOrder": [
            "part"
          ],
          "httpMethod": "PUT",
          "request": {
            "$ref": "LiveStream"
          },
          "description": "Updates an existing stream for the authenticated user.",
          "response": {
            "$ref": "LiveStream"
          },
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl"
          ],
          "path": "youtube/v3/liveStreams",
          "flatPath": "youtube/v3/liveStreams",
          "id": "youtube.liveStreams.update"
        },
        "list": {
          "description": "Retrieve the list of streams associated with the given channel. --",
          "path": "youtube/v3/liveStreams",
          "flatPath": "youtube/v3/liveStreams",
          "parameterOrder": [
            "part"
          ],
          "response": {
            "$ref": "LiveStreamListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtube.readonly"
          ],
          "id": "youtube.liveStreams.list",
          "parameters": {
            "onBehalfOfContentOwnerChannel": {
              "type": "string",
              "description": "This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.",
              "location": "query"
            },
            "part": {
              "repeated": true,
              "required": true,
              "description": "The *part* parameter specifies a comma-separated list of one or more liveStream resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, cdn, and status.",
              "type": "string",
              "location": "query"
            },
            "onBehalfOfContentOwner": {
              "description": "*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.",
              "location": "query",
              "type": "string"
            },
            "mine": {
              "location": "query",
              "type": "boolean"
            },
            "maxResults": {
              "maximum": "50",
              "location": "query",
              "type": "integer",
              "minimum": "0",
              "default": "5",
              "description": "The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.",
              "format": "uint32"
            },
            "pageToken": {
              "location": "query",
              "description": "The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.",
              "type": "string"
            },
            "id": {
              "location": "query",
              "type": "string",
              "repeated": true,
              "description": "Return LiveStreams with the given ids from Stubby or Apiary."
            }
          },
          "httpMethod": "GET"
        }
      }
    },
    "liveChatModerators": {
      "methods": {
        "list": {
          "parameterOrder": [
            "liveChatId",
            "part"
          ],
          "description": "Retrieves a list of resources, possibly filtered.",
          "flatPath": "youtube/v3/liveChat/moderators",
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtube.readonly"
          ],
          "path": "youtube/v3/liveChat/moderators",
          "httpMethod": "GET",
          "parameters": {
            "liveChatId": {
              "location": "query",
              "required": true,
              "type": "string",
              "description": "The id of the live chat for which moderators should be returned."
            },
            "maxResults": {
              "location": "query",
              "type": "integer",
              "description": "The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.",
              "minimum": "0",
              "default": "5",
              "maximum": "50",
              "format": "uint32"
            },
            "part": {
              "required": true,
              "location": "query",
              "type": "string",
              "repeated": true,
              "description": "The *part* parameter specifies the liveChatModerator resource parts that the API response will include. Supported values are id and snippet."
            },
            "pageToken": {
              "description": "The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.",
              "type": "string",
              "location": "query"
            }
          },
          "id": "youtube.liveChatModerators.list",
          "response": {
            "$ref": "LiveChatModeratorListResponse"
          }
        },
        "insert": {
          "description": "Inserts a new resource into this collection.",
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl"
          ],
          "parameterOrder": [
            "part"
          ],
          "id": "youtube.liveChatModerators.insert",
          "response": {
            "$ref": "LiveChatModerator"
          },
          "httpMethod": "POST",
          "flatPath": "youtube/v3/liveChat/moderators",
          "parameters": {
            "part": {
              "repeated": true,
              "description": "The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response returns. Set the parameter value to snippet.",
              "required": true,
              "location": "query",
              "type": "string"
            }
          },
          "path": "youtube/v3/liveChat/moderators",
          "request": {
            "$ref": "LiveChatModerator"
          }
        },
        "delete": {
          "path": "youtube/v3/liveChat/moderators",
          "parameterOrder": [
            "id"
          ],
          "id": "youtube.liveChatModerators.delete",
          "description": "Deletes a chat moderator.",
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl"
          ],
          "httpMethod": "DELETE",
          "flatPath": "youtube/v3/liveChat/moderators",
          "parameters": {
            "id": {
              "type": "string",
              "required": true,
              "location": "query"
            }
          }
        }
      }
    },
    "playlistItems": {
      "methods": {
        "delete": {
          "id": "youtube.playlistItems.delete",
          "parameters": {
            "id": {
              "location": "query",
              "required": true,
              "type": "string"
            },
            "onBehalfOfContentOwner": {
              "location": "query",
              "type": "string",
              "description": "*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."
            }
          },
          "httpMethod": "DELETE",
          "flatPath": "youtube/v3/playlistItems",
          "parameterOrder": [
            "id"
          ],
          "description": "Deletes a resource.",
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtubepartner"
          ],
          "path": "youtube/v3/playlistItems"
        },
        "update": {
          "path": "youtube/v3/playlistItems",
          "description": "Updates an existing resource.",
          "parameters": {
            "onBehalfOfContentOwner": {
              "location": "query",
              "type": "string",
              "description": "*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."
            },
            "part": {
              "location": "query",
              "type": "string",
              "repeated": true,
              "description": "The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. Note that this method will override the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies. For example, a playlist item can specify a start time and end time, which identify the times portion of the video that should play when users watch the video in the playlist. If your request is updating a playlist item that sets these values, and the request's part parameter value includes the contentDetails part, the playlist item's start and end times will be updated to whatever value the request body specifies. If the request body does not specify values, the existing start and end times will be removed and replaced with the default settings.",
              "required": true
            }
          },
          "parameterOrder": [
            "part"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtubepartner"
          ],
          "flatPath": "youtube/v3/playlistItems",
          "request": {
            "$ref": "PlaylistItem"
          },
          "id": "youtube.playlistItems.update",
          "response": {
            "$ref": "PlaylistItem"
          },
          "httpMethod": "PUT"
        },
        "list": {
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtube.readonly",
            "https://www.googleapis.com/auth/youtubepartner"
          ],
          "parameters": {
            "part": {
              "location": "query",
              "type": "string",
              "repeated": true,
              "required": true,
              "description": "The *part* parameter specifies a comma-separated list of one or more playlistItem resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a playlistItem resource, the snippet property contains numerous fields, including the title, description, position, and resourceId properties. As such, if you set *part=snippet*, the API response will contain all of those properties."
            },
            "videoId": {
              "location": "query",
              "type": "string",
              "description": "Return the playlist items associated with the given video ID."
            },
            "playlistId": {
              "type": "string",
              "location": "query",
              "description": "Return the playlist items within the given playlist."
            },
            "onBehalfOfContentOwner": {
              "description": "*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.",
              "location": "query",
              "type": "string"
            },
            "id": {
              "type": "string",
              "location": "query",
              "repeated": true
            },
            "maxResults": {
              "description": "The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.",
              "maximum": "50",
              "minimum": "0",
              "format": "uint32",
              "default": "5",
              "type": "integer",
              "location": "query"
            },
            "pageToken": {
              "location": "query",
              "description": "The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.",
              "type": "string"
            }
          },
          "id": "youtube.playlistItems.list",
          "response": {
            "$ref": "PlaylistItemListResponse"
          },
          "parameterOrder": [
            "part"
          ],
          "description": "Retrieves a list of resources, possibly filtered.",
          "path": "youtube/v3/playlistItems",
          "flatPath": "youtube/v3/playlistItems"
        },
        "insert": {
          "flatPath": "youtube/v3/playlistItems",
          "description": "Inserts a new resource into this collection.",
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtubepartner"
          ],
          "id": "youtube.playlistItems.insert",
          "parameters": {
            "onBehalfOfContentOwner": {
              "type": "string",
              "description": "*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.",
              "location": "query"
            },
            "part": {
              "type": "string",
              "description": "The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.",
              "location": "query",
              "required": true,
              "repeated": true
            }
          },
          "parameterOrder": [
            "part"
          ],
          "request": {
            "$ref": "PlaylistItem"
          },
          "response": {
            "$ref": "PlaylistItem"
          },
          "httpMethod": "POST",
          "path": "youtube/v3/playlistItems"
        }
      }
    },
    "membershipsLevels": {
      "methods": {
        "list": {
          "response": {
            "$ref": "MembershipsLevelListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/youtube.channel-memberships.creator"
          ],
          "parameterOrder": [
            "part"
          ],
          "parameters": {
            "part": {
              "repeated": true,
              "type": "string",
              "location": "query",
              "description": "The *part* parameter specifies the membershipsLevel resource parts that the API response will include. Supported values are id and snippet.",
              "required": true
            }
          },
          "flatPath": "youtube/v3/membershipsLevels",
          "description": "Retrieves a list of all pricing levels offered by a creator to the fans.",
          "httpMethod": "GET",
          "id": "youtube.membershipsLevels.list",
          "path": "youtube/v3/membershipsLevels"
        }
      }
    },
    "subscriptions": {
      "methods": {
        "insert": {
          "request": {
            "$ref": "Subscription"
          },
          "flatPath": "youtube/v3/subscriptions",
          "response": {
            "$ref": "Subscription"
          },
          "parameterOrder": [
            "part"
          ],
          "path": "youtube/v3/subscriptions",
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtubepartner"
          ],
          "id": "youtube.subscriptions.insert",
          "parameters": {
            "part": {
              "location": "query",
              "required": true,
              "type": "string",
              "repeated": true,
              "description": "The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include."
            }
          },
          "description": "Inserts a new resource into this collection.",
          "httpMethod": "POST"
        },
        "delete": {
          "id": "youtube.subscriptions.delete",
          "flatPath": "youtube/v3/subscriptions",
          "path": "youtube/v3/subscriptions",
          "parameterOrder": [
            "id"
          ],
          "description": "Deletes a resource.",
          "parameters": {
            "id": {
              "type": "string",
              "location": "query",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtubepartner"
          ],
          "httpMethod": "DELETE"
        },
        "list": {
          "flatPath": "youtube/v3/subscriptions",
          "response": {
            "$ref": "SubscriptionListResponse"
          },
          "description": "Retrieves a list of resources, possibly filtered.",
          "id": "youtube.subscriptions.list",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtube.readonly",
            "https://www.googleapis.com/auth/youtubepartner"
          ],
          "parameterOrder": [
            "part"
          ],
          "path": "youtube/v3/subscriptions",
          "parameters": {
            "mySubscribers": {
              "location": "query",
              "description": "Return the subscribers of the given channel owner.",
              "type": "boolean"
            },
            "myRecentSubscribers": {
              "type": "boolean",
              "location": "query"
            },
            "onBehalfOfContentOwnerChannel": {
              "description": "This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.",
              "type": "string",
              "location": "query"
            },
            "order": {
              "enumDescriptions": [
                "",
                "Sort by relevance.",
                "Sort by order of activity.",
                "Sort alphabetically."
              ],
              "type": "string",
              "enum": [
                "subscriptionOrderUnspecified",
                "relevance",
                "unread",
                "alphabetical"
              ],
              "default": "relevance",
              "location": "query",
              "description": "The order of the returned subscriptions"
            },
            "id": {
              "location": "query",
              "repeated": true,
              "type": "string",
              "description": "Return the subscriptions with the given IDs for Stubby or Apiary."
            },
            "channelId": {
              "location": "query",
              "type": "string",
              "description": "Return the subscriptions of the given channel owner."
            },
            "forChannelId": {
              "location": "query",
              "type": "string",
              "description": "Return the subscriptions to the subset of these channels that the authenticated user is subscribed to."
            },
            "onBehalfOfContentOwner": {
              "type": "string",
              "location": "query",
              "description": "*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."
            },
            "pageToken": {
              "location": "query",
              "description": "The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.",
              "type": "string"
            },
            "part": {
              "description": "The *part* parameter specifies a comma-separated list of one or more subscription resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a subscription resource, the snippet property contains other properties, such as a display title for the subscription. If you set *part=snippet*, the API response will also contain all of those nested properties.",
              "repeated": true,
              "location": "query",
              "required": true,
              "type": "string"
            },
            "maxResults": {
              "minimum": "0",
              "maximum": "50",
              "description": "The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.",
              "location": "query",
              "format": "uint32",
              "type": "integer",
              "default": "5"
            },
            "mine": {
              "location": "query",
              "type": "boolean",
              "description": "Flag for returning the subscriptions of the authenticated user."
            }
          }
        }
      }
    },
    "superChatEvents": {
      "methods": {
        "list": {
          "path": "youtube/v3/superChatEvents",
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtube.readonly"
          ],
          "httpMethod": "GET",
          "description": "Retrieves a list of resources, possibly filtered.",
          "id": "youtube.superChatEvents.list",
          "parameterOrder": [
            "part"
          ],
          "flatPath": "youtube/v3/superChatEvents",
          "parameters": {
            "hl": {
              "location": "query",
              "description": "Return rendered funding amounts in specified language.",
              "type": "string"
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved."
            },
            "part": {
              "location": "query",
              "required": true,
              "description": "The *part* parameter specifies the superChatEvent resource parts that the API response will include. Supported values are id and snippet.",
              "type": "string",
              "repeated": true
            },
            "maxResults": {
              "maximum": "50",
              "location": "query",
              "type": "integer",
              "minimum": "1",
              "format": "uint32",
              "description": "The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.",
              "default": "5"
            }
          },
          "response": {
            "$ref": "SuperChatEventListResponse"
          }
        }
      }
    },
    "videoCategories": {
      "methods": {
        "list": {
          "flatPath": "youtube/v3/videoCategories",
          "parameterOrder": [
            "part"
          ],
          "description": "Retrieves a list of resources, possibly filtered.",
          "parameters": {
            "hl": {
              "default": "en-US",
              "location": "query",
              "type": "string"
            },
            "regionCode": {
              "type": "string",
              "location": "query"
            },
            "part": {
              "location": "query",
              "required": true,
              "type": "string",
              "repeated": true,
              "description": "The *part* parameter specifies the videoCategory resource properties that the API response will include. Set the parameter value to snippet."
            },
            "id": {
              "type": "string",
              "description": "Returns the video categories with the given IDs for Stubby or Apiary.",
              "location": "query",
              "repeated": true
            }
          },
          "response": {
            "$ref": "VideoCategoryListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtube.readonly",
            "https://www.googleapis.com/auth/youtubepartner"
          ],
          "httpMethod": "GET",
          "id": "youtube.videoCategories.list",
          "path": "youtube/v3/videoCategories"
        }
      }
    },
    "thirdPartyLinks": {
      "methods": {
        "list": {
          "path": "youtube/v3/thirdPartyLinks",
          "parameterOrder": [
            "part"
          ],
          "description": "Retrieves a list of resources, possibly filtered.",
          "flatPath": "youtube/v3/thirdPartyLinks",
          "response": {
            "$ref": "ThirdPartyLink"
          },
          "id": "youtube.thirdPartyLinks.list",
          "parameters": {
            "linkingToken": {
              "type": "string",
              "location": "query",
              "description": "Get a third party link with the given linking token."
            },
            "part": {
              "location": "query",
              "type": "string",
              "description": "The *part* parameter specifies the thirdPartyLink resource parts that the API response will include. Supported values are linkingToken, status, and snippet.",
              "repeated": true,
              "required": true
            },
            "type": {
              "type": "string",
              "location": "query",
              "enum": [
                "linkUnspecified",
                "channelToStoreLink"
              ],
              "description": "Get a third party link of the given type.",
              "enumDescriptions": [
                "",
                "A link that is connecting (or about to connect) a channel with a store on a merchandising platform in order to enable retail commerce capabilities for that channel on YouTube."
              ]
            }
          },
          "httpMethod": "GET"
        },
        "insert": {
          "id": "youtube.thirdPartyLinks.insert",
          "flatPath": "youtube/v3/thirdPartyLinks",
          "description": "Inserts a new resource into this collection.",
          "response": {
            "$ref": "ThirdPartyLink"
          },
          "request": {
            "$ref": "ThirdPartyLink"
          },
          "parameters": {
            "part": {
              "type": "string",
              "required": true,
              "description": "The *part* parameter specifies the thirdPartyLink resource parts that the API request and response will include. Supported values are linkingToken, status, and snippet.",
              "repeated": true,
              "location": "query"
            }
          },
          "httpMethod": "POST",
          "path": "youtube/v3/thirdPartyLinks",
          "parameterOrder": [
            "part"
          ]
        },
        "delete": {
          "id": "youtube.thirdPartyLinks.delete",
          "flatPath": "youtube/v3/thirdPartyLinks",
          "description": "Deletes a resource.",
          "path": "youtube/v3/thirdPartyLinks",
          "parameters": {
            "part": {
              "repeated": true,
              "location": "query",
              "description": "Do not use. Required for compatibility.",
              "type": "string"
            },
            "linkingToken": {
              "type": "string",
              "description": "Delete the partner links with the given linking token.",
              "location": "query",
              "required": true
            },
            "type": {
              "description": "Type of the link to be deleted.",
              "location": "query",
              "enum": [
                "linkUnspecified",
                "channelToStoreLink"
              ],
              "type": "string",
              "enumDescriptions": [
                "",
                "A link that is connecting (or about to connect) a channel with a store on a merchandising platform in order to enable retail commerce capabilities for that channel on YouTube."
              ],
              "required": true
            }
          },
          "httpMethod": "DELETE",
          "parameterOrder": [
            "linkingToken",
            "type"
          ]
        },
        "update": {
          "description": "Updates an existing resource.",
          "response": {
            "$ref": "ThirdPartyLink"
          },
          "httpMethod": "PUT",
          "request": {
            "$ref": "ThirdPartyLink"
          },
          "parameterOrder": [
            "part"
          ],
          "id": "youtube.thirdPartyLinks.update",
          "flatPath": "youtube/v3/thirdPartyLinks",
          "path": "youtube/v3/thirdPartyLinks",
          "parameters": {
            "part": {
              "location": "query",
              "type": "string",
              "required": true,
              "description": "The *part* parameter specifies the thirdPartyLink resource parts that the API request and response will include. Supported values are linkingToken, status, and snippet.",
              "repeated": true
            }
          }
        }
      }
    },
    "tests": {
      "methods": {
        "insert": {
          "flatPath": "youtube/v3/tests",
          "request": {
            "$ref": "TestItem"
          },
          "response": {
            "$ref": "TestItem"
          },
          "parameterOrder": [
            "part"
          ],
          "path": "youtube/v3/tests",
          "scopes": [
            "https://www.googleapis.com/auth/youtube.readonly"
          ],
          "id": "youtube.tests.insert",
          "httpMethod": "POST",
          "parameters": {
            "part": {
              "repeated": true,
              "location": "query",
              "type": "string",
              "required": true
            }
          },
          "description": "POST method."
        }
      }
    },
    "i18nLanguages": {
      "methods": {
        "list": {
          "parameters": {
            "part": {
              "type": "string",
              "description": "The *part* parameter specifies the i18nLanguage resource properties that the API response will include. Set the parameter value to snippet.",
              "required": true,
              "repeated": true,
              "location": "query"
            },
            "hl": {
              "default": "en_US",
              "location": "query",
              "type": "string"
            }
          },
          "flatPath": "youtube/v3/i18nLanguages",
          "path": "youtube/v3/i18nLanguages",
          "httpMethod": "GET",
          "id": "youtube.i18nLanguages.list",
          "description": "Retrieves a list of resources, possibly filtered.",
          "response": {
            "$ref": "I18nLanguageListResponse"
          },
          "parameterOrder": [
            "part"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtube.readonly",
            "https://www.googleapis.com/auth/youtubepartner"
          ]
        }
      }
    },
    "videos": {
      "methods": {
        "update": {
          "flatPath": "youtube/v3/videos",
          "request": {
            "$ref": "Video"
          },
          "httpMethod": "PUT",
          "parameters": {
            "onBehalfOfContentOwner": {
              "location": "query",
              "type": "string",
              "description": "*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner."
            },
            "part": {
              "type": "string",
              "repeated": true,
              "location": "query",
              "description": "The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. Note that this method will override the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies. For example, a video's privacy setting is contained in the status part. As such, if your request is updating a private video, and the request's part parameter value includes the status part, the video's privacy setting will be updated to whatever value the request body specifies. If the request body does not specify a value, the existing privacy setting will be removed and the video will revert to the default privacy setting. In addition, not all parts contain properties that can be set when inserting or updating a video. For example, the statistics object encapsulates statistics that YouTube calculates for a video and does not contain values that you can set or modify. If the parameter value specifies a part that does not contain mutable values, that part will still be included in the API response.",
              "required": true
            }
          },
          "response": {
            "$ref": "Video"
          },
          "path": "youtube/v3/videos",
          "id": "youtube.videos.update",
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtubepartner"
          ],
          "parameterOrder": [
            "part"
          ],
          "description": "Updates an existing resource."
        },
        "list": {
          "response": {
            "$ref": "VideoListResponse"
          },
          "httpMethod": "GET",
          "flatPath": "youtube/v3/videos",
          "parameters": {
            "onBehalfOfContentOwner": {
              "description": "*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.",
              "location": "query",
              "type": "string"
            },
            "regionCode": {
              "description": "Use a chart that is specific to the specified region",
              "location": "query",
              "type": "string"
            },
            "locale": {
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "description": "The *maxResults* parameter specifies the maximum number of items that should be returned in the result set. *Note:* This parameter is supported for use in conjunction with the myRating and chart parameters, but it is not supported for use in conjunction with the id parameter.",
              "maximum": "50",
              "type": "integer",
              "default": "5",
              "minimum": "1",
              "location": "query",
              "format": "uint32"
            },
            "part": {
              "repeated": true,
              "location": "query",
              "required": true,
              "description": "The *part* parameter specifies a comma-separated list of one or more video resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a video resource, the snippet property contains the channelId, title, description, tags, and categoryId properties. As such, if you set *part=snippet*, the API response will contain all of those properties.",
              "type": "string"
            },
            "chart": {
              "enum": [
                "chartUnspecified",
                "mostPopular"
              ],
              "enumDescriptions": [
                "",
                "Return the most popular videos for the specified content region and video category."
              ],
              "location": "query",
              "description": "Return the videos that are in the specified chart.",
              "type": "string"
            },
            "hl": {
              "location": "query",
              "type": "string",
              "description": "Stands for \"host language\". Specifies the localization language of the metadata to be filled into snippet.localized. The field is filled with the default metadata if there is no localization in the specified language. The parameter value must be a language code included in the list returned by the i18nLanguages.list method (e.g. en_US, es_MX)."
            },
            "myRating": {
              "location": "query",
              "description": "Return videos liked/disliked by the authenticated user. Does not support RateType.RATED_TYPE_NONE.",
              "type": "string",
              "enumDescriptions": [
                "",
                "The entity is liked.",
                "The entity is disliked."
              ],
              "enum": [
                "none",
                "like",
                "dislike"
              ]
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved. *Note:* This parameter is supported for use in conjunction with the myRating and chart parameters, but it is not supported for use in conjunction with the id parameter."
            },
            "videoCategoryId": {
              "type": "string",
              "description": "Use chart that is specific to the specified video category",
              "location": "query",
              "default": "0"
            },
            "maxHeight": {
              "maximum": "8192",
              "format": "int32",
              "type": "integer",
              "location": "query",
              "minimum": "72"
            },
            "maxWidth": {
              "type": "integer",
              "format": "int32",
              "location": "query",
              "minimum": "72",
              "maximum": "8192",
              "description": "Return the player with maximum height specified in"
            },
            "id": {
              "location": "query",
              "description": "Return videos with the given ids.",
              "type": "string",
              "repeated": true
            }
          },
          "id": "youtube.videos.list",
          "parameterOrder": [
            "part"
          ],
          "description": "Retrieves a list of resources, possibly filtered.",
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtube.readonly",
            "https://www.googleapis.com/auth/youtubepartner"
          ],
          "path": "youtube/v3/videos"
        },
        "getRating": {
          "httpMethod": "GET",
          "flatPath": "youtube/v3/videos/getRating",
          "id": "youtube.videos.getRating",
          "response": {
            "$ref": "VideoGetRatingResponse"
          },
          "path": "youtube/v3/videos/getRating",
          "description": "Retrieves the ratings that the authorized user gave to a list of specified videos.",
          "parameters": {
            "onBehalfOfContentOwner": {
              "location": "query",
              "description": "*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.",
              "type": "string"
            },
            "id": {
              "type": "string",
              "location": "query",
              "repeated": true,
              "required": true
            }
          },
          "parameterOrder": [
            "id"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtubepartner"
          ]
        },
        "delete": {
          "parameterOrder": [
            "id"
          ],
          "httpMethod": "DELETE",
          "parameters": {
            "onBehalfOfContentOwner": {
              "location": "query",
              "description": "*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.",
              "type": "string"
            },
            "id": {
              "location": "query",
              "type": "string",
              "required": true
            }
          },
          "description": "Deletes a resource.",
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtubepartner"
          ],
          "id": "youtube.videos.delete",
          "flatPath": "youtube/v3/videos",
          "path": "youtube/v3/videos"
        },
        "insert": {
          "request": {
            "$ref": "Video"
          },
          "id": "youtube.videos.insert",
          "supportsMediaUpload": true,
          "parameters": {
            "part": {
              "repeated": true,
              "required": true,
              "type": "string",
              "location": "query",
              "description": "The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. Note that not all parts contain properties that can be set when inserting or updating a video. For example, the statistics object encapsulates statistics that YouTube calculates for a video and does not contain values that you can set or modify. If the parameter value specifies a part that does not contain mutable values, that part will still be included in the API response."
            },
            "autoLevels": {
              "location": "query",
              "type": "boolean",
              "description": "Should auto-levels be applied to the upload."
            },
            "onBehalfOfContentOwnerChannel": {
              "type": "string",
              "location": "query",
              "description": "This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel."
            },
            "stabilize": {
              "location": "query",
              "description": "Should stabilize be applied to the upload.",
              "type": "boolean"
            },
            "onBehalfOfContentOwner": {
              "type": "string",
              "location": "query",
              "description": "*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."
            },
            "notifySubscribers": {
              "description": "Notify the channel subscribers about the new video. As default, the notification is enabled.",
              "location": "query",
              "default": "true",
              "type": "boolean"
            }
          },
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtube.upload",
            "https://www.googleapis.com/auth/youtubepartner"
          ],
          "parameterOrder": [
            "part"
          ],
          "path": "youtube/v3/videos",
          "mediaUpload": {
            "protocols": {
              "resumable": {
                "multipart": true,
                "path": "/resumable/upload/youtube/v3/videos"
              },
              "simple": {
                "multipart": true,
                "path": "/upload/youtube/v3/videos"
              }
            },
            "accept": [
              "video/*",
              "application/octet-stream"
            ],
            "maxSize": "137438953472"
          },
          "flatPath": "youtube/v3/videos",
          "response": {
            "$ref": "Video"
          },
          "description": "Inserts a new resource into this collection."
        },
        "reportAbuse": {
          "httpMethod": "POST",
          "id": "youtube.videos.reportAbuse",
          "request": {
            "$ref": "VideoAbuseReport"
          },
          "flatPath": "youtube/v3/videos/reportAbuse",
          "path": "youtube/v3/videos/reportAbuse",
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtubepartner"
          ],
          "description": "Report abuse for a video.",
          "parameters": {
            "onBehalfOfContentOwner": {
              "type": "string",
              "description": "*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.",
              "location": "query"
            }
          },
          "parameterOrder": []
        },
        "rate": {
          "flatPath": "youtube/v3/videos/rate",
          "description": "Adds a like or dislike rating to a video or removes a rating from a video.",
          "path": "youtube/v3/videos/rate",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl",
            "https://www.googleapis.com/auth/youtubepartner"
          ],
          "parameterOrder": [
            "id",
            "rating"
          ],
          "id": "youtube.videos.rate",
          "parameters": {
            "id": {
              "required": true,
              "location": "query",
              "type": "string"
            },
            "rating": {
              "enum": [
                "none",
                "like",
                "dislike"
              ],
              "type": "string",
              "location": "query",
              "required": true,
              "enumDescriptions": [
                "",
                "The entity is liked.",
                "The entity is disliked."
              ]
            }
          }
        }
      }
    },
    "abuseReports": {
      "methods": {
        "insert": {
          "flatPath": "youtube/v3/abuseReports",
          "id": "youtube.abuseReports.insert",
          "parameterOrder": [
            "part"
          ],
          "parameters": {
            "part": {
              "repeated": true,
              "required": true,
              "description": "The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.",
              "location": "query",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/youtube",
            "https://www.googleapis.com/auth/youtube.force-ssl"
          ],
          "description": "Inserts a new resource into this collection.",
          "request": {
            "$ref": "AbuseReport"
          },
          "path": "youtube/v3/abuseReports",
          "response": {
            "$ref": "AbuseReport"
          },
          "httpMethod": "POST"
        }
      }
    }
  },
  "baseUrl": "https://youtube.googleapis.com/",
  "revision": "20210406",
  "batchPath": "batch",
  "version": "v3",
  "canonicalName": "YouTube",
  "schemas": {
    "ChannelContentOwnerDetails": {
      "properties": {
        "timeLinked": {
          "type": "string",
          "description": "The date and time when the channel was linked to the content owner.",
          "format": "date-time"
        },
        "contentOwner": {
          "description": "The ID of the content owner linked to the channel.",
          "type": "string"
        }
      },
      "description": "The contentOwnerDetails object encapsulates channel data that is relevant for YouTube Partners linked with the channel.",
      "id": "ChannelContentOwnerDetails",
      "type": "object"
    },
    "VideoProcessingDetails": {
      "type": "object",
      "id": "VideoProcessingDetails",
      "properties": {
        "processingStatus": {
          "type": "string",
          "enum": [
            "processing",
            "succeeded",
            "failed",
            "terminated"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "description": "The video's processing status. This value indicates whether YouTube was able to process the video or if the video is still being processed."
        },
        "processingFailureReason": {
          "description": "The reason that YouTube failed to process the video. This property will only have a value if the processingStatus property's value is failed.",
          "enum": [
            "uploadFailed",
            "transcodeFailed",
            "streamingFailed",
            "other"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "editorSuggestionsAvailability": {
          "description": "This value indicates whether video editing suggestions, which might improve video quality or the playback experience, are available for the video. You can retrieve these suggestions by requesting the suggestions part in your videos.list() request.",
          "type": "string"
        },
        "processingProgress": {
          "description": "The processingProgress object contains information about the progress YouTube has made in processing the video. The values are really only relevant if the video's processing status is processing.",
          "$ref": "VideoProcessingDetailsProcessingProgress"
        },
        "tagSuggestionsAvailability": {
          "type": "string",
          "description": "This value indicates whether keyword (tag) suggestions are available for the video. Tags can be added to a video's metadata to make it easier for other users to find the video. You can retrieve these suggestions by requesting the suggestions part in your videos.list() request."
        },
        "thumbnailsAvailability": {
          "type": "string",
          "description": "This value indicates whether thumbnail images have been generated for the video."
        },
        "fileDetailsAvailability": {
          "type": "string",
          "description": "This value indicates whether file details are available for the uploaded video. You can retrieve a video's file details by requesting the fileDetails part in your videos.list() request."
        },
        "processingIssuesAvailability": {
          "description": "This value indicates whether the video processing engine has generated suggestions that might improve YouTube's ability to process the the video, warnings that explain video processing problems, or errors that cause video processing problems. You can retrieve these suggestions by requesting the suggestions part in your videos.list() request.",
          "type": "string"
        }
      },
      "description": "Describes processing status and progress and availability of some other Video resource parts."
    },
    "Comment": {
      "description": "A *comment* represents a single YouTube comment.",
      "id": "Comment",
      "properties": {
        "etag": {
          "type": "string",
          "description": "Etag of this resource."
        },
        "kind": {
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#comment\".",
          "default": "youtube#comment",
          "type": "string"
        },
        "snippet": {
          "$ref": "CommentSnippet",
          "description": "The snippet object contains basic details about the comment."
        },
        "id": {
          "type": "string",
          "description": "The ID that YouTube uses to uniquely identify the comment."
        }
      },
      "type": "object"
    },
    "Video": {
      "description": "A *video* resource represents a YouTube video.",
      "type": "object",
      "id": "Video",
      "properties": {
        "contentDetails": {
          "description": "The contentDetails object contains information about the video content, including the length of the video and its aspect ratio.",
          "$ref": "VideoContentDetails"
        },
        "player": {
          "$ref": "VideoPlayer",
          "description": "The player object contains information that you would use to play the video in an embedded player."
        },
        "etag": {
          "type": "string",
          "description": "Etag of this resource."
        },
        "statistics": {
          "description": "The statistics object contains statistics about the video.",
          "$ref": "VideoStatistics"
        },
        "id": {
          "type": "string",
          "annotations": {
            "required": [
              "youtube.videos.update"
            ]
          },
          "description": "The ID that YouTube uses to uniquely identify the video."
        },
        "topicDetails": {
          "$ref": "VideoTopicDetails",
          "description": "The topicDetails object encapsulates information about Freebase topics associated with the video."
        },
        "processingDetails": {
          "description": "The processingDetails object encapsulates information about YouTube's progress in processing the uploaded video file. The properties in the object identify the current processing status and an estimate of the time remaining until YouTube finishes processing the video. This part also indicates whether different types of data or content, such as file details or thumbnail images, are available for the video. The processingProgress object is designed to be polled so that the video uploaded can track the progress that YouTube has made in processing the uploaded video file. This data can only be retrieved by the video owner.",
          "$ref": "VideoProcessingDetails"
        },
        "snippet": {
          "$ref": "VideoSnippet",
          "description": "The snippet object contains basic details about the video, such as its title, description, and category."
        },
        "monetizationDetails": {
          "$ref": "VideoMonetizationDetails",
          "description": "The monetizationDetails object encapsulates information about the monetization status of the video."
        },
        "fileDetails": {
          "description": "The fileDetails object encapsulates information about the video file that was uploaded to YouTube, including the file's resolution, duration, audio and video codecs, stream bitrates, and more. This data can only be retrieved by the video owner.",
          "$ref": "VideoFileDetails"
        },
        "projectDetails": {
          "$ref": "VideoProjectDetails",
          "description": "The projectDetails object contains information about the project specific video metadata. b/157517979: This part was never populated after it was added. However, it sees non-zero traffic because there is generated client code in the wild that refers to it [1]. We keep this field and do NOT remove it because otherwise V3 would return an error when this part gets requested [2]. [1] https://developers.google.com/resources/api-libraries/documentation/youtube/v3/csharp/latest/classGoogle_1_1Apis_1_1YouTube_1_1v3_1_1Data_1_1VideoProjectDetails.html [2] http://google3/video/youtube/src/python/servers/data_api/common.py?l=1565-1569&rcl=344141677"
        },
        "localizations": {
          "description": "The localizations object contains localized versions of the basic details about the video, such as its title and description.",
          "type": "object",
          "additionalProperties": {
            "$ref": "VideoLocalization"
          }
        },
        "ageGating": {
          "$ref": "VideoAgeGating",
          "description": "Age restriction details related to a video. This data can only be retrieved by the video owner."
        },
        "status": {
          "description": "The status object contains information about the video's uploading, processing, and privacy statuses.",
          "$ref": "VideoStatus"
        },
        "liveStreamingDetails": {
          "description": "The liveStreamingDetails object contains metadata about a live video broadcast. The object will only be present in a video resource if the video is an upcoming, live, or completed live broadcast.",
          "$ref": "VideoLiveStreamingDetails"
        },
        "recordingDetails": {
          "description": "The recordingDetails object encapsulates information about the location, date and address where the video was recorded.",
          "$ref": "VideoRecordingDetails"
        },
        "suggestions": {
          "$ref": "VideoSuggestions",
          "description": "The suggestions object encapsulates suggestions that identify opportunities to improve the video quality or the metadata for the uploaded video. This data can only be retrieved by the video owner."
        },
        "kind": {
          "default": "youtube#video",
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#video\".",
          "type": "string"
        }
      }
    },
    "ChannelTopicDetails": {
      "id": "ChannelTopicDetails",
      "type": "object",
      "description": "Freebase topic information related to the channel.",
      "properties": {
        "topicCategories": {
          "description": "A list of Wikipedia URLs that describe the channel's content.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "topicIds": {
          "description": "A list of Freebase topic IDs associated with the channel. You can retrieve information about each topic using the Freebase Topic API.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      }
    },
    "ResourceId": {
      "description": "A resource id is a generic reference that points to another YouTube resource.",
      "type": "object",
      "id": "ResourceId",
      "properties": {
        "playlistId": {
          "description": "The ID that YouTube uses to uniquely identify the referred resource, if that resource is a playlist. This property is only present if the resourceId.kind value is youtube#playlist.",
          "type": "string"
        },
        "videoId": {
          "type": "string",
          "description": "The ID that YouTube uses to uniquely identify the referred resource, if that resource is a video. This property is only present if the resourceId.kind value is youtube#video."
        },
        "channelId": {
          "description": "The ID that YouTube uses to uniquely identify the referred resource, if that resource is a channel. This property is only present if the resourceId.kind value is youtube#channel.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource."
        }
      }
    },
    "CaptionSnippet": {
      "id": "CaptionSnippet",
      "properties": {
        "language": {
          "annotations": {
            "required": [
              "youtube.captions.insert"
            ]
          },
          "description": "The language of the caption track. The property value is a BCP-47 language tag.",
          "type": "string"
        },
        "isAutoSynced": {
          "description": "Indicates whether YouTube synchronized the caption track to the audio track in the video. The value will be true if a sync was explicitly requested when the caption track was uploaded. For example, when calling the captions.insert or captions.update methods, you can set the sync parameter to true to instruct YouTube to sync the uploaded track to the video. If the value is false, YouTube uses the time codes in the uploaded caption track to determine when to display captions.",
          "type": "boolean"
        },
        "isDraft": {
          "description": "Indicates whether the caption track is a draft. If the value is true, then the track is not publicly visible. The default value is false. @mutable youtube.captions.insert youtube.captions.update",
          "type": "boolean"
        },
        "videoId": {
          "annotations": {
            "required": [
              "youtube.captions.insert"
            ]
          },
          "type": "string",
          "description": "The ID that YouTube uses to uniquely identify the video associated with the caption track. @mutable youtube.captions.insert"
        },
        "trackKind": {
          "description": "The caption track's type.",
          "enum": [
            "standard",
            "ASR",
            "forced"
          ],
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            ""
          ]
        },
        "isCC": {
          "description": "Indicates whether the track contains closed captions for the deaf and hard of hearing. The default value is false.",
          "type": "boolean"
        },
        "lastUpdated": {
          "description": "The date and time when the caption track was last updated.",
          "type": "string",
          "format": "date-time"
        },
        "isLarge": {
          "type": "boolean",
          "description": "Indicates whether the caption track uses large text for the vision-impaired. The default value is false."
        },
        "name": {
          "description": "The name of the caption track. The name is intended to be visible to the user as an option during playback.",
          "type": "string",
          "annotations": {
            "required": [
              "youtube.captions.insert"
            ]
          }
        },
        "status": {
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "enum": [
            "serving",
            "syncing",
            "failed"
          ],
          "description": "The caption track's status.",
          "type": "string"
        },
        "failureReason": {
          "description": "The reason that YouTube failed to process the caption track. This property is only present if the state property's value is failed.",
          "enum": [
            "unknownFormat",
            "unsupportedFormat",
            "processingFailed"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "isEasyReader": {
          "description": "Indicates whether caption track is formatted for \"easy reader,\" meaning it is at a third-grade level for language learners. The default value is false.",
          "type": "boolean"
        },
        "audioTrackType": {
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "unknown",
            "primary",
            "commentary",
            "descriptive"
          ],
          "type": "string",
          "description": "The type of audio track associated with the caption track."
        }
      },
      "description": "Basic details about a caption track, such as its language and name.",
      "type": "object"
    },
    "VideoListResponse": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "default": "youtube#videoListResponse",
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#videoListResponse\"."
        },
        "etag": {
          "type": "string",
          "description": "Etag of this resource."
        },
        "tokenPagination": {
          "$ref": "TokenPagination"
        },
        "visitorId": {
          "type": "string",
          "description": "The visitorId identifies the visitor."
        },
        "items": {
          "items": {
            "$ref": "Video"
          },
          "type": "array"
        },
        "eventId": {
          "type": "string",
          "description": "Serialized EventId of the request which produced this response."
        },
        "nextPageToken": {
          "type": "string",
          "description": "The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set."
        },
        "pageInfo": {
          "$ref": "PageInfo",
          "description": "General pagination information."
        },
        "prevPageToken": {
          "description": "The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.",
          "type": "string"
        }
      },
      "id": "VideoListResponse"
    },
    "PlaylistItem": {
      "description": "A *playlistItem* resource identifies another resource, such as a video, that is included in a playlist. In addition, the playlistItem resource contains details about the included resource that pertain specifically to how that resource is used in that playlist. YouTube uses playlists to identify special collections of videos for a channel, such as: - uploaded videos - favorite videos - positively rated (liked) videos - watch history - watch later To be more specific, these lists are associated with a channel, which is a collection of a person, group, or company's videos, playlists, and other YouTube information. You can retrieve the playlist IDs for each of these lists from the channel resource for a given channel. You can then use the playlistItems.list method to retrieve any of those lists. You can also add or remove items from those lists by calling the playlistItems.insert and playlistItems.delete methods. For example, if a user gives a positive rating to a video, you would insert that video into the liked videos playlist for that user's channel.",
      "type": "object",
      "id": "PlaylistItem",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID that YouTube uses to uniquely identify the playlist item."
        },
        "etag": {
          "description": "Etag of this resource.",
          "type": "string"
        },
        "contentDetails": {
          "description": "The contentDetails object is included in the resource if the included item is a YouTube video. The object contains additional information about the video.",
          "$ref": "PlaylistItemContentDetails"
        },
        "status": {
          "description": "The status object contains information about the playlist item's privacy status.",
          "$ref": "PlaylistItemStatus"
        },
        "snippet": {
          "$ref": "PlaylistItemSnippet",
          "description": "The snippet object contains basic details about the playlist item, such as its title and position in the playlist."
        },
        "kind": {
          "type": "string",
          "default": "youtube#playlistItem",
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#playlistItem\"."
        }
      }
    },
    "LanguageTag": {
      "id": "LanguageTag",
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        }
      }
    },
    "ChannelStatistics": {
      "properties": {
        "commentCount": {
          "description": "The number of comments for the channel.",
          "format": "uint64",
          "type": "string"
        },
        "subscriberCount": {
          "description": "The number of subscribers that the channel has.",
          "type": "string",
          "format": "uint64"
        },
        "videoCount": {
          "type": "string",
          "format": "uint64",
          "description": "The number of videos uploaded to the channel."
        },
        "viewCount": {
          "description": "The number of times the channel has been viewed.",
          "type": "string",
          "format": "uint64"
        },
        "hiddenSubscriberCount": {
          "description": "Whether or not the number of subscribers is shown for this user.",
          "type": "boolean"
        }
      },
      "description": "Statistics about a channel: number of subscribers, number of videos in the channel, etc.",
      "type": "object",
      "id": "ChannelStatistics"
    },
    "VideoMonetizationDetails": {
      "description": "Details about monetization of a YouTube Video.",
      "properties": {
        "access": {
          "$ref": "AccessPolicy",
          "description": "The value of access indicates whether the video can be monetized or not."
        }
      },
      "type": "object",
      "id": "VideoMonetizationDetails"
    },
    "LiveChatMessage": {
      "properties": {
        "authorDetails": {
          "$ref": "LiveChatMessageAuthorDetails",
          "description": "The authorDetails object contains basic details about the user that posted this message."
        },
        "etag": {
          "type": "string",
          "description": "Etag of this resource."
        },
        "kind": {
          "default": "youtube#liveChatMessage",
          "type": "string",
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#liveChatMessage\"."
        },
        "id": {
          "description": "The ID that YouTube assigns to uniquely identify the message.",
          "type": "string"
        },
        "snippet": {
          "description": "The snippet object contains basic details about the message.",
          "$ref": "LiveChatMessageSnippet"
        }
      },
      "type": "object",
      "id": "LiveChatMessage",
      "description": "A *liveChatMessage* resource represents a chat message in a YouTube Live Chat."
    },
    "CommentThreadListResponse": {
      "properties": {
        "tokenPagination": {
          "$ref": "TokenPagination"
        },
        "visitorId": {
          "description": "The visitorId identifies the visitor.",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string",
          "description": "The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set."
        },
        "etag": {
          "type": "string",
          "description": "Etag of this resource."
        },
        "kind": {
          "default": "youtube#commentThreadListResponse",
          "type": "string",
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#commentThreadListResponse\"."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "CommentThread"
          },
          "description": "A list of comment threads that match the request criteria."
        },
        "eventId": {
          "type": "string",
          "description": "Serialized EventId of the request which produced this response."
        },
        "pageInfo": {
          "description": "General pagination information.",
          "$ref": "PageInfo"
        }
      },
      "id": "CommentThreadListResponse",
      "type": "object"
    },
    "VideoContentDetailsRegionRestriction": {
      "properties": {
        "blocked": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "A list of region codes that identify countries where the video is blocked. If this property is present and a country is not listed in its value, then the video is viewable in that country. If this property is present and contains an empty list, the video is viewable in all countries."
        },
        "allowed": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "A list of region codes that identify countries where the video is viewable. If this property is present and a country is not listed in its value, then the video is blocked from appearing in that country. If this property is present and contains an empty list, the video is blocked in all countries."
        }
      },
      "id": "VideoContentDetailsRegionRestriction",
      "type": "object",
      "description": "DEPRECATED Region restriction of the video."
    },
    "MonitorStreamInfo": {
      "type": "object",
      "properties": {
        "embedHtml": {
          "type": "string",
          "description": "HTML code that embeds a player that plays the monitor stream."
        },
        "enableMonitorStream": {
          "description": "This value determines whether the monitor stream is enabled for the broadcast. If the monitor stream is enabled, then YouTube will broadcast the event content on a special stream intended only for the broadcaster's consumption. The broadcaster can use the stream to review the event content and also to identify the optimal times to insert cuepoints. You need to set this value to true if you intend to have a broadcast delay for your event. *Note:* This property cannot be updated once the broadcast is in the testing or live state.",
          "annotations": {
            "required": [
              "youtube.liveBroadcasts.update"
            ]
          },
          "type": "boolean"
        },
        "broadcastStreamDelayMs": {
          "annotations": {
            "required": [
              "youtube.liveBroadcasts.update"
            ]
          },
          "format": "uint32",
          "type": "integer",
          "description": "If you have set the enableMonitorStream property to true, then this property determines the length of the live broadcast delay."
        }
      },
      "description": "Settings and Info of the monitor stream",
      "id": "MonitorStreamInfo"
    },
    "PlaylistStatus": {
      "type": "object",
      "properties": {
        "privacyStatus": {
          "enum": [
            "public",
            "unlisted",
            "private"
          ],
          "type": "string",
          "description": "The playlist's privacy status.",
          "enumDescriptions": [
            "",
            "",
            ""
          ]
        }
      },
      "id": "PlaylistStatus"
    },
    "InvideoTiming": {
      "id": "InvideoTiming",
      "type": "object",
      "properties": {
        "type": {
          "description": "Describes a timing type. If the value is offsetFromStart, then the offsetMs field represents an offset from the start of the video. If the value is offsetFromEnd, then the offsetMs field represents an offset from the end of the video.",
          "enumDescriptions": [
            "",
            ""
          ],
          "enum": [
            "offsetFromStart",
            "offsetFromEnd"
          ],
          "type": "string"
        },
        "durationMs": {
          "type": "string",
          "format": "uint64",
          "description": "Defines the duration in milliseconds for which the promotion should be displayed. If missing, the client should use the default."
        },
        "offsetMs": {
          "description": "Defines the time at which the promotion will appear. Depending on the value of type the value of the offsetMs field will represent a time offset from the start or from the end of the video, expressed in milliseconds.",
          "format": "uint64",
          "type": "string"
        }
      },
      "description": "Describes a temporal position of a visual widget inside a video."
    },
    "ActivityContentDetails": {
      "description": "Details about the content of an activity: the video that was shared, the channel that was subscribed to, etc.",
      "type": "object",
      "properties": {
        "social": {
          "description": "The social object contains details about a social network post. This property is only present if the snippet.type is social.",
          "$ref": "ActivityContentDetailsSocial"
        },
        "promotedItem": {
          "$ref": "ActivityContentDetailsPromotedItem",
          "description": "The promotedItem object contains details about a resource which is being promoted. This property is only present if the snippet.type is promotedItem."
        },
        "upload": {
          "$ref": "ActivityContentDetailsUpload",
          "description": "The upload object contains information about the uploaded video. This property is only present if the snippet.type is upload."
        },
        "playlistItem": {
          "$ref": "ActivityContentDetailsPlaylistItem",
          "description": "The playlistItem object contains information about a new playlist item. This property is only present if the snippet.type is playlistItem."
        },
        "bulletin": {
          "description": "The bulletin object contains details about a channel bulletin post. This object is only present if the snippet.type is bulletin.",
          "$ref": "ActivityContentDetailsBulletin"
        },
        "channelItem": {
          "description": "The channelItem object contains details about a resource which was added to a channel. This property is only present if the snippet.type is channelItem.",
          "$ref": "ActivityContentDetailsChannelItem"
        },
        "comment": {
          "$ref": "ActivityContentDetailsComment",
          "description": "The comment object contains information about a resource that received a comment. This property is only present if the snippet.type is comment."
        },
        "favorite": {
          "$ref": "ActivityContentDetailsFavorite",
          "description": "The favorite object contains information about a video that was marked as a favorite video. This property is only present if the snippet.type is favorite."
        },
        "like": {
          "description": "The like object contains information about a resource that received a positive (like) rating. This property is only present if the snippet.type is like.",
          "$ref": "ActivityContentDetailsLike"
        },
        "recommendation": {
          "description": "The recommendation object contains information about a recommended resource. This property is only present if the snippet.type is recommendation.",
          "$ref": "ActivityContentDetailsRecommendation"
        },
        "subscription": {
          "$ref": "ActivityContentDetailsSubscription",
          "description": "The subscription object contains information about a channel that a user subscribed to. This property is only present if the snippet.type is subscription."
        }
      },
      "id": "ActivityContentDetails"
    },
    "LiveStreamHealthStatus": {
      "properties": {
        "status": {
          "enum": [
            "good",
            "ok",
            "bad",
            "noData",
            "revoked"
          ],
          "type": "string",
          "description": "The status code of this stream",
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            ""
          ]
        },
        "configurationIssues": {
          "description": "The configurations issues on this stream",
          "items": {
            "$ref": "LiveStreamConfigurationIssue"
          },
          "type": "array"
        },
        "lastUpdateTimeSeconds": {
          "format": "uint64",
          "type": "string",
          "description": "The last time this status was updated (in seconds)"
        }
      },
      "type": "object",
      "id": "LiveStreamHealthStatus"
    },
    "ChannelConversionPings": {
      "properties": {
        "pings": {
          "description": "Pings that the app shall fire (authenticated by biscotti cookie). Each ping has a context, in which the app must fire the ping, and a url identifying the ping.",
          "type": "array",
          "items": {
            "$ref": "ChannelConversionPing"
          }
        }
      },
      "id": "ChannelConversionPings",
      "description": "The conversionPings object encapsulates information about conversion pings that need to be respected by the channel.",
      "type": "object"
    },
    "VideoStatistics": {
      "description": "Statistics about the video, such as the number of times the video was viewed or liked.",
      "id": "VideoStatistics",
      "type": "object",
      "properties": {
        "commentCount": {
          "format": "uint64",
          "description": "The number of comments for the video.",
          "type": "string"
        },
        "likeCount": {
          "description": "The number of users who have indicated that they liked the video by giving it a positive rating.",
          "type": "string",
          "format": "uint64"
        },
        "viewCount": {
          "type": "string",
          "format": "uint64",
          "description": "The number of times the video has been viewed."
        },
        "favoriteCount": {
          "format": "uint64",
          "description": "The number of users who currently have the video marked as a favorite video.",
          "type": "string"
        },
        "dislikeCount": {
          "format": "uint64",
          "description": "The number of users who have indicated that they disliked the video by giving it a negative rating.",
          "type": "string"
        }
      }
    },
    "MemberSnippet": {
      "id": "MemberSnippet",
      "type": "object",
      "properties": {
        "membershipsDetails": {
          "description": "Details about the user's membership.",
          "$ref": "MembershipsDetails"
        },
        "memberDetails": {
          "description": "Details about the member.",
          "$ref": "ChannelProfileDetails"
        },
        "creatorChannelId": {
          "type": "string",
          "description": "The id of the channel that's offering memberships."
        }
      }
    },
    "ActivityContentDetailsPromotedItem": {
      "id": "ActivityContentDetailsPromotedItem",
      "description": "Details about a resource which is being promoted.",
      "type": "object",
      "properties": {
        "descriptionText": {
          "description": "The text description to accompany the promoted item.",
          "type": "string"
        },
        "impressionUrl": {
          "items": {
            "type": "string"
          },
          "description": "The list of impression URLs. The client should ping all of these URLs to indicate that the user was shown this promoted item.",
          "type": "array"
        },
        "ctaType": {
          "type": "string",
          "enum": [
            "ctaTypeUnspecified",
            "visitAdvertiserSite"
          ],
          "description": "The type of call-to-action, a message to the user indicating action that can be taken.",
          "enumDescriptions": [
            "",
            ""
          ]
        },
        "clickTrackingUrl": {
          "description": "The URL the client should ping to indicate that the user clicked through on this promoted item.",
          "type": "string"
        },
        "customCtaButtonText": {
          "type": "string",
          "description": "The custom call-to-action button text. If specified, it will override the default button text for the cta_type."
        },
        "forecastingUrl": {
          "description": "The list of forecasting URLs. The client should ping all of these URLs when a promoted item is not available, to indicate that a promoted item could have been shown.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "adTag": {
          "type": "string",
          "description": "The URL the client should fetch to request a promoted item."
        },
        "creativeViewUrl": {
          "type": "string",
          "description": "The URL the client should ping to indicate that the user was shown this promoted item."
        },
        "videoId": {
          "type": "string",
          "description": "The ID that YouTube uses to uniquely identify the promoted video."
        },
        "destinationUrl": {
          "description": "The URL the client should direct the user to, if the user chooses to visit the advertiser's website.",
          "type": "string"
        }
      }
    },
    "Channel": {
      "id": "Channel",
      "type": "object",
      "description": "A *channel* resource contains information about a YouTube channel.",
      "properties": {
        "conversionPings": {
          "description": "The conversionPings object encapsulates information about conversion pings that need to be respected by the channel.",
          "$ref": "ChannelConversionPings"
        },
        "status": {
          "$ref": "ChannelStatus",
          "description": "The status object encapsulates information about the privacy status of the channel."
        },
        "statistics": {
          "description": "The statistics object encapsulates statistics for the channel.",
          "$ref": "ChannelStatistics"
        },
        "id": {
          "type": "string",
          "description": "The ID that YouTube uses to uniquely identify the channel."
        },
        "contentOwnerDetails": {
          "description": "The contentOwnerDetails object encapsulates channel data that is relevant for YouTube Partners linked with the channel.",
          "$ref": "ChannelContentOwnerDetails"
        },
        "etag": {
          "description": "Etag of this resource.",
          "type": "string"
        },
        "brandingSettings": {
          "description": "The brandingSettings object encapsulates information about the branding of the channel.",
          "$ref": "ChannelBrandingSettings"
        },
        "topicDetails": {
          "$ref": "ChannelTopicDetails",
          "description": "The topicDetails object encapsulates information about Freebase topics associated with the channel."
        },
        "kind": {
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#channel\".",
          "type": "string",
          "default": "youtube#channel"
        },
        "snippet": {
          "$ref": "ChannelSnippet",
          "description": "The snippet object contains basic details about the channel, such as its title, description, and thumbnail images."
        },
        "localizations": {
          "description": "Localizations for different languages",
          "additionalProperties": {
            "$ref": "ChannelLocalization"
          },
          "type": "object"
        },
        "auditDetails": {
          "$ref": "ChannelAuditDetails",
          "description": "The auditionDetails object encapsulates channel data that is relevant for YouTube Partners during the audition process."
        },
        "contentDetails": {
          "$ref": "ChannelContentDetails",
          "description": "The contentDetails object encapsulates information about the channel's content."
        }
      }
    },
    "LocalizedString": {
      "id": "LocalizedString",
      "properties": {
        "language": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "LiveChatModeratorSnippet": {
      "type": "object",
      "id": "LiveChatModeratorSnippet",
      "properties": {
        "liveChatId": {
          "type": "string",
          "description": "The ID of the live chat this moderator can act on."
        },
        "moderatorDetails": {
          "description": "Details about the moderator.",
          "$ref": "ChannelProfileDetails"
        }
      }
    },
    "ChannelLocalization": {
      "description": "Channel localization setting",
      "properties": {
        "description": {
          "description": "The localized strings for channel's description.",
          "type": "string"
        },
        "title": {
          "type": "string",
          "description": "The localized strings for channel's title."
        }
      },
      "id": "ChannelLocalization",
      "type": "object"
    },
    "LiveChatMessageListResponse": {
      "id": "LiveChatMessageListResponse",
      "type": "object",
      "properties": {
        "kind": {
          "default": "youtube#liveChatMessageListResponse",
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#liveChatMessageListResponse\".",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "LiveChatMessage"
          }
        },
        "offlineAt": {
          "description": "The date and time when the underlying stream went offline.",
          "format": "date-time",
          "type": "string"
        },
        "tokenPagination": {
          "$ref": "TokenPagination"
        },
        "visitorId": {
          "description": "The visitorId identifies the visitor.",
          "type": "string"
        },
        "pageInfo": {
          "$ref": "PageInfo",
          "description": "General pagination information."
        },
        "eventId": {
          "type": "string",
          "description": "Serialized EventId of the request which produced this response."
        },
        "nextPageToken": {
          "type": "string"
        },
        "pollingIntervalMillis": {
          "format": "uint32",
          "description": "The amount of time the client should wait before polling again.",
          "type": "integer"
        },
        "etag": {
          "description": "Etag of this resource.",
          "type": "string"
        }
      }
    },
    "PlaylistSnippet": {
      "type": "object",
      "id": "PlaylistSnippet",
      "description": "Basic details about a playlist, including title, description and thumbnails.",
      "properties": {
        "publishedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time that the playlist was created."
        },
        "description": {
          "type": "string",
          "description": "The playlist's description."
        },
        "thumbnails": {
          "description": "A map of thumbnail images associated with the playlist. For each object in the map, the key is the name of the thumbnail image, and the value is an object that contains other information about the thumbnail.",
          "$ref": "ThumbnailDetails"
        },
        "defaultLanguage": {
          "description": "The language of the playlist's default title and description.",
          "type": "string"
        },
        "channelId": {
          "description": "The ID that YouTube uses to uniquely identify the channel that published the playlist.",
          "type": "string"
        },
        "channelTitle": {
          "description": "The channel title of the channel that the video belongs to.",
          "type": "string"
        },
        "thumbnailVideoId": {
          "type": "string",
          "description": "Note: if the playlist has a custom thumbnail, this field will not be populated. The video id selected by the user that will be used as the thumbnail of this playlist. This field defaults to the first publicly viewable video in the playlist, if: 1. The user has never selected a video to be the thumbnail of the playlist. 2. The user selects a video to be the thumbnail, and then removes that video from the playlist. 3. The user selects a non-owned video to be the thumbnail, but that video becomes private, or gets deleted."
        },
        "tags": {
          "description": "Keyword tags associated with the playlist.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "localized": {
          "$ref": "PlaylistLocalization",
          "description": "Localized title and description, read-only."
        },
        "title": {
          "type": "string",
          "description": "The playlist's title.",
          "annotations": {
            "required": [
              "youtube.playlists.insert"
            ]
          }
        }
      }
    },
    "I18nLanguage": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#i18nLanguage\".",
          "default": "youtube#i18nLanguage"
        },
        "id": {
          "description": "The ID that YouTube uses to uniquely identify the i18n language.",
          "type": "string"
        },
        "etag": {
          "description": "Etag of this resource.",
          "type": "string"
        },
        "snippet": {
          "description": "The snippet object contains basic details about the i18n language, such as language code and human-readable name.",
          "$ref": "I18nLanguageSnippet"
        }
      },
      "description": "An *i18nLanguage* resource identifies a UI language currently supported by YouTube.",
      "id": "I18nLanguage"
    },
    "VideoPlayer": {
      "id": "VideoPlayer",
      "description": "Player to be used for a video playback.",
      "type": "object",
      "properties": {
        "embedHeight": {
          "format": "int64",
          "type": "string"
        },
        "embedWidth": {
          "description": "The embed width",
          "type": "string",
          "format": "int64"
        },
        "embedHtml": {
          "type": "string",
          "description": "An \u003ciframe\u003e tag that embeds a player that will play the video."
        }
      }
    },
    "TokenPagination": {
      "properties": {},
      "id": "TokenPagination",
      "description": "Stub token pagination template to suppress results.",
      "type": "object"
    },
    "LiveChatBanSnippet": {
      "type": "object",
      "id": "LiveChatBanSnippet",
      "properties": {
        "banDurationSeconds": {
          "format": "uint64",
          "description": "The duration of a ban, only filled if the ban has type TEMPORARY.",
          "type": "string"
        },
        "liveChatId": {
          "type": "string",
          "description": "The chat this ban is pertinent to."
        },
        "type": {
          "type": "string",
          "description": "The type of ban.",
          "enum": [
            "liveChatBanTypeUnspecified",
            "permanent",
            "temporary"
          ],
          "enumDescriptions": [
            "An invalid ban type.",
            "A permanent ban.",
            "A temporary ban."
          ]
        },
        "bannedUserDetails": {
          "$ref": "ChannelProfileDetails"
        }
      }
    },
    "VideoLocalization": {
      "description": "Localized versions of certain video properties (e.g. title).",
      "properties": {
        "title": {
          "type": "string",
          "description": "Localized version of the video's title."
        },
        "description": {
          "description": "Localized version of the video's description.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "VideoLocalization"
    },
    "VideoAbuseReport": {
      "type": "object",
      "properties": {
        "videoId": {
          "type": "string",
          "description": "The ID that YouTube uses to uniquely identify the video."
        },
        "comments": {
          "type": "string",
          "description": "Additional comments regarding the abuse report."
        },
        "reasonId": {
          "description": "The high-level, or primary, reason that the content is abusive. The value is an abuse report reason ID.",
          "type": "string"
        },
        "language": {
          "type": "string",
          "description": "The language that the content was viewed in."
        },
        "secondaryReasonId": {
          "type": "string",
          "description": "The specific, or secondary, reason that this content is abusive (if available). The value is an abuse report reason ID that is a valid secondary reason for the primary reason."
        }
      },
      "id": "VideoAbuseReport"
    },
    "RelatedEntity": {
      "type": "object",
      "id": "RelatedEntity",
      "properties": {
        "entity": {
          "$ref": "Entity"
        }
      }
    },
    "ChannelSettings": {
      "id": "ChannelSettings",
      "description": "Branding properties for the channel view.",
      "properties": {
        "featuredChannelsTitle": {
          "description": "Title for the featured channels tab.",
          "type": "string"
        },
        "profileColor": {
          "description": "A prominent color that can be rendered on this channel page.",
          "type": "string"
        },
        "showRelatedChannels": {
          "description": "Whether related channels should be proposed.",
          "type": "boolean"
        },
        "defaultLanguage": {
          "type": "string"
        },
        "unsubscribedTrailer": {
          "description": "The trailer of the channel, for users that are not subscribers.",
          "type": "string"
        },
        "keywords": {
          "type": "string",
          "description": "Lists keywords associated with the channel, comma-separated."
        },
        "featuredChannelsUrls": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of featured channels."
        },
        "title": {
          "type": "string",
          "description": "Specifies the channel title."
        },
        "trackingAnalyticsAccountId": {
          "description": "The ID for a Google Analytics account to track and measure traffic to the channels.",
          "type": "string"
        },
        "defaultTab": {
          "type": "string",
          "description": "Which content tab users should see when viewing the channel."
        },
        "country": {
          "description": "The country of the channel.",
          "type": "string"
        },
        "showBrowseView": {
          "type": "boolean",
          "description": "Whether the tab to browse the videos should be displayed."
        },
        "description": {
          "type": "string",
          "description": "Specifies the channel description."
        },
        "moderateComments": {
          "description": "Whether user-submitted comments left on the channel page need to be approved by the channel owner to be publicly visible.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ChannelSectionContentDetails": {
      "id": "ChannelSectionContentDetails",
      "type": "object",
      "properties": {
        "playlists": {
          "type": "array",
          "description": "The playlist ids for type single_playlist and multiple_playlists. For singlePlaylist, only one playlistId is allowed.",
          "items": {
            "type": "string"
          }
        },
        "channels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The channel ids for type multiple_channels."
        }
      },
      "description": "Details about a channelsection, including playlists and channels."
    },
    "LiveStream": {
      "type": "object",
      "id": "LiveStream",
      "description": "A live stream describes a live ingestion point.",
      "properties": {
        "snippet": {
          "$ref": "LiveStreamSnippet",
          "description": "The snippet object contains basic details about the stream, including its channel, title, and description."
        },
        "id": {
          "description": "The ID that YouTube assigns to uniquely identify the stream.",
          "type": "string",
          "annotations": {
            "required": [
              "youtube.liveStreams.update"
            ]
          }
        },
        "cdn": {
          "description": "The cdn object defines the live stream's content delivery network (CDN) settings. These settings provide details about the manner in which you stream your content to YouTube.",
          "$ref": "CdnSettings"
        },
        "kind": {
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#liveStream\".",
          "type": "string",
          "default": "youtube#liveStream"
        },
        "status": {
          "$ref": "LiveStreamStatus",
          "description": "The status object contains information about live stream's status."
        },
        "etag": {
          "description": "Etag of this resource.",
          "type": "string"
        },
        "contentDetails": {
          "description": "The content_details object contains information about the stream, including the closed captions ingestion URL.",
          "$ref": "LiveStreamContentDetails"
        }
      }
    },
    "CdnSettings": {
      "type": "object",
      "properties": {
        "ingestionInfo": {
          "$ref": "IngestionInfo",
          "description": "The ingestionInfo object contains information that YouTube provides that you need to transmit your RTMP or HTTP stream to YouTube."
        },
        "frameRate": {
          "description": "The frame rate of the inbound video data.",
          "enum": [
            "30fps",
            "60fps",
            "variable"
          ],
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            ""
          ]
        },
        "format": {
          "description": "The format of the video stream that you are sending to Youtube. ",
          "annotations": {
            "required": [
              "youtube.liveStreams.insert",
              "youtube.liveStreams.update"
            ]
          },
          "type": "string"
        },
        "resolution": {
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "type": "string",
          "enum": [
            "240p",
            "360p",
            "480p",
            "720p",
            "1080p",
            "1440p",
            "2160p",
            "variable"
          ],
          "description": "The resolution of the inbound video data."
        },
        "ingestionType": {
          "description": " The method or protocol used to transmit the video stream.",
          "type": "string",
          "enum": [
            "rtmp",
            "dash",
            "webrtc",
            "hls"
          ],
          "annotations": {
            "required": [
              "youtube.liveStreams.insert",
              "youtube.liveStreams.update"
            ]
          },
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ]
        }
      },
      "description": "Brief description of the live stream cdn settings.",
      "id": "CdnSettings"
    },
    "SubscriptionContentDetails": {
      "type": "object",
      "description": "Details about the content to witch a subscription refers.",
      "properties": {
        "totalItemCount": {
          "description": "The approximate number of items that the subscription points to.",
          "type": "integer",
          "format": "uint32"
        },
        "activityType": {
          "enum": [
            "subscriptionActivityTypeUnspecified",
            "all",
            "uploads"
          ],
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "description": "The type of activity this subscription is for (only uploads, everything)."
        },
        "newItemCount": {
          "description": "The number of new items in the subscription since its content was last read.",
          "type": "integer",
          "format": "uint32"
        }
      },
      "id": "SubscriptionContentDetails"
    },
    "PlaylistLocalization": {
      "description": "Playlist localization setting",
      "type": "object",
      "id": "PlaylistLocalization",
      "properties": {
        "description": {
          "description": "The localized strings for playlist's description.",
          "type": "string"
        },
        "title": {
          "description": "The localized strings for playlist's title.",
          "type": "string"
        }
      }
    },
    "ActivityContentDetailsFavorite": {
      "description": "Information about a video that was marked as a favorite video.",
      "id": "ActivityContentDetailsFavorite",
      "type": "object",
      "properties": {
        "resourceId": {
          "$ref": "ResourceId",
          "description": "The resourceId object contains information that identifies the resource that was marked as a favorite."
        }
      }
    },
    "VideoProcessingDetailsProcessingProgress": {
      "properties": {
        "partsProcessed": {
          "description": "The number of parts of the video that YouTube has already processed. You can estimate the percentage of the video that YouTube has already processed by calculating: 100 * parts_processed / parts_total Note that since the estimated number of parts could increase without a corresponding increase in the number of parts that have already been processed, it is possible that the calculated progress could periodically decrease while YouTube processes a video.",
          "type": "string",
          "format": "uint64"
        },
        "timeLeftMs": {
          "type": "string",
          "description": "An estimate of the amount of time, in millseconds, that YouTube needs to finish processing the video.",
          "format": "uint64"
        },
        "partsTotal": {
          "type": "string",
          "format": "uint64",
          "description": "An estimate of the total number of parts that need to be processed for the video. The number may be updated with more precise estimates while YouTube processes the video."
        }
      },
      "description": "Video processing progress and completion time estimate.",
      "id": "VideoProcessingDetailsProcessingProgress",
      "type": "object"
    },
    "VideoSuggestionsTagSuggestion": {
      "type": "object",
      "properties": {
        "tag": {
          "description": "The keyword tag suggested for the video.",
          "type": "string"
        },
        "categoryRestricts": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "A set of video categories for which the tag is relevant. You can use this information to display appropriate tag suggestions based on the video category that the video uploader associates with the video. By default, tag suggestions are relevant for all categories if there are no restricts defined for the keyword."
        }
      },
      "id": "VideoSuggestionsTagSuggestion",
      "description": "A single tag suggestion with it's relevance information."
    },
    "SuperChatEventSnippet": {
      "type": "object",
      "properties": {
        "messageType": {
          "description": "The tier for the paid message, which is based on the amount of money spent to purchase the message.",
          "type": "integer",
          "format": "uint32"
        },
        "displayString": {
          "description": "A rendered string that displays the purchase amount and currency (e.g., \"$1.00\"). The string is rendered for the given language.",
          "type": "string"
        },
        "amountMicros": {
          "type": "string",
          "format": "uint64",
          "description": "The purchase amount, in micros of the purchase currency. e.g., 1 is represented as 1000000."
        },
        "superStickerMetadata": {
          "description": "If this event is a Super Sticker event, this field will contain metadata about the Super Sticker.",
          "$ref": "SuperStickerMetadata"
        },
        "createdAt": {
          "description": "The date and time when the event occurred.",
          "type": "string",
          "format": "date-time"
        },
        "isSuperStickerEvent": {
          "description": "True if this event is a Super Sticker event.",
          "type": "boolean"
        },
        "channelId": {
          "description": "Channel id where the event occurred.",
          "type": "string"
        },
        "currency": {
          "type": "string",
          "description": "The currency in which the purchase was made. ISO 4217."
        },
        "supporterDetails": {
          "description": "Details about the supporter.",
          "$ref": "ChannelProfileDetails"
        },
        "commentText": {
          "description": "The text contents of the comment left by the user.",
          "type": "string"
        }
      },
      "id": "SuperChatEventSnippet"
    },
    "LiveStreamSnippet": {
      "id": "LiveStreamSnippet",
      "properties": {
        "publishedAt": {
          "type": "string",
          "description": "The date and time that the stream was created.",
          "format": "date-time"
        },
        "isDefaultStream": {
          "type": "boolean"
        },
        "title": {
          "description": "The stream's title. The value must be between 1 and 128 characters long.",
          "type": "string",
          "annotations": {
            "required": [
              "youtube.liveStreams.insert",
              "youtube.liveStreams.update"
            ]
          }
        },
        "channelId": {
          "type": "string",
          "description": "The ID that YouTube uses to uniquely identify the channel that is transmitting the stream."
        },
        "description": {
          "type": "string",
          "description": "The stream's description. The value cannot be longer than 10000 characters."
        }
      },
      "type": "object"
    },
    "PlaylistItemContentDetails": {
      "type": "object",
      "id": "PlaylistItemContentDetails",
      "properties": {
        "endAt": {
          "description": "The time, measured in seconds from the start of the video, when the video should stop playing. (The playlist owner can specify the times when the video should start and stop playing when the video is played in the context of the playlist.) By default, assume that the video.endTime is the end of the video.",
          "type": "string"
        },
        "videoId": {
          "type": "string",
          "description": "The ID that YouTube uses to uniquely identify a video. To retrieve the video resource, set the id query parameter to this value in your API request."
        },
        "videoPublishedAt": {
          "description": "The date and time that the video was published to YouTube.",
          "format": "date-time",
          "type": "string"
        },
        "note": {
          "description": "A user-generated note for this item.",
          "type": "string"
        },
        "startAt": {
          "description": "The time, measured in seconds from the start of the video, when the video should start playing. (The playlist owner can specify the times when the video should start and stop playing when the video is played in the context of the playlist.) The default value is 0.",
          "type": "string"
        }
      }
    },
    "SearchResult": {
      "id": "SearchResult",
      "properties": {
        "snippet": {
          "$ref": "SearchResultSnippet",
          "description": "The snippet object contains basic details about a search result, such as its title or description. For example, if the search result is a video, then the title will be the video's title and the description will be the video's description."
        },
        "id": {
          "description": "The id object contains information that can be used to uniquely identify the resource that matches the search request.",
          "$ref": "ResourceId"
        },
        "etag": {
          "type": "string",
          "description": "Etag of this resource."
        },
        "kind": {
          "default": "youtube#searchResult",
          "type": "string",
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#searchResult\"."
        }
      },
      "type": "object",
      "description": "A search result contains information about a YouTube video, channel, or playlist that matches the search parameters specified in an API request. While a search result points to a uniquely identifiable resource, like a video, it does not have its own persistent data."
    },
    "LiveChatBan": {
      "properties": {
        "snippet": {
          "$ref": "LiveChatBanSnippet",
          "description": "The `snippet` object contains basic details about the ban."
        },
        "id": {
          "type": "string",
          "description": "The ID that YouTube assigns to uniquely identify the ban."
        },
        "kind": {
          "default": "youtube#liveChatBan",
          "description": "Identifies what kind of resource this is. Value: the fixed string `\"youtube#liveChatBan\"`.",
          "type": "string"
        },
        "etag": {
          "description": "Etag of this resource.",
          "type": "string"
        }
      },
      "id": "LiveChatBan",
      "description": "A `__liveChatBan__` resource represents a ban for a YouTube live chat.",
      "type": "object"
    },
    "Thumbnail": {
      "description": "A thumbnail is an image representing a YouTube resource.",
      "id": "Thumbnail",
      "properties": {
        "url": {
          "description": "The thumbnail image's URL.",
          "type": "string"
        },
        "height": {
          "description": "(Optional) Height of the thumbnail image.",
          "format": "uint32",
          "type": "integer"
        },
        "width": {
          "description": "(Optional) Width of the thumbnail image.",
          "type": "integer",
          "format": "uint32"
        }
      },
      "type": "object"
    },
    "ActivityListResponse": {
      "id": "ActivityListResponse",
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "Etag of this resource."
        },
        "nextPageToken": {
          "description": "The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.",
          "type": "string"
        },
        "prevPageToken": {
          "description": "The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "youtube#activityListResponse",
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#activityListResponse\"."
        },
        "eventId": {
          "description": "Serialized EventId of the request which produced this response.",
          "type": "string"
        },
        "visitorId": {
          "type": "string",
          "description": "The visitorId identifies the visitor."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "Activity"
          }
        },
        "tokenPagination": {
          "$ref": "TokenPagination"
        },
        "pageInfo": {
          "$ref": "PageInfo",
          "description": "General pagination information."
        }
      }
    },
    "Playlist": {
      "id": "Playlist",
      "type": "object",
      "description": "A *playlist* resource represents a YouTube playlist. A playlist is a collection of videos that can be viewed sequentially and shared with other users. A playlist can contain up to 200 videos, and YouTube does not limit the number of playlists that each user creates. By default, playlists are publicly visible to other users, but playlists can be public or private. YouTube also uses playlists to identify special collections of videos for a channel, such as: - uploaded videos - favorite videos - positively rated (liked) videos - watch history - watch later To be more specific, these lists are associated with a channel, which is a collection of a person, group, or company's videos, playlists, and other YouTube information. You can retrieve the playlist IDs for each of these lists from the channel resource for a given channel. You can then use the playlistItems.list method to retrieve any of those lists. You can also add or remove items from those lists by calling the playlistItems.insert and playlistItems.delete methods.",
      "properties": {
        "status": {
          "description": "The status object contains status information for the playlist.",
          "$ref": "PlaylistStatus"
        },
        "player": {
          "description": "The player object contains information that you would use to play the playlist in an embedded player.",
          "$ref": "PlaylistPlayer"
        },
        "id": {
          "description": "The ID that YouTube uses to uniquely identify the playlist.",
          "type": "string"
        },
        "etag": {
          "description": "Etag of this resource.",
          "type": "string"
        },
        "localizations": {
          "additionalProperties": {
            "$ref": "PlaylistLocalization"
          },
          "description": "Localizations for different languages",
          "type": "object"
        },
        "snippet": {
          "description": "The snippet object contains basic details about the playlist, such as its title and description.",
          "$ref": "PlaylistSnippet"
        },
        "contentDetails": {
          "$ref": "PlaylistContentDetails",
          "description": "The contentDetails object contains information like video count."
        },
        "kind": {
          "type": "string",
          "default": "youtube#playlist",
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#playlist\"."
        }
      }
    },
    "VideoSuggestions": {
      "type": "object",
      "description": "Specifies suggestions on how to improve video content, including encoding hints, tag suggestions, and editor suggestions.",
      "id": "VideoSuggestions",
      "properties": {
        "processingErrors": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "audioFile",
              "imageFile",
              "projectFile",
              "notAVideoFile",
              "docFile",
              "archiveFile",
              "unsupportedSpatialAudioLayout"
            ],
            "enumDescriptions": [
              "File contains audio only (e.g., an MP3 file).",
              "Image file (e.g., a JPEG image).",
              "Movie project file (e.g., Microsoft Windows Movie Maker project).",
              "Other non-video file.",
              "Document or text file (e.g., MS Word document).",
              "An archive file (e.g., a ZIP archive).",
              "Unsupported spatial audio layout type."
            ]
          },
          "description": "A list of errors that will prevent YouTube from successfully processing the uploaded video video. These errors indicate that, regardless of the video's current processing status, eventually, that status will almost certainly be failed."
        },
        "processingHints": {
          "items": {
            "type": "string",
            "enum": [
              "nonStreamableMov",
              "sendBestQualityVideo",
              "sphericalVideo",
              "spatialAudio",
              "vrVideo",
              "hdrVideo"
            ],
            "enumDescriptions": [
              "The MP4 file is not streamable, this will slow down the processing. MOOV atom was not found at the beginning of the file.",
              "Probably a better quality version of the video exists. The video has wide screen aspect ratio, but is not an HD video.",
              "Uploaded video is spherical video.",
              "Uploaded video has spatial audio.",
              "Uploaded video is VR video.",
              "Uploaded video is HDR video."
            ]
          },
          "type": "array",
          "description": "A list of suggestions that may improve YouTube's ability to process the video."
        },
        "tagSuggestions": {
          "items": {
            "$ref": "VideoSuggestionsTagSuggestion"
          },
          "type": "array",
          "description": "A list of keyword tags that could be added to the video's metadata to increase the likelihood that users will locate your video when searching or browsing on YouTube."
        },
        "processingWarnings": {
          "items": {
            "enum": [
              "unknownContainer",
              "unknownVideoCodec",
              "unknownAudioCodec",
              "inconsistentResolution",
              "hasEditlist",
              "problematicVideoCodec",
              "problematicAudioCodec",
              "unsupportedVrStereoMode",
              "unsupportedSphericalProjectionType",
              "unsupportedHdrPixelFormat",
              "unsupportedHdrColorMetadata",
              "problematicHdrLookupTable"
            ],
            "enumDescriptions": [
              "Unrecognized file format, transcoding is likely to fail.",
              "Unrecognized video codec, transcoding is likely to fail.",
              "Unrecognized audio codec, transcoding is likely to fail.",
              "Conflicting container and stream resolutions.",
              "Edit lists are not currently supported.",
              "Video codec that is known to cause problems was used.",
              "Audio codec that is known to cause problems was used.",
              "Unsupported VR video stereo mode.",
              "Unsupported spherical video projection type.",
              "Unsupported HDR pixel format.",
              "Unspecified HDR color metadata.",
              "Problematic HDR lookup table attached."
            ],
            "type": "string"
          },
          "description": "A list of reasons why YouTube may have difficulty transcoding the uploaded video or that might result in an erroneous transcoding. These warnings are generated before YouTube actually processes the uploaded video file. In addition, they identify issues that are unlikely to cause the video processing to fail but that might cause problems such as sync issues, video artifacts, or a missing audio track.",
          "type": "array"
        },
        "editorSuggestions": {
          "description": "A list of video editing operations that might improve the video quality or playback experience of the uploaded video.",
          "type": "array",
          "items": {
            "enum": [
              "videoAutoLevels",
              "videoStabilize",
              "videoCrop",
              "audioQuietAudioSwap"
            ],
            "type": "string",
            "enumDescriptions": [
              "Picture brightness levels seem off and could be corrected.",
              "The video appears shaky and could be stabilized.",
              "Margins (mattes) detected around the picture could be cropped.",
              "The audio track appears silent and could be swapped with a better quality one."
            ]
          }
        }
      }
    },
    "LiveStreamContentDetails": {
      "id": "LiveStreamContentDetails",
      "type": "object",
      "description": "Detailed settings of a stream.",
      "properties": {
        "isReusable": {
          "description": "Indicates whether the stream is reusable, which means that it can be bound to multiple broadcasts. It is common for broadcasters to reuse the same stream for many different broadcasts if those broadcasts occur at different times. If you set this value to false, then the stream will not be reusable, which means that it can only be bound to one broadcast. Non-reusable streams differ from reusable streams in the following ways: - A non-reusable stream can only be bound to one broadcast. - A non-reusable stream might be deleted by an automated process after the broadcast ends. - The liveStreams.list method does not list non-reusable streams if you call the method and set the mine parameter to true. The only way to use that method to retrieve the resource for a non-reusable stream is to use the id parameter to identify the stream. ",
          "type": "boolean"
        },
        "closedCaptionsIngestionUrl": {
          "description": "The ingestion URL where the closed captions of this stream are sent.",
          "type": "string"
        }
      }
    },
    "ActivityContentDetailsChannelItem": {
      "type": "object",
      "properties": {
        "resourceId": {
          "description": "The resourceId object contains information that identifies the resource that was added to the channel.",
          "$ref": "ResourceId"
        }
      },
      "description": "Details about a resource which was added to a channel.",
      "id": "ActivityContentDetailsChannelItem"
    },
    "SuperChatEvent": {
      "type": "object",
      "id": "SuperChatEvent",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID that YouTube assigns to uniquely identify the Super Chat event."
        },
        "kind": {
          "default": "youtube#superChatEvent",
          "description": "Identifies what kind of resource this is. Value: the fixed string `\"youtube#superChatEvent\"`.",
          "type": "string"
        },
        "snippet": {
          "$ref": "SuperChatEventSnippet",
          "description": "The `snippet` object contains basic details about the Super Chat event."
        },
        "etag": {
          "description": "Etag of this resource.",
          "type": "string"
        }
      },
      "description": "A `__superChatEvent__` resource represents a Super Chat purchase on a YouTube channel."
    },
    "LiveChatSuperStickerDetails": {
      "id": "LiveChatSuperStickerDetails",
      "properties": {
        "amountMicros": {
          "format": "uint64",
          "description": "The amount purchased by the user, in micros (1,750,000 micros = 1.75).",
          "type": "string"
        },
        "tier": {
          "type": "integer",
          "format": "uint32",
          "description": "The tier in which the amount belongs. Lower amounts belong to lower tiers. The lowest tier is 1."
        },
        "amountDisplayString": {
          "description": "A rendered string that displays the fund amount and currency to the user.",
          "type": "string"
        },
        "currency": {
          "description": "The currency in which the purchase was made.",
          "type": "string"
        },
        "superStickerMetadata": {
          "$ref": "SuperStickerMetadata",
          "description": "Information about the Super Sticker."
        }
      },
      "type": "object"
    },
    "ChannelSection": {
      "properties": {
        "id": {
          "description": "The ID that YouTube uses to uniquely identify the channel section.",
          "type": "string"
        },
        "kind": {
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#channelSection\".",
          "default": "youtube#channelSection",
          "type": "string"
        },
        "localizations": {
          "type": "object",
          "description": "Localizations for different languages",
          "additionalProperties": {
            "$ref": "ChannelSectionLocalization"
          }
        },
        "contentDetails": {
          "$ref": "ChannelSectionContentDetails",
          "description": "The contentDetails object contains details about the channel section content, such as a list of playlists or channels featured in the section."
        },
        "snippet": {
          "$ref": "ChannelSectionSnippet",
          "description": "The snippet object contains basic details about the channel section, such as its type, style and title."
        },
        "targeting": {
          "$ref": "ChannelSectionTargeting",
          "description": "The targeting object contains basic targeting settings about the channel section."
        },
        "etag": {
          "type": "string",
          "description": "Etag of this resource."
        }
      },
      "id": "ChannelSection",
      "type": "object"
    },
    "PlaylistContentDetails": {
      "properties": {
        "itemCount": {
          "format": "uint32",
          "description": "The number of videos in the playlist.",
          "type": "integer"
        }
      },
      "id": "PlaylistContentDetails",
      "type": "object"
    },
    "MembershipsDuration": {
      "properties": {
        "memberTotalDurationMonths": {
          "type": "integer",
          "description": "The cumulative time the user has been a member across all levels in complete months (the time is rounded down to the nearest integer).",
          "format": "int32"
        },
        "memberSince": {
          "type": "string",
          "description": "The date and time when the user became a continuous member across all levels."
        }
      },
      "type": "object",
      "id": "MembershipsDuration"
    },
    "VideoAbuseReportReasonListResponse": {
      "properties": {
        "kind": {
          "type": "string",
          "description": "Identifies what kind of resource this is. Value: the fixed string `\"youtube#videoAbuseReportReasonListResponse\"`.",
          "default": "youtube#videoAbuseReportReasonListResponse"
        },
        "etag": {
          "type": "string",
          "description": "Etag of this resource."
        },
        "items": {
          "items": {
            "$ref": "VideoAbuseReportReason"
          },
          "type": "array",
          "description": "A list of valid abuse reasons that are used with `video.ReportAbuse`."
        },
        "eventId": {
          "description": "Serialized EventId of the request which produced this response.",
          "type": "string"
        },
        "visitorId": {
          "type": "string",
          "description": "The `visitorId` identifies the visitor."
        }
      },
      "id": "VideoAbuseReportReasonListResponse",
      "type": "object"
    },
    "CommentThreadSnippet": {
      "id": "CommentThreadSnippet",
      "type": "object",
      "properties": {
        "canReply": {
          "description": "Whether the current viewer of the thread can reply to it. This is viewer specific - other viewers may see a different value for this field.",
          "type": "boolean"
        },
        "isPublic": {
          "type": "boolean",
          "description": "Whether the thread (and therefore all its comments) is visible to all YouTube users."
        },
        "totalReplyCount": {
          "description": "The total number of replies (not including the top level comment).",
          "type": "integer",
          "format": "uint32"
        },
        "videoId": {
          "description": "The ID of the video the comments refer to, if any. No video_id implies a channel discussion comment.",
          "type": "string"
        },
        "topLevelComment": {
          "$ref": "Comment",
          "description": "The top level comment of this thread."
        },
        "channelId": {
          "type": "string",
          "description": "The YouTube channel the comments in the thread refer to or the channel with the video the comments refer to. If video_id isn't set the comments refer to the channel itself."
        }
      },
      "description": "Basic details about a comment thread."
    },
    "LiveBroadcast": {
      "properties": {
        "id": {
          "description": "The ID that YouTube assigns to uniquely identify the broadcast.",
          "annotations": {
            "required": [
              "youtube.liveBroadcasts.update"
            ]
          },
          "type": "string"
        },
        "status": {
          "$ref": "LiveBroadcastStatus",
          "description": "The status object contains information about the event's status."
        },
        "statistics": {
          "description": "The statistics object contains info about the event's current stats. These include concurrent viewers and total chat count. Statistics can change (in either direction) during the lifetime of an event. Statistics are only returned while the event is live.",
          "$ref": "LiveBroadcastStatistics"
        },
        "kind": {
          "default": "youtube#liveBroadcast",
          "type": "string",
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#liveBroadcast\"."
        },
        "etag": {
          "description": "Etag of this resource.",
          "type": "string"
        },
        "contentDetails": {
          "description": "The contentDetails object contains information about the event's video content, such as whether the content can be shown in an embedded video player or if it will be archived and therefore available for viewing after the event has concluded.",
          "$ref": "LiveBroadcastContentDetails"
        },
        "snippet": {
          "$ref": "LiveBroadcastSnippet",
          "description": "The snippet object contains basic details about the event, including its title, description, start time, and end time."
        }
      },
      "description": "A *liveBroadcast* resource represents an event that will be streamed, via live video, on YouTube.",
      "type": "object",
      "id": "LiveBroadcast"
    },
    "LiveBroadcastListResponse": {
      "properties": {
        "items": {
          "items": {
            "$ref": "LiveBroadcast"
          },
          "type": "array",
          "description": "A list of broadcasts that match the request criteria."
        },
        "nextPageToken": {
          "type": "string",
          "description": "The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set."
        },
        "kind": {
          "default": "youtube#liveBroadcastListResponse",
          "type": "string",
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#liveBroadcastListResponse\"."
        },
        "visitorId": {
          "type": "string",
          "description": "The visitorId identifies the visitor."
        },
        "etag": {
          "description": "Etag of this resource.",
          "type": "string"
        },
        "tokenPagination": {
          "$ref": "TokenPagination"
        },
        "pageInfo": {
          "$ref": "PageInfo",
          "description": "General pagination information."
        },
        "eventId": {
          "type": "string",
          "description": "Serialized EventId of the request which produced this response."
        },
        "prevPageToken": {
          "description": "The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.",
          "type": "string"
        }
      },
      "id": "LiveBroadcastListResponse",
      "type": "object"
    },
    "InvideoBranding": {
      "properties": {
        "timing": {
          "description": "The temporal position within the video where watermark will be displayed.",
          "$ref": "InvideoTiming"
        },
        "position": {
          "description": "The spatial position within the video where the branding watermark will be displayed.",
          "$ref": "InvideoPosition"
        },
        "imageUrl": {
          "description": "The url of the uploaded image. Only used in apiary to api communication.",
          "type": "string"
        },
        "imageBytes": {
          "type": "string",
          "format": "byte",
          "description": "The bytes the uploaded image. Only used in api to youtube communication."
        },
        "targetChannelId": {
          "type": "string",
          "description": "The channel to which this branding links. If not present it defaults to the current channel."
        }
      },
      "description": "LINT.IfChange Describes an invideo branding.",
      "type": "object",
      "id": "InvideoBranding"
    },
    "VideoContentDetails": {
      "type": "object",
      "description": "Details about the content of a YouTube Video.",
      "id": "VideoContentDetails",
      "properties": {
        "hasCustomThumbnail": {
          "type": "boolean",
          "description": "Indicates whether the video uploader has provided a custom thumbnail image for the video. This property is only visible to the video uploader."
        },
        "duration": {
          "description": "The length of the video. The tag value is an ISO 8601 duration in the format PT#M#S, in which the letters PT indicate that the value specifies a period of time, and the letters M and S refer to length in minutes and seconds, respectively. The # characters preceding the M and S letters are both integers that specify the number of minutes (or seconds) of the video. For example, a value of PT15M51S indicates that the video is 15 minutes and 51 seconds long.",
          "type": "string"
        },
        "contentRating": {
          "description": "Specifies the ratings that the video received under various rating schemes.",
          "$ref": "ContentRating"
        },
        "caption": {
          "description": "The value of captions indicates whether the video has captions or not.",
          "enum": [
            "true",
            "false"
          ],
          "enumDescriptions": [
            "",
            ""
          ],
          "type": "string"
        },
        "dimension": {
          "type": "string",
          "description": "The value of dimension indicates whether the video is available in 3D or in 2D."
        },
        "projection": {
          "type": "string",
          "enumDescriptions": [
            "",
            ""
          ],
          "enum": [
            "rectangular",
            "360"
          ],
          "description": "Specifies the projection format of the video."
        },
        "licensedContent": {
          "description": "The value of is_license_content indicates whether the video is licensed content.",
          "type": "boolean"
        },
        "countryRestriction": {
          "$ref": "AccessPolicy",
          "description": "The countryRestriction object contains information about the countries where a video is (or is not) viewable."
        },
        "regionRestriction": {
          "$ref": "VideoContentDetailsRegionRestriction",
          "description": "The regionRestriction object contains information about the countries where a video is (or is not) viewable. The object will contain either the contentDetails.regionRestriction.allowed property or the contentDetails.regionRestriction.blocked property."
        },
        "definition": {
          "type": "string",
          "description": "The value of definition indicates whether the video is available in high definition or only in standard definition.",
          "enumDescriptions": [
            "sd",
            "hd"
          ],
          "enum": [
            "sd",
            "hd"
          ]
        }
      }
    },
    "ThumbnailDetails": {
      "description": "Internal representation of thumbnails for a YouTube resource.",
      "type": "object",
      "id": "ThumbnailDetails",
      "properties": {
        "standard": {
          "$ref": "Thumbnail",
          "description": "The standard quality image for this resource."
        },
        "medium": {
          "description": "The medium quality image for this resource.",
          "$ref": "Thumbnail"
        },
        "maxres": {
          "$ref": "Thumbnail",
          "description": "The maximum resolution quality image for this resource."
        },
        "high": {
          "$ref": "Thumbnail",
          "description": "The high quality image for this resource."
        },
        "default": {
          "description": "The default image for this resource.",
          "$ref": "Thumbnail"
        }
      }
    },
    "TestItemTestItemSnippet": {
      "type": "object",
      "properties": {},
      "id": "TestItemTestItemSnippet"
    },
    "LiveChatModeratorListResponse": {
      "id": "LiveChatModeratorListResponse",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set."
        },
        "tokenPagination": {
          "$ref": "TokenPagination"
        },
        "visitorId": {
          "type": "string",
          "description": "The visitorId identifies the visitor."
        },
        "eventId": {
          "description": "Serialized EventId of the request which produced this response.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "Etag of this resource."
        },
        "kind": {
          "type": "string",
          "default": "youtube#liveChatModeratorListResponse",
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#liveChatModeratorListResponse\"."
        },
        "prevPageToken": {
          "description": "The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "LiveChatModerator"
          },
          "type": "array",
          "description": "A list of moderators that match the request criteria."
        },
        "pageInfo": {
          "description": "General pagination information.",
          "$ref": "PageInfo"
        }
      },
      "type": "object"
    },
    "ChannelAuditDetails": {
      "type": "object",
      "id": "ChannelAuditDetails",
      "properties": {
        "communityGuidelinesGoodStanding": {
          "type": "boolean",
          "description": "Whether or not the channel respects the community guidelines."
        },
        "contentIdClaimsGoodStanding": {
          "description": "Whether or not the channel has any unresolved claims.",
          "type": "boolean"
        },
        "copyrightStrikesGoodStanding": {
          "description": "Whether or not the channel has any copyright strikes.",
          "type": "boolean"
        }
      },
      "description": "The auditDetails object encapsulates channel data that is relevant for YouTube Partners during the audit process."
    },
    "CommentSnippet": {
      "id": "CommentSnippet",
      "properties": {
        "canRate": {
          "type": "boolean",
          "description": "Whether the current viewer can rate this comment."
        },
        "channelId": {
          "type": "string",
          "description": "The id of the corresponding YouTube channel. In case of a channel comment this is the channel the comment refers to. In case of a video comment it's the video's channel."
        },
        "authorChannelUrl": {
          "description": "Link to the author's YouTube channel, if any.",
          "type": "string"
        },
        "videoId": {
          "type": "string",
          "description": "The ID of the video the comment refers to, if any."
        },
        "textDisplay": {
          "description": "The comment's text. The format is either plain text or HTML dependent on what has been requested. Even the plain text representation may differ from the text originally posted in that it may replace video links with video titles etc.",
          "type": "string"
        },
        "textOriginal": {
          "description": "The comment's original raw text as initially posted or last updated. The original text will only be returned if it is accessible to the viewer, which is only guaranteed if the viewer is the comment's author.",
          "type": "string"
        },
        "updatedAt": {
          "description": "The date and time when the comment was last updated.",
          "type": "string",
          "format": "date-time"
        },
        "publishedAt": {
          "type": "string",
          "description": "The date and time when the comment was originally published.",
          "format": "date-time"
        },
        "authorChannelId": {
          "$ref": "CommentSnippetAuthorChannelId"
        },
        "likeCount": {
          "type": "integer",
          "format": "uint32",
          "description": "The total number of likes this comment has received."
        },
        "viewerRating": {
          "enumDescriptions": [
            "",
            "The entity is liked.",
            "The entity is disliked."
          ],
          "description": "The rating the viewer has given to this comment. For the time being this will never return RATE_TYPE_DISLIKE and instead return RATE_TYPE_NONE. This may change in the future.",
          "type": "string",
          "enum": [
            "none",
            "like",
            "dislike"
          ]
        },
        "authorProfileImageUrl": {
          "type": "string",
          "description": "The URL for the avatar of the user who posted the comment."
        },
        "authorDisplayName": {
          "description": "The name of the user who posted the comment.",
          "type": "string"
        },
        "moderationStatus": {
          "description": "The comment's moderation status. Will not be set if the comments were requested through the id filter.",
          "enum": [
            "published",
            "heldForReview",
            "likelySpam",
            "rejected"
          ],
          "type": "string",
          "enumDescriptions": [
            "The comment is available for public display.",
            "The comment is awaiting review by a moderator.",
            "",
            "The comment is unfit for display."
          ]
        },
        "parentId": {
          "description": "The unique id of the parent comment, only set for replies.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Basic details about a comment, such as its author and text."
    },
    "CommentListResponse": {
      "type": "object",
      "properties": {
        "eventId": {
          "description": "Serialized EventId of the request which produced this response.",
          "type": "string"
        },
        "pageInfo": {
          "$ref": "PageInfo",
          "description": "General pagination information."
        },
        "visitorId": {
          "description": "The visitorId identifies the visitor.",
          "type": "string"
        },
        "nextPageToken": {
          "description": "The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.",
          "type": "string"
        },
        "tokenPagination": {
          "$ref": "TokenPagination"
        },
        "kind": {
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#commentListResponse\".",
          "default": "youtube#commentListResponse",
          "type": "string"
        },
        "items": {
          "description": "A list of comments that match the request criteria.",
          "items": {
            "$ref": "Comment"
          },
          "type": "array"
        },
        "etag": {
          "type": "string",
          "description": "Etag of this resource."
        }
      },
      "id": "CommentListResponse"
    },
    "I18nLanguageSnippet": {
      "id": "I18nLanguageSnippet",
      "type": "object",
      "properties": {
        "hl": {
          "type": "string",
          "description": "A short BCP-47 code that uniquely identifies a language."
        },
        "name": {
          "description": "The human-readable name of the language in the language itself.",
          "type": "string"
        }
      },
      "description": "Basic details about an i18n language, such as language code and human-readable name."
    },
    "AbuseReport": {
      "properties": {
        "abuseTypes": {
          "items": {
            "$ref": "AbuseType"
          },
          "type": "array"
        },
        "subject": {
          "$ref": "Entity"
        },
        "description": {
          "type": "string"
        },
        "relatedEntities": {
          "type": "array",
          "items": {
            "$ref": "RelatedEntity"
          }
        }
      },
      "type": "object",
      "id": "AbuseReport"
    },
    "CommentSnippetAuthorChannelId": {
      "properties": {
        "value": {
          "type": "string"
        }
      },
      "type": "object",
      "description": "The id of the author's YouTube channel, if any.",
      "id": "CommentSnippetAuthorChannelId"
    },
    "LiveChatMessageDeletedDetails": {
      "type": "object",
      "id": "LiveChatMessageDeletedDetails",
      "properties": {
        "deletedMessageId": {
          "type": "string"
        }
      }
    },
    "Subscription": {
      "properties": {
        "etag": {
          "description": "Etag of this resource.",
          "type": "string"
        },
        "id": {
          "description": "The ID that YouTube uses to uniquely identify the subscription.",
          "type": "string"
        },
        "kind": {
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#subscription\".",
          "type": "string",
          "default": "youtube#subscription"
        },
        "contentDetails": {
          "$ref": "SubscriptionContentDetails",
          "description": "The contentDetails object contains basic statistics about the subscription."
        },
        "snippet": {
          "$ref": "SubscriptionSnippet",
          "description": "The snippet object contains basic details about the subscription, including its title and the channel that the user subscribed to."
        },
        "subscriberSnippet": {
          "$ref": "SubscriptionSubscriberSnippet",
          "description": "The subscriberSnippet object contains basic details about the subscriber."
        }
      },
      "description": "A *subscription* resource contains information about a YouTube user subscription. A subscription notifies a user when new videos are added to a channel or when another user takes one of several actions on YouTube, such as uploading a video, rating a video, or commenting on a video.",
      "id": "Subscription",
      "type": "object"
    },
    "SearchResultSnippet": {
      "id": "SearchResultSnippet",
      "type": "object",
      "properties": {
        "channelId": {
          "description": "The value that YouTube uses to uniquely identify the channel that published the resource that the search result identifies.",
          "type": "string"
        },
        "channelTitle": {
          "type": "string",
          "description": "The title of the channel that published the resource that the search result identifies."
        },
        "publishedAt": {
          "description": "The creation date and time of the resource that the search result identifies.",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "A description of the search result.",
          "type": "string"
        },
        "liveBroadcastContent": {
          "enum": [
            "none",
            "upcoming",
            "live",
            "completed"
          ],
          "type": "string",
          "enumDescriptions": [
            "",
            "The live broadcast is upcoming.",
            "The live broadcast is active.",
            "The live broadcast has been completed."
          ],
          "description": "It indicates if the resource (video or channel) has upcoming/active live broadcast content. Or it's \"none\" if there is not any upcoming/active live broadcasts."
        },
        "title": {
          "type": "string",
          "description": "The title of the search result."
        },
        "thumbnails": {
          "$ref": "ThumbnailDetails",
          "description": "A map of thumbnail images associated with the search result. For each object in the map, the key is the name of the thumbnail image, and the value is an object that contains other information about the thumbnail."
        }
      },
      "description": "Basic details about a search result, including title, description and thumbnails of the item referenced by the search result."
    },
    "I18nLanguageListResponse": {
      "type": "object",
      "properties": {
        "items": {
          "description": "A list of supported i18n languages. In this map, the i18n language ID is the map key, and its value is the corresponding i18nLanguage resource.",
          "type": "array",
          "items": {
            "$ref": "I18nLanguage"
          }
        },
        "kind": {
          "type": "string",
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#i18nLanguageListResponse\".",
          "default": "youtube#i18nLanguageListResponse"
        },
        "visitorId": {
          "description": "The visitorId identifies the visitor.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "Etag of this resource."
        },
        "eventId": {
          "type": "string",
          "description": "Serialized EventId of the request which produced this response."
        }
      },
      "id": "I18nLanguageListResponse"
    },
    "InvideoPosition": {
      "type": "object",
      "properties": {
        "type": {
          "enumDescriptions": [
            ""
          ],
          "type": "string",
          "description": "Defines the position type.",
          "enum": [
            "corner"
          ]
        },
        "cornerPosition": {
          "enum": [
            "topLeft",
            "topRight",
            "bottomLeft",
            "bottomRight"
          ],
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "description": "Describes in which corner of the video the visual widget will appear."
        }
      },
      "id": "InvideoPosition",
      "description": "Describes the spatial position of a visual widget inside a video. It is a union of various position types, out of which only will be set one."
    },
    "LiveBroadcastSnippet": {
      "description": "Basic broadcast information.",
      "properties": {
        "scheduledEndTime": {
          "description": "The date and time that the broadcast is scheduled to start.",
          "format": "date-time",
          "type": "string"
        },
        "liveChatId": {
          "description": "The id of the live chat for this broadcast.",
          "type": "string"
        },
        "title": {
          "annotations": {
            "required": [
              "youtube.liveBroadcasts.insert",
              "youtube.liveBroadcasts.update"
            ]
          },
          "type": "string",
          "description": "The broadcast's title. Note that the broadcast represents exactly one YouTube video. You can set this field by modifying the broadcast resource or by setting the title field of the corresponding video resource."
        },
        "publishedAt": {
          "description": "The date and time that the broadcast was added to YouTube's live broadcast schedule.",
          "type": "string",
          "format": "date-time"
        },
        "isDefaultBroadcast": {
          "type": "boolean",
          "description": "Indicates whether this broadcast is the default broadcast. Internal only."
        },
        "actualStartTime": {
          "format": "date-time",
          "type": "string",
          "description": "The date and time that the broadcast actually started. This information is only available once the broadcast's state is live."
        },
        "scheduledStartTime": {
          "description": "The date and time that the broadcast is scheduled to end.",
          "format": "date-time",
          "type": "string"
        },
        "thumbnails": {
          "description": "A map of thumbnail images associated with the broadcast. For each nested object in this object, the key is the name of the thumbnail image, and the value is an object that contains other information about the thumbnail.",
          "$ref": "ThumbnailDetails"
        },
        "actualEndTime": {
          "type": "string",
          "description": "The date and time that the broadcast actually ended. This information is only available once the broadcast's state is complete.",
          "format": "date-time"
        },
        "description": {
          "type": "string",
          "description": "The broadcast's description. As with the title, you can set this field by modifying the broadcast resource or by setting the description field of the corresponding video resource."
        },
        "channelId": {
          "type": "string",
          "description": "The ID that YouTube uses to uniquely identify the channel that is publishing the broadcast."
        }
      },
      "id": "LiveBroadcastSnippet",
      "type": "object"
    },
    "VideoCategoryListResponse": {
      "id": "VideoCategoryListResponse",
      "properties": {
        "eventId": {
          "description": "Serialized EventId of the request which produced this response.",
          "type": "string"
        },
        "nextPageToken": {
          "description": "The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.",
          "type": "string"
        },
        "visitorId": {
          "type": "string",
          "description": "The visitorId identifies the visitor."
        },
        "pageInfo": {
          "description": "General pagination information.",
          "$ref": "PageInfo"
        },
        "tokenPagination": {
          "$ref": "TokenPagination"
        },
        "kind": {
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#videoCategoryListResponse\".",
          "type": "string",
          "default": "youtube#videoCategoryListResponse"
        },
        "prevPageToken": {
          "type": "string",
          "description": "The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set."
        },
        "items": {
          "description": "A list of video categories that can be associated with YouTube videos. In this map, the video category ID is the map key, and its value is the corresponding videoCategory resource.",
          "type": "array",
          "items": {
            "$ref": "VideoCategory"
          }
        },
        "etag": {
          "type": "string",
          "description": "Etag of this resource."
        }
      },
      "type": "object"
    },
    "LiveStreamStatus": {
      "id": "LiveStreamStatus",
      "properties": {
        "streamStatus": {
          "type": "string",
          "enum": [
            "created",
            "ready",
            "active",
            "inactive",
            "error"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            ""
          ]
        },
        "healthStatus": {
          "description": "The health status of the stream.",
          "$ref": "LiveStreamHealthStatus"
        }
      },
      "type": "object",
      "description": "Brief description of the live stream status."
    },
    "ActivityContentDetailsRecommendation": {
      "properties": {
        "resourceId": {
          "description": "The resourceId object contains information that identifies the recommended resource.",
          "$ref": "ResourceId"
        },
        "reason": {
          "enum": [
            "reasonUnspecified",
            "videoFavorited",
            "videoLiked",
            "videoWatched"
          ],
          "description": "The reason that the resource is recommended to the user.",
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "seedResourceId": {
          "description": "The seedResourceId object contains information about the resource that caused the recommendation.",
          "$ref": "ResourceId"
        }
      },
      "id": "ActivityContentDetailsRecommendation",
      "type": "object",
      "description": "Information that identifies the recommended resource."
    },
    "VideoStatus": {
      "type": "object",
      "properties": {
        "privacyStatus": {
          "enum": [
            "public",
            "unlisted",
            "private"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "description": "The video's privacy status.",
          "type": "string"
        },
        "failureReason": {
          "enumDescriptions": [
            "Unable to convert video content.",
            "Invalid file format.",
            "Empty file.",
            "File was too small.",
            "Unsupported codec.",
            "Upload wasn't finished."
          ],
          "description": "This value explains why a video failed to upload. This property is only present if the uploadStatus property indicates that the upload failed.",
          "enum": [
            "conversion",
            "invalidFile",
            "emptyFile",
            "tooSmall",
            "codec",
            "uploadAborted"
          ],
          "type": "string"
        },
        "madeForKids": {
          "type": "boolean"
        },
        "license": {
          "enum": [
            "youtube",
            "creativeCommon"
          ],
          "type": "string",
          "enumDescriptions": [
            "",
            ""
          ],
          "description": "The video's license. @mutable youtube.videos.insert youtube.videos.update"
        },
        "embeddable": {
          "type": "boolean",
          "description": "This value indicates if the video can be embedded on another website. @mutable youtube.videos.insert youtube.videos.update"
        },
        "rejectionReason": {
          "type": "string",
          "description": "This value explains why YouTube rejected an uploaded video. This property is only present if the uploadStatus property indicates that the upload was rejected.",
          "enum": [
            "copyright",
            "inappropriate",
            "duplicate",
            "termsOfUse",
            "uploaderAccountSuspended",
            "length",
            "claim",
            "uploaderAccountClosed",
            "trademark",
            "legal"
          ],
          "enumDescriptions": [
            "Copyright infringement.",
            "Inappropriate video content.",
            "Duplicate upload in the same channel.",
            "Terms of use violation.",
            "Uploader account was suspended.",
            "Video duration was too long.",
            "Blocked by content owner.",
            "Uploader closed his/her account.",
            "Trademark infringement.",
            "An unspecified legal reason."
          ]
        },
        "publishAt": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time when the video is scheduled to publish. It can be set only if the privacy status of the video is private.."
        },
        "publicStatsViewable": {
          "description": "This value indicates if the extended video statistics on the watch page can be viewed by everyone. Note that the view count, likes, etc will still be visible if this is disabled. @mutable youtube.videos.insert youtube.videos.update",
          "type": "boolean"
        },
        "uploadStatus": {
          "description": "The status of the uploaded video.",
          "type": "string",
          "enumDescriptions": [
            "Video has been uploaded but not processed yet.",
            "Video has been successfully processed.",
            "Processing has failed. See FailureReason.",
            "Video has been rejected. See RejectionReason.",
            "Video has been deleted."
          ],
          "enum": [
            "uploaded",
            "processed",
            "failed",
            "rejected",
            "deleted"
          ]
        },
        "selfDeclaredMadeForKids": {
          "type": "boolean"
        }
      },
      "id": "VideoStatus",
      "description": "Basic details about a video category, such as its localized title. Next Id: 17"
    },
    "I18nRegionListResponse": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#i18nRegionListResponse\".",
          "default": "youtube#i18nRegionListResponse"
        },
        "eventId": {
          "type": "string",
          "description": "Serialized EventId of the request which produced this response."
        },
        "visitorId": {
          "type": "string",
          "description": "The visitorId identifies the visitor."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "I18nRegion"
          },
          "description": "A list of regions where YouTube is available. In this map, the i18n region ID is the map key, and its value is the corresponding i18nRegion resource."
        },
        "etag": {
          "type": "string",
          "description": "Etag of this resource."
        }
      },
      "id": "I18nRegionListResponse"
    },
    "LevelDetails": {
      "id": "LevelDetails",
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string",
          "description": "The name that should be used when referring to this level."
        }
      }
    },
    "Member": {
      "id": "Member",
      "description": "A *member* resource represents a member for a YouTube channel. A member provides recurring monetary support to a creator and receives special benefits.",
      "properties": {
        "etag": {
          "type": "string",
          "description": "Etag of this resource."
        },
        "snippet": {
          "description": "The snippet object contains basic details about the member.",
          "$ref": "MemberSnippet"
        },
        "kind": {
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#member\".",
          "default": "youtube#member",
          "type": "string"
        }
      },
      "type": "object"
    },
    "VideoFileDetailsVideoStream": {
      "type": "object",
      "id": "VideoFileDetailsVideoStream",
      "description": "Information about a video stream.",
      "properties": {
        "codec": {
          "type": "string",
          "description": "The video codec that the stream uses."
        },
        "vendor": {
          "description": "A value that uniquely identifies a video vendor. Typically, the value is a four-letter vendor code.",
          "type": "string"
        },
        "frameRateFps": {
          "format": "double",
          "type": "number",
          "description": "The video stream's frame rate, in frames per second."
        },
        "widthPixels": {
          "type": "integer",
          "description": "The encoded video content's width in pixels. You can calculate the video's encoding aspect ratio as width_pixels / height_pixels.",
          "format": "uint32"
        },
        "rotation": {
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            ""
          ],
          "type": "string",
          "enum": [
            "none",
            "clockwise",
            "upsideDown",
            "counterClockwise",
            "other"
          ],
          "description": "The amount that YouTube needs to rotate the original source content to properly display the video."
        },
        "aspectRatio": {
          "format": "double",
          "description": "The video content's display aspect ratio, which specifies the aspect ratio in which the video should be displayed.",
          "type": "number"
        },
        "heightPixels": {
          "description": "The encoded video content's height in pixels.",
          "format": "uint32",
          "type": "integer"
        },
        "bitrateBps": {
          "description": "The video stream's bitrate, in bits per second.",
          "format": "uint64",
          "type": "string"
        }
      }
    },
    "ActivityContentDetailsUpload": {
      "properties": {
        "videoId": {
          "description": "The ID that YouTube uses to uniquely identify the uploaded video.",
          "type": "string"
        }
      },
      "id": "ActivityContentDetailsUpload",
      "type": "object",
      "description": "Information about the uploaded video."
    },
    "GeoPoint": {
      "type": "object",
      "description": "Geographical coordinates of a point, in WGS84.",
      "properties": {
        "longitude": {
          "format": "double",
          "type": "number",
          "description": "Longitude in degrees."
        },
        "altitude": {
          "description": "Altitude above the reference ellipsoid, in meters.",
          "format": "double",
          "type": "number"
        },
        "latitude": {
          "type": "number",
          "description": "Latitude in degrees.",
          "format": "double"
        }
      },
      "id": "GeoPoint"
    },
    "SuperChatEventListResponse": {
      "properties": {
        "nextPageToken": {
          "description": "The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "SuperChatEvent"
          },
          "description": "A list of Super Chat purchases that match the request criteria.",
          "type": "array"
        },
        "kind": {
          "type": "string",
          "default": "youtube#superChatEventListResponse",
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#superChatEventListResponse\"."
        },
        "tokenPagination": {
          "$ref": "TokenPagination"
        },
        "etag": {
          "description": "Etag of this resource.",
          "type": "string"
        },
        "pageInfo": {
          "$ref": "PageInfo"
        },
        "visitorId": {
          "type": "string",
          "description": "The visitorId identifies the visitor."
        },
        "eventId": {
          "description": "Serialized EventId of the request which produced this response.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "SuperChatEventListResponse"
    },
    "VideoProjectDetails": {
      "properties": {},
      "id": "VideoProjectDetails",
      "description": "DEPRECATED. b/157517979: This part was never populated after it was added. However, it sees non-zero traffic because there is generated client code in the wild that refers to it [1]. We keep this field and do NOT remove it because otherwise V3 would return an error when this part gets requested [2]. [1] https://developers.google.com/resources/api-libraries/documentation/youtube/v3/csharp/latest/classGoogle_1_1Apis_1_1YouTube_1_1v3_1_1Data_1_1VideoProjectDetails.html [2] http://google3/video/youtube/src/python/servers/data_api/common.py?l=1565-1569&rcl=344141677",
      "type": "object"
    },
    "LiveBroadcastContentDetails": {
      "properties": {
        "enableDvr": {
          "annotations": {
            "required": [
              "youtube.liveBroadcasts.update"
            ]
          },
          "description": "This setting determines whether viewers can access DVR controls while watching the video. DVR controls enable the viewer to control the video playback experience by pausing, rewinding, or fast forwarding content. The default value for this property is true. *Important:* You must set the value to true and also set the enableArchive property's value to true if you want to make playback available immediately after the broadcast ends.",
          "type": "boolean"
        },
        "enableAutoStart": {
          "type": "boolean",
          "description": "This setting indicates whether auto start is enabled for this broadcast. The default value for this property is false. This setting can only be used by Events."
        },
        "closedCaptionsType": {
          "type": "string",
          "enum": [
            "closedCaptionsTypeUnspecified",
            "closedCaptionsDisabled",
            "closedCaptionsHttpPost",
            "closedCaptionsEmbedded"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ]
        },
        "startWithSlate": {
          "description": "This setting indicates whether the broadcast should automatically begin with an in-stream slate when you update the broadcast's status to live. After updating the status, you then need to send a liveCuepoints.insert request that sets the cuepoint's eventState to end to remove the in-stream slate and make your broadcast stream visible to viewers.",
          "annotations": {
            "required": [
              "youtube.liveBroadcasts.update"
            ]
          },
          "type": "boolean"
        },
        "mesh": {
          "format": "byte",
          "description": "The mesh for projecting the video if projection is mesh. The mesh value must be a UTF-8 string containing the base-64 encoding of 3D mesh data that follows the Spherical Video V2 RFC specification for an mshp box, excluding the box size and type but including the following four reserved zero bytes for the version and flags.",
          "type": "string"
        },
        "monitorStream": {
          "$ref": "MonitorStreamInfo",
          "description": "The monitorStream object contains information about the monitor stream, which the broadcaster can use to review the event content before the broadcast stream is shown publicly."
        },
        "projection": {
          "type": "string",
          "description": "The projection format of this broadcast. This defaults to rectangular.",
          "enum": [
            "projectionUnspecified",
            "rectangular",
            "360",
            "mesh"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ]
        },
        "enableLowLatency": {
          "type": "boolean",
          "description": "Indicates whether this broadcast has low latency enabled."
        },
        "enableContentEncryption": {
          "type": "boolean",
          "description": "This setting indicates whether YouTube should enable content encryption for the broadcast.",
          "annotations": {
            "required": [
              "youtube.liveBroadcasts.update"
            ]
          }
        },
        "enableEmbed": {
          "type": "boolean",
          "description": "This setting indicates whether the broadcast video can be played in an embedded player. If you choose to archive the video (using the enableArchive property), this setting will also apply to the archived video.",
          "annotations": {
            "required": [
              "youtube.liveBroadcasts.update"
            ]
          }
        },
        "boundStreamLastUpdateTimeMs": {
          "format": "date-time",
          "description": "The date and time that the live stream referenced by boundStreamId was last updated.",
          "type": "string"
        },
        "stereoLayout": {
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "stereoLayoutUnspecified",
            "mono",
            "leftRight",
            "topBottom"
          ],
          "description": "The 3D stereo layout of this broadcast. This defaults to mono."
        },
        "enableAutoStop": {
          "description": "This setting indicates whether auto stop is enabled for this broadcast. The default value for this property is false. This setting can only be used by Events.",
          "type": "boolean"
        },
        "enableClosedCaptions": {
          "description": "This setting indicates whether HTTP POST closed captioning is enabled for this broadcast. The ingestion URL of the closed captions is returned through the liveStreams API. This is mutually exclusive with using the closed_captions_type property, and is equivalent to setting closed_captions_type to CLOSED_CAPTIONS_HTTP_POST.",
          "type": "boolean"
        },
        "boundStreamId": {
          "description": "This value uniquely identifies the live stream bound to the broadcast.",
          "type": "string"
        },
        "latencyPreference": {
          "type": "string",
          "enum": [
            "latencyPreferenceUnspecified",
            "normal",
            "low",
            "ultraLow"
          ],
          "description": "If both this and enable_low_latency are set, they must match. LATENCY_NORMAL should match enable_low_latency=false LATENCY_LOW should match enable_low_latency=true LATENCY_ULTRA_LOW should have enable_low_latency omitted.",
          "enumDescriptions": [
            "",
            "Best for: highest quality viewer playbacks and higher resolutions.",
            "Best for: near real-time interaction, with minimal playback buffering.",
            "Best for: real-time interaction Does not support: Closed captions, 1440p, and 4k resolutions"
          ]
        },
        "recordFromStart": {
          "type": "boolean",
          "description": "Automatically start recording after the event goes live. The default value for this property is true. *Important:* You must also set the enableDvr property's value to true if you want the playback to be available immediately after the broadcast ends. If you set this property's value to true but do not also set the enableDvr property to true, there may be a delay of around one day before the archived video will be available for playback.",
          "annotations": {
            "required": [
              "youtube.liveBroadcasts.update"
            ]
          }
        }
      },
      "type": "object",
      "id": "LiveBroadcastContentDetails",
      "description": "Detailed settings of a broadcast."
    },
    "ChannelBrandingSettings": {
      "id": "ChannelBrandingSettings",
      "description": "Branding properties of a YouTube channel.",
      "properties": {
        "watch": {
          "$ref": "WatchSettings",
          "description": "Branding properties for the watch page."
        },
        "hints": {
          "items": {
            "$ref": "PropertyValue"
          },
          "description": "Additional experimental branding properties.",
          "type": "array"
        },
        "image": {
          "description": "Branding properties for branding images.",
          "$ref": "ImageSettings"
        },
        "channel": {
          "$ref": "ChannelSettings",
          "description": "Branding properties for the channel view."
        }
      },
      "type": "object"
    },
    "Entity": {
      "properties": {
        "url": {
          "type": "string"
        },
        "typeId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      },
      "type": "object",
      "id": "Entity"
    },
    "ChannelProfileDetails": {
      "properties": {
        "channelUrl": {
          "description": "The channel's URL.",
          "type": "string"
        },
        "displayName": {
          "type": "string",
          "description": "The channel's display name."
        },
        "profileImageUrl": {
          "description": "The channels's avatar URL.",
          "type": "string"
        },
        "channelId": {
          "description": "The YouTube channel ID.",
          "type": "string"
        }
      },
      "id": "ChannelProfileDetails",
      "type": "object"
    },
    "CommentThreadReplies": {
      "properties": {
        "comments": {
          "items": {
            "$ref": "Comment"
          },
          "type": "array",
          "description": "A limited number of replies. Unless the number of replies returned equals total_reply_count in the snippet the returned replies are only a subset of the total number of replies."
        }
      },
      "description": "Comments written in (direct or indirect) reply to the top level comment.",
      "id": "CommentThreadReplies",
      "type": "object"
    },
    "PlaylistItemSnippet": {
      "id": "PlaylistItemSnippet",
      "properties": {
        "videoOwnerChannelId": {
          "type": "string",
          "description": "Channel id for the channel this video belongs to."
        },
        "channelTitle": {
          "type": "string",
          "description": "Channel title for the channel that the playlist item belongs to."
        },
        "thumbnails": {
          "description": "A map of thumbnail images associated with the playlist item. For each object in the map, the key is the name of the thumbnail image, and the value is an object that contains other information about the thumbnail.",
          "$ref": "ThumbnailDetails"
        },
        "title": {
          "type": "string",
          "description": "The item's title."
        },
        "description": {
          "description": "The item's description.",
          "type": "string"
        },
        "position": {
          "description": "The order in which the item appears in the playlist. The value uses a zero-based index, so the first item has a position of 0, the second item has a position of 1, and so forth.",
          "format": "uint32",
          "type": "integer"
        },
        "playlistId": {
          "description": "The ID that YouTube uses to uniquely identify thGe playlist that the playlist item is in.",
          "annotations": {
            "required": [
              "youtube.playlistItems.insert",
              "youtube.playlistItems.update"
            ]
          },
          "type": "string"
        },
        "resourceId": {
          "description": "The id object contains information that can be used to uniquely identify the resource that is included in the playlist as the playlist item.",
          "annotations": {
            "required": [
              "youtube.playlistItems.insert",
              "youtube.playlistItems.update"
            ]
          },
          "$ref": "ResourceId"
        },
        "videoOwnerChannelTitle": {
          "type": "string",
          "description": "Channel title for the channel this video belongs to."
        },
        "publishedAt": {
          "description": "The date and time that the item was added to the playlist.",
          "type": "string",
          "format": "date-time"
        },
        "channelId": {
          "description": "The ID that YouTube uses to uniquely identify the user that added the item to the playlist.",
          "type": "string"
        }
      },
      "description": "Basic details about a playlist, including title, description and thumbnails. Basic details of a YouTube Playlist item provided by the author. Next ID: 15",
      "type": "object"
    },
    "IngestionInfo": {
      "description": "Describes information necessary for ingesting an RTMP or an HTTP stream.",
      "type": "object",
      "properties": {
        "ingestionAddress": {
          "type": "string",
          "description": "The primary ingestion URL that you should use to stream video to YouTube. You must stream video to this URL. Depending on which application or tool you use to encode your video stream, you may need to enter the stream URL and stream name separately or you may need to concatenate them in the following format: *STREAM_URL/STREAM_NAME* "
        },
        "rtmpsBackupIngestionAddress": {
          "type": "string",
          "description": "This ingestion url may be used instead of backupIngestionAddress in order to stream via RTMPS. Not applicable to non-RTMP streams."
        },
        "rtmpsIngestionAddress": {
          "type": "string",
          "description": "This ingestion url may be used instead of ingestionAddress in order to stream via RTMPS. Not applicable to non-RTMP streams."
        },
        "streamName": {
          "description": "The HTTP or RTMP stream name that YouTube assigns to the video stream.",
          "type": "string"
        },
        "backupIngestionAddress": {
          "type": "string",
          "description": "The backup ingestion URL that you should use to stream video to YouTube. You have the option of simultaneously streaming the content that you are sending to the ingestionAddress to this URL."
        }
      },
      "id": "IngestionInfo"
    },
    "ThirdPartyLinkStatus": {
      "id": "ThirdPartyLinkStatus",
      "properties": {
        "linkStatus": {
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "unknown",
            "failed",
            "pending",
            "linked"
          ]
        }
      },
      "description": "The third-party link status object contains information about the status of the link.",
      "type": "object"
    },
    "LiveChatSuperChatDetails": {
      "properties": {
        "userComment": {
          "description": "The comment added by the user to this Super Chat event.",
          "type": "string"
        },
        "amountMicros": {
          "description": "The amount purchased by the user, in micros (1,750,000 micros = 1.75).",
          "format": "uint64",
          "type": "string"
        },
        "amountDisplayString": {
          "type": "string",
          "description": "A rendered string that displays the fund amount and currency to the user."
        },
        "currency": {
          "type": "string",
          "description": "The currency in which the purchase was made."
        },
        "tier": {
          "description": "The tier in which the amount belongs. Lower amounts belong to lower tiers. The lowest tier is 1.",
          "type": "integer",
          "format": "uint32"
        }
      },
      "type": "object",
      "id": "LiveChatSuperChatDetails"
    },
    "ActivityContentDetailsComment": {
      "id": "ActivityContentDetailsComment",
      "description": "Information about a resource that received a comment.",
      "type": "object",
      "properties": {
        "resourceId": {
          "$ref": "ResourceId",
          "description": "The resourceId object contains information that identifies the resource associated with the comment."
        }
      }
    },
    "LiveChatMessageSnippet": {
      "properties": {
        "hasDisplayContent": {
          "type": "boolean",
          "description": "Whether the message has display content that should be displayed to users."
        },
        "userBannedDetails": {
          "$ref": "LiveChatUserBannedMessageDetails"
        },
        "messageDeletedDetails": {
          "$ref": "LiveChatMessageDeletedDetails"
        },
        "messageRetractedDetails": {
          "$ref": "LiveChatMessageRetractedDetails"
        },
        "superChatDetails": {
          "$ref": "LiveChatSuperChatDetails",
          "description": "Details about the Super Chat event, this is only set if the type is 'superChatEvent'."
        },
        "displayMessage": {
          "type": "string",
          "description": "Contains a string that can be displayed to the user. If this field is not present the message is silent, at the moment only messages of type TOMBSTONE and CHAT_ENDED_EVENT are silent."
        },
        "textMessageDetails": {
          "$ref": "LiveChatTextMessageDetails",
          "description": "Details about the text message, this is only set if the type is 'textMessageEvent'."
        },
        "authorChannelId": {
          "type": "string",
          "description": "The ID of the user that authored this message, this field is not always filled. textMessageEvent - the user that wrote the message fanFundingEvent - the user that funded the broadcast newSponsorEvent - the user that just became a sponsor messageDeletedEvent - the moderator that took the action messageRetractedEvent - the author that retracted their message userBannedEvent - the moderator that took the action superChatEvent - the user that made the purchase"
        },
        "liveChatId": {
          "type": "string"
        },
        "fanFundingEventDetails": {
          "$ref": "LiveChatFanFundingEventDetails",
          "description": "Details about the funding event, this is only set if the type is 'fanFundingEvent'."
        },
        "type": {
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "type": "string",
          "description": "The type of message, this will always be present, it determines the contents of the message as well as which fields will be present.",
          "enum": [
            "invalidType",
            "textMessageEvent",
            "tombstone",
            "fanFundingEvent",
            "chatEndedEvent",
            "sponsorOnlyModeStartedEvent",
            "sponsorOnlyModeEndedEvent",
            "newSponsorEvent",
            "messageDeletedEvent",
            "messageRetractedEvent",
            "userBannedEvent",
            "superChatEvent",
            "superStickerEvent"
          ]
        },
        "superStickerDetails": {
          "$ref": "LiveChatSuperStickerDetails",
          "description": "Details about the Super Sticker event, this is only set if the type is 'superStickerEvent'."
        },
        "publishedAt": {
          "description": "The date and time when the message was orignally published.",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object",
      "id": "LiveChatMessageSnippet"
    },
    "SubscriptionListResponse": {
      "id": "SubscriptionListResponse",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "Subscription"
          },
          "description": "A list of subscriptions that match the request criteria."
        },
        "prevPageToken": {
          "type": "string",
          "description": "The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set."
        },
        "visitorId": {
          "description": "The visitorId identifies the visitor.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "youtube#subscriptionListResponse",
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#subscriptionListResponse\"."
        },
        "pageInfo": {
          "$ref": "PageInfo"
        },
        "etag": {
          "description": "Etag of this resource.",
          "type": "string"
        },
        "tokenPagination": {
          "$ref": "TokenPagination"
        },
        "eventId": {
          "type": "string",
          "description": "Serialized EventId of the request which produced this response."
        },
        "nextPageToken": {
          "type": "string",
          "description": "The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set."
        }
      },
      "type": "object"
    },
    "VideoFileDetailsAudioStream": {
      "properties": {
        "bitrateBps": {
          "description": "The audio stream's bitrate, in bits per second.",
          "format": "uint64",
          "type": "string"
        },
        "codec": {
          "type": "string",
          "description": "The audio codec that the stream uses."
        },
        "vendor": {
          "type": "string",
          "description": "A value that uniquely identifies a video vendor. Typically, the value is a four-letter vendor code."
        },
        "channelCount": {
          "type": "integer",
          "description": "The number of audio channels that the stream contains.",
          "format": "uint32"
        }
      },
      "id": "VideoFileDetailsAudioStream",
      "description": "Information about an audio stream.",
      "type": "object"
    },
    "VideoRecordingDetails": {
      "id": "VideoRecordingDetails",
      "description": "Recording information associated with the video.",
      "properties": {
        "location": {
          "description": "The geolocation information associated with the video.",
          "$ref": "GeoPoint"
        },
        "locationDescription": {
          "type": "string",
          "description": "The text description of the location where the video was recorded."
        },
        "recordingDate": {
          "description": "The date and time when the video was recorded.",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ChannelSectionListResponse": {
      "type": "object",
      "properties": {
        "items": {
          "description": "A list of ChannelSections that match the request criteria.",
          "type": "array",
          "items": {
            "$ref": "ChannelSection"
          }
        },
        "eventId": {
          "description": "Serialized EventId of the request which produced this response.",
          "type": "string"
        },
        "kind": {
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#channelSectionListResponse\".",
          "default": "youtube#channelSectionListResponse",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "Etag of this resource."
        },
        "visitorId": {
          "description": "The visitorId identifies the visitor.",
          "type": "string"
        }
      },
      "id": "ChannelSectionListResponse"
    },
    "ChannelSectionLocalization": {
      "id": "ChannelSectionLocalization",
      "description": "ChannelSection localization setting",
      "properties": {
        "title": {
          "description": "The localized strings for channel section's title.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ChannelToStoreLinkDetails": {
      "description": "Information specific to a store on a merchandising platform linked to a YouTube channel.",
      "properties": {
        "storeName": {
          "description": "Name of the store.",
          "type": "string"
        },
        "storeUrl": {
          "description": "Landing page of the store.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "ChannelToStoreLinkDetails"
    },
    "PropertyValue": {
      "type": "object",
      "description": "A pair Property / Value.",
      "properties": {
        "value": {
          "description": "The property's value.",
          "type": "string"
        },
        "property": {
          "description": "A property.",
          "type": "string"
        }
      },
      "id": "PropertyValue"
    },
    "CaptionListResponse": {
      "properties": {
        "eventId": {
          "type": "string",
          "description": "Serialized EventId of the request which produced this response."
        },
        "etag": {
          "description": "Etag of this resource.",
          "type": "string"
        },
        "kind": {
          "default": "youtube#captionListResponse",
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#captionListResponse\".",
          "type": "string"
        },
        "visitorId": {
          "type": "string",
          "description": "The visitorId identifies the visitor."
        },
        "items": {
          "description": "A list of captions that match the request criteria.",
          "type": "array",
          "items": {
            "$ref": "Caption"
          }
        }
      },
      "type": "object",
      "id": "CaptionListResponse"
    },
    "LiveChatMessageRetractedDetails": {
      "properties": {
        "retractedMessageId": {
          "type": "string"
        }
      },
      "type": "object",
      "id": "LiveChatMessageRetractedDetails"
    },
    "ThumbnailSetResponse": {
      "type": "object",
      "id": "ThumbnailSetResponse",
      "properties": {
        "kind": {
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#thumbnailSetResponse\".",
          "type": "string",
          "default": "youtube#thumbnailSetResponse"
        },
        "eventId": {
          "type": "string",
          "description": "Serialized EventId of the request which produced this response."
        },
        "etag": {
          "description": "Etag of this resource.",
          "type": "string"
        },
        "visitorId": {
          "type": "string",
          "description": "The visitorId identifies the visitor."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "ThumbnailDetails"
          },
          "description": "A list of thumbnails."
        }
      }
    },
    "ChannelSectionTargeting": {
      "description": "ChannelSection targeting setting.",
      "properties": {
        "regions": {
          "type": "array",
          "description": "The region the channel section is targeting.",
          "items": {
            "type": "string"
          }
        },
        "languages": {
          "description": "The language the channel section is targeting.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "countries": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "The country the channel section is targeting."
        }
      },
      "id": "ChannelSectionTargeting",
      "type": "object"
    },
    "VideoAbuseReportReason": {
      "type": "object",
      "description": "A `__videoAbuseReportReason__` resource identifies a reason that a video could be reported as abusive. Video abuse report reasons are used with `video.ReportAbuse`.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of this abuse report reason."
        },
        "etag": {
          "type": "string",
          "description": "Etag of this resource."
        },
        "snippet": {
          "description": "The `snippet` object contains basic details about the abuse report reason.",
          "$ref": "VideoAbuseReportReasonSnippet"
        },
        "kind": {
          "default": "youtube#videoAbuseReportReason",
          "description": "Identifies what kind of resource this is. Value: the fixed string `\"youtube#videoAbuseReportReason\"`.",
          "type": "string"
        }
      },
      "id": "VideoAbuseReportReason"
    },
    "MembershipsLevelSnippet": {
      "id": "MembershipsLevelSnippet",
      "type": "object",
      "properties": {
        "levelDetails": {
          "$ref": "LevelDetails",
          "description": "Details about the pricing level."
        },
        "creatorChannelId": {
          "type": "string",
          "description": "The id of the channel that's offering channel memberships."
        }
      }
    },
    "VideoAbuseReportSecondaryReason": {
      "properties": {
        "label": {
          "description": "The localized label for this abuse report secondary reason.",
          "type": "string"
        },
        "id": {
          "description": "The ID of this abuse report secondary reason.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "VideoAbuseReportSecondaryReason"
    },
    "ThirdPartyLink": {
      "description": "A *third party account link* resource represents a link between a YouTube account or a channel and an account on a third-party service.",
      "properties": {
        "linkingToken": {
          "type": "string",
          "description": "The linking_token identifies a YouTube account and channel with which the third party account is linked."
        },
        "etag": {
          "description": "Etag of this resource",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#thirdPartyLink\".",
          "default": "youtube#thirdPartyLink"
        },
        "status": {
          "description": "The status object contains information about the status of the link.",
          "$ref": "ThirdPartyLinkStatus"
        },
        "snippet": {
          "$ref": "ThirdPartyLinkSnippet",
          "description": "The snippet object contains basic details about the third- party account link."
        }
      },
      "type": "object",
      "id": "ThirdPartyLink"
    },
    "ChannelBannerResource": {
      "description": "A channel banner returned as the response to a channel_banner.insert call.",
      "properties": {
        "url": {
          "description": "The URL of this banner image.",
          "type": "string"
        },
        "etag": {
          "type": "string"
        },
        "kind": {
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#channelBannerResource\".",
          "type": "string",
          "default": "youtube#channelBannerResource"
        }
      },
      "id": "ChannelBannerResource",
      "type": "object"
    },
    "SubscriptionSnippet": {
      "type": "object",
      "id": "SubscriptionSnippet",
      "description": "Basic details about a subscription, including title, description and thumbnails of the subscribed item.",
      "properties": {
        "publishedAt": {
          "description": "The date and time that the subscription was created.",
          "format": "date-time",
          "type": "string"
        },
        "channelId": {
          "description": "The ID that YouTube uses to uniquely identify the subscriber's channel.",
          "type": "string"
        },
        "resourceId": {
          "$ref": "ResourceId",
          "annotations": {
            "required": [
              "youtube.subscriptions.insert"
            ]
          },
          "description": "The id object contains information about the channel that the user subscribed to."
        },
        "channelTitle": {
          "type": "string",
          "description": "Channel title for the channel that the subscription belongs to."
        },
        "title": {
          "type": "string",
          "description": "The subscription's title."
        },
        "thumbnails": {
          "description": "A map of thumbnail images associated with the video. For each object in the map, the key is the name of the thumbnail image, and the value is an object that contains other information about the thumbnail.",
          "$ref": "ThumbnailDetails"
        },
        "description": {
          "description": "The subscription's details.",
          "type": "string"
        }
      }
    },
    "VideoRating": {
      "properties": {
        "videoId": {
          "type": "string",
          "description": "The ID that YouTube uses to uniquely identify the video."
        },
        "rating": {
          "enumDescriptions": [
            "",
            "The entity is liked.",
            "The entity is disliked."
          ],
          "enum": [
            "none",
            "like",
            "dislike"
          ],
          "description": "Rating of a video.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "VideoRating",
      "description": "Basic details about rating of a video."
    },
    "ChannelListResponse": {
      "id": "ChannelListResponse",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "description": "The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.",
          "type": "string"
        },
        "tokenPagination": {
          "$ref": "TokenPagination"
        },
        "kind": {
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#channelListResponse\".",
          "default": "youtube#channelListResponse",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "Etag of this resource."
        },
        "visitorId": {
          "type": "string",
          "description": "The visitorId identifies the visitor."
        },
        "eventId": {
          "type": "string",
          "description": "Serialized EventId of the request which produced this response."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "Channel"
          }
        },
        "pageInfo": {
          "$ref": "PageInfo",
          "description": "General pagination information."
        },
        "prevPageToken": {
          "description": "The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.",
          "type": "string"
        }
      }
    },
    "PlaylistItemListResponse": {
      "id": "PlaylistItemListResponse",
      "type": "object",
      "properties": {
        "kind": {
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#playlistItemListResponse\". Etag of this resource.",
          "type": "string",
          "default": "youtube#playlistItemListResponse"
        },
        "prevPageToken": {
          "type": "string",
          "description": "The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set."
        },
        "pageInfo": {
          "$ref": "PageInfo",
          "description": "General pagination information."
        },
        "eventId": {
          "type": "string",
          "description": "Serialized EventId of the request which produced this response."
        },
        "tokenPagination": {
          "$ref": "TokenPagination"
        },
        "etag": {
          "type": "string"
        },
        "items": {
          "description": "A list of playlist items that match the request criteria.",
          "type": "array",
          "items": {
            "$ref": "PlaylistItem"
          }
        },
        "visitorId": {
          "type": "string",
          "description": "The visitorId identifies the visitor."
        },
        "nextPageToken": {
          "description": "The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.",
          "type": "string"
        }
      }
    },
    "PageInfo": {
      "description": "Paging details for lists of resources, including total number of items available and number of resources returned in a single page.",
      "id": "PageInfo",
      "type": "object",
      "properties": {
        "totalResults": {
          "format": "int32",
          "type": "integer",
          "description": "The total number of results in the result set."
        },
        "resultsPerPage": {
          "description": "The number of results included in the API response.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "WatchSettings": {
      "type": "object",
      "description": "Branding properties for the watch. All deprecated.",
      "properties": {
        "backgroundColor": {
          "description": "The text color for the video watch page's branded area.",
          "type": "string"
        },
        "featuredPlaylistId": {
          "type": "string",
          "description": "An ID that uniquely identifies a playlist that displays next to the video player."
        },
        "textColor": {
          "description": "The background color for the video watch page's branded area.",
          "type": "string"
        }
      },
      "id": "WatchSettings"
    },
    "ThirdPartyLinkSnippet": {
      "description": "Basic information about a third party account link, including its type and type-specific information.",
      "id": "ThirdPartyLinkSnippet",
      "properties": {
        "channelToStoreLink": {
          "description": "Information specific to a link between a channel and a store on a merchandising platform.",
          "$ref": "ChannelToStoreLinkDetails"
        },
        "type": {
          "description": "Type of the link named after the entities that are being linked.",
          "type": "string",
          "enumDescriptions": [
            "",
            "A link that is connecting (or about to connect) a channel with a store on a merchandising platform in order to enable retail commerce capabilities for that channel on YouTube."
          ],
          "enum": [
            "linkUnspecified",
            "channelToStoreLink"
          ]
        }
      },
      "type": "object"
    },
    "AbuseType": {
      "id": "AbuseType",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "ActivityContentDetailsSocial": {
      "description": "Details about a social network post.",
      "type": "object",
      "id": "ActivityContentDetailsSocial",
      "properties": {
        "referenceUrl": {
          "description": "The URL of the social network post.",
          "type": "string"
        },
        "imageUrl": {
          "type": "string",
          "description": "An image of the post's author."
        },
        "author": {
          "type": "string",
          "description": "The author of the social network post."
        },
        "type": {
          "description": "The name of the social network.",
          "type": "string",
          "enum": [
            "typeUnspecified",
            "googlePlus",
            "facebook",
            "twitter"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ]
        },
        "resourceId": {
          "$ref": "ResourceId",
          "description": "The resourceId object encapsulates information that identifies the resource associated with a social network post."
        }
      }
    },
    "MembershipsLevelListResponse": {
      "id": "MembershipsLevelListResponse",
      "type": "object",
      "properties": {
        "items": {
          "description": "A list of pricing levels offered by a creator to the fans.",
          "type": "array",
          "items": {
            "$ref": "MembershipsLevel"
          }
        },
        "visitorId": {
          "type": "string",
          "description": "The visitorId identifies the visitor."
        },
        "etag": {
          "type": "string",
          "description": "Etag of this resource."
        },
        "eventId": {
          "description": "Serialized EventId of the request which produced this response.",
          "type": "string"
        },
        "kind": {
          "default": "youtube#membershipsLevelListResponse",
          "type": "string",
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#membershipsLevelListResponse\"."
        }
      }
    },
    "SearchListResponse": {
      "id": "SearchListResponse",
      "properties": {
        "eventId": {
          "description": "Serialized EventId of the request which produced this response.",
          "type": "string"
        },
        "visitorId": {
          "description": "The visitorId identifies the visitor.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "youtube#searchListResponse",
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#searchListResponse\"."
        },
        "nextPageToken": {
          "description": "The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.",
          "type": "string"
        },
        "pageInfo": {
          "description": "General pagination information.",
          "$ref": "PageInfo"
        },
        "regionCode": {
          "type": "string"
        },
        "tokenPagination": {
          "$ref": "TokenPagination"
        },
        "etag": {
          "description": "Etag of this resource.",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "SearchResult"
          },
          "type": "array",
          "description": "Pagination information for token pagination."
        },
        "prevPageToken": {
          "description": "The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "VideoFileDetails": {
      "id": "VideoFileDetails",
      "description": "Describes original video file properties, including technical details about audio and video streams, but also metadata information like content length, digitization time, or geotagging information.",
      "properties": {
        "fileType": {
          "type": "string",
          "enumDescriptions": [
            "Known video file (e.g., an MP4 file).",
            "Audio only file (e.g., an MP3 file).",
            "Image file (e.g., a JPEG image).",
            "Archive file (e.g., a ZIP archive).",
            "Document or text file (e.g., MS Word document).",
            "Movie project file (e.g., Microsoft Windows Movie Maker project).",
            "Other non-video file type."
          ],
          "enum": [
            "video",
            "audio",
            "image",
            "archive",
            "document",
            "project",
            "other"
          ],
          "description": "The uploaded file's type as detected by YouTube's video processing engine. Currently, YouTube only processes video files, but this field is present whether a video file or another type of file was uploaded."
        },
        "durationMs": {
          "type": "string",
          "description": "The length of the uploaded video in milliseconds.",
          "format": "uint64"
        },
        "audioStreams": {
          "description": "A list of audio streams contained in the uploaded video file. Each item in the list contains detailed metadata about an audio stream.",
          "items": {
            "$ref": "VideoFileDetailsAudioStream"
          },
          "type": "array"
        },
        "fileName": {
          "type": "string",
          "description": "The uploaded file's name. This field is present whether a video file or another type of file was uploaded."
        },
        "container": {
          "description": "The uploaded video file's container format.",
          "type": "string"
        },
        "videoStreams": {
          "description": "A list of video streams contained in the uploaded video file. Each item in the list contains detailed metadata about a video stream.",
          "items": {
            "$ref": "VideoFileDetailsVideoStream"
          },
          "type": "array"
        },
        "bitrateBps": {
          "type": "string",
          "format": "uint64",
          "description": "The uploaded video file's combined (video and audio) bitrate in bits per second."
        },
        "creationTime": {
          "type": "string",
          "description": "The date and time when the uploaded video file was created. The value is specified in ISO 8601 format. Currently, the following ISO 8601 formats are supported: - Date only: YYYY-MM-DD - Naive time: YYYY-MM-DDTHH:MM:SS - Time with timezone: YYYY-MM-DDTHH:MM:SS+HH:MM "
        },
        "fileSize": {
          "type": "string",
          "format": "uint64",
          "description": "The uploaded file's size in bytes. This field is present whether a video file or another type of file was uploaded."
        }
      },
      "type": "object"
    },
    "LocalizedProperty": {
      "properties": {
        "defaultLanguage": {
          "description": "The language of the default property.",
          "$ref": "LanguageTag"
        },
        "default": {
          "type": "string"
        },
        "localized": {
          "items": {
            "$ref": "LocalizedString"
          },
          "type": "array"
        }
      },
      "type": "object",
      "id": "LocalizedProperty"
    },
    "ChannelSnippet": {
      "id": "ChannelSnippet",
      "description": "Basic details about a channel, including title, description and thumbnails.",
      "type": "object",
      "properties": {
        "customUrl": {
          "type": "string",
          "description": "The custom url of the channel."
        },
        "thumbnails": {
          "description": "A map of thumbnail images associated with the channel. For each object in the map, the key is the name of the thumbnail image, and the value is an object that contains other information about the thumbnail. When displaying thumbnails in your application, make sure that your code uses the image URLs exactly as they are returned in API responses. For example, your application should not use the http domain instead of the https domain in a URL returned in an API response. Beginning in July 2018, channel thumbnail URLs will only be available in the https domain, which is how the URLs appear in API responses. After that time, you might see broken images in your application if it tries to load YouTube images from the http domain. Thumbnail images might be empty for newly created channels and might take up to one day to populate.",
          "$ref": "ThumbnailDetails"
        },
        "description": {
          "description": "The description of the channel.",
          "type": "string"
        },
        "title": {
          "description": "The channel's title.",
          "type": "string"
        },
        "publishedAt": {
          "type": "string",
          "description": "The date and time that the channel was created.",
          "format": "date-time"
        },
        "localized": {
          "$ref": "ChannelLocalization",
          "description": "Localized title and description, read-only."
        },
        "country": {
          "description": "The country of the channel.",
          "type": "string"
        },
        "defaultLanguage": {
          "description": "The language of the channel's default title and description.",
          "type": "string"
        }
      }
    },
    "VideoGetRatingResponse": {
      "type": "object",
      "properties": {
        "visitorId": {
          "description": "The visitorId identifies the visitor.",
          "type": "string"
        },
        "items": {
          "description": "A list of ratings that match the request criteria.",
          "type": "array",
          "items": {
            "$ref": "VideoRating"
          }
        },
        "eventId": {
          "description": "Serialized EventId of the request which produced this response.",
          "type": "string"
        },
        "etag": {
          "description": "Etag of this resource.",
          "type": "string"
        },
        "kind": {
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#videoGetRatingResponse\".",
          "default": "youtube#videoGetRatingResponse",
          "type": "string"
        }
      },
      "id": "VideoGetRatingResponse"
    },
    "ChannelSectionSnippet": {
      "type": "object",
      "id": "ChannelSectionSnippet",
      "properties": {
        "position": {
          "description": "The position of the channel section in the channel.",
          "type": "integer",
          "format": "uint32"
        },
        "title": {
          "description": "The channel section's title for multiple_playlists and multiple_channels.",
          "type": "string"
        },
        "style": {
          "description": "The style of the channel section.",
          "enum": [
            "channelsectionStyleUnspecified",
            "horizontalRow",
            "verticalList"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "channelId": {
          "description": "The ID that YouTube uses to uniquely identify the channel that published the channel section.",
          "type": "string"
        },
        "type": {
          "enum": [
            "channelsectionTypeUnspecified",
            "singlePlaylist",
            "multiplePlaylists",
            "popularUploads",
            "recentUploads",
            "likes",
            "allPlaylists",
            "likedPlaylists",
            "recentPosts",
            "recentActivity",
            "liveEvents",
            "upcomingEvents",
            "completedEvents",
            "multipleChannels",
            "postedVideos",
            "postedPlaylists",
            "subscriptions"
          ],
          "type": "string",
          "description": "The type of the channel section.",
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ]
        },
        "localized": {
          "description": "Localized title, read-only.",
          "$ref": "ChannelSectionLocalization"
        },
        "defaultLanguage": {
          "type": "string",
          "description": "The language of the channel section's default title and description."
        }
      },
      "description": "Basic details about a channel section, including title, style and position."
    },
    "LiveChatFanFundingEventDetails": {
      "properties": {
        "amountDisplayString": {
          "description": "A rendered string that displays the fund amount and currency to the user.",
          "type": "string"
        },
        "userComment": {
          "description": "The comment added by the user to this fan funding event.",
          "type": "string"
        },
        "currency": {
          "description": "The currency in which the fund was made.",
          "type": "string"
        },
        "amountMicros": {
          "description": "The amount of the fund.",
          "format": "uint64",
          "type": "string"
        }
      },
      "type": "object",
      "id": "LiveChatFanFundingEventDetails"
    },
    "LiveStreamConfigurationIssue": {
      "properties": {
        "severity": {
          "enum": [
            "info",
            "warning",
            "error"
          ],
          "description": "How severe this issue is to the stream.",
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            ""
          ]
        },
        "reason": {
          "type": "string",
          "description": "The short-form reason for this issue."
        },
        "type": {
          "description": "The kind of error happening.",
          "enum": [
            "gopSizeOver",
            "gopSizeLong",
            "gopSizeShort",
            "openGop",
            "badContainer",
            "audioBitrateHigh",
            "audioBitrateLow",
            "audioSampleRate",
            "bitrateHigh",
            "bitrateLow",
            "audioCodec",
            "videoCodec",
            "noAudioStream",
            "noVideoStream",
            "multipleVideoStreams",
            "multipleAudioStreams",
            "audioTooManyChannels",
            "interlacedVideo",
            "frameRateHigh",
            "resolutionMismatch",
            "videoCodecMismatch",
            "videoInterlaceMismatch",
            "videoProfileMismatch",
            "videoBitrateMismatch",
            "framerateMismatch",
            "gopMismatch",
            "audioSampleRateMismatch",
            "audioStereoMismatch",
            "audioCodecMismatch",
            "audioBitrateMismatch",
            "videoResolutionSuboptimal",
            "videoResolutionUnsupported",
            "videoIngestionStarved",
            "videoIngestionFasterThanRealtime"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "description": {
          "description": "The long-form description of the issue and how to resolve it.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "LiveStreamConfigurationIssue"
    },
    "VideoSnippet": {
      "properties": {
        "tags": {
          "type": "array",
          "description": "A list of keyword tags associated with the video. Tags may contain spaces.",
          "items": {
            "type": "string"
          }
        },
        "defaultAudioLanguage": {
          "description": "The default_audio_language property specifies the language spoken in the video's default audio track.",
          "type": "string"
        },
        "defaultLanguage": {
          "type": "string",
          "description": "The language of the videos's default snippet."
        },
        "localized": {
          "$ref": "VideoLocalization",
          "description": "Localized snippet selected with the hl parameter. If no such localization exists, this field is populated with the default snippet. (Read-only)"
        },
        "thumbnails": {
          "$ref": "ThumbnailDetails",
          "description": "A map of thumbnail images associated with the video. For each object in the map, the key is the name of the thumbnail image, and the value is an object that contains other information about the thumbnail."
        },
        "channelTitle": {
          "type": "string",
          "description": "Channel title for the channel that the video belongs to."
        },
        "publishedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time when the video was uploaded."
        },
        "categoryId": {
          "type": "string",
          "description": "The YouTube video category associated with the video."
        },
        "channelId": {
          "description": "The ID that YouTube uses to uniquely identify the channel that the video was uploaded to.",
          "type": "string"
        },
        "liveBroadcastContent": {
          "enumDescriptions": [
            "",
            "The live broadcast is upcoming.",
            "The live broadcast is active.",
            "The live broadcast has been completed."
          ],
          "type": "string",
          "enum": [
            "none",
            "upcoming",
            "live",
            "completed"
          ],
          "description": "Indicates if the video is an upcoming/active live broadcast. Or it's \"none\" if the video is not an upcoming/active live broadcast."
        },
        "title": {
          "type": "string",
          "description": "The video's title. @mutable youtube.videos.insert youtube.videos.update"
        },
        "description": {
          "description": "The video's description. @mutable youtube.videos.insert youtube.videos.update",
          "type": "string"
        }
      },
      "id": "VideoSnippet",
      "type": "object",
      "description": "Basic details about a video, including title, description, uploader, thumbnails and category."
    },
    "TestItem": {
      "type": "object",
      "id": "TestItem",
      "properties": {
        "snippet": {
          "$ref": "TestItemTestItemSnippet"
        },
        "gaia": {
          "format": "int64",
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "VideoCategory": {
      "id": "VideoCategory",
      "description": "A *videoCategory* resource identifies a category that has been or could be associated with uploaded videos.",
      "type": "object",
      "properties": {
        "kind": {
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#videoCategory\".",
          "default": "youtube#videoCategory",
          "type": "string"
        },
        "snippet": {
          "description": "The snippet object contains basic details about the video category, including its title.",
          "$ref": "VideoCategorySnippet"
        },
        "etag": {
          "description": "Etag of this resource.",
          "type": "string"
        },
        "id": {
          "description": "The ID that YouTube uses to uniquely identify the video category.",
          "type": "string"
        }
      }
    },
    "MemberListResponse": {
      "properties": {
        "visitorId": {
          "description": "The visitorId identifies the visitor.",
          "type": "string"
        },
        "etag": {
          "description": "Etag of this resource.",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string",
          "description": "The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set."
        },
        "eventId": {
          "type": "string",
          "description": "Serialized EventId of the request which produced this response."
        },
        "tokenPagination": {
          "$ref": "TokenPagination"
        },
        "kind": {
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#memberListResponse\".",
          "type": "string",
          "default": "youtube#memberListResponse"
        },
        "pageInfo": {
          "$ref": "PageInfo"
        },
        "items": {
          "items": {
            "$ref": "Member"
          },
          "description": "A list of members that match the request criteria.",
          "type": "array"
        }
      },
      "id": "MemberListResponse",
      "type": "object"
    },
    "VideoCategorySnippet": {
      "description": "Basic details about a video category, such as its localized title.",
      "type": "object",
      "id": "VideoCategorySnippet",
      "properties": {
        "assignable": {
          "type": "boolean"
        },
        "channelId": {
          "description": "The YouTube channel that created the video category.",
          "type": "string",
          "default": "UCBR8-60-B28hp2BmDPdntcQ"
        },
        "title": {
          "type": "string",
          "description": "The video category's title."
        }
      }
    },
    "VideoTopicDetails": {
      "type": "object",
      "properties": {
        "topicCategories": {
          "type": "array",
          "description": "A list of Wikipedia URLs that provide a high-level description of the video's content.",
          "items": {
            "type": "string"
          }
        },
        "topicIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of Freebase topic IDs that are centrally associated with the video. These are topics that are centrally featured in the video, and it can be said that the video is mainly about each of these. You can retrieve information about each topic using the \u003c a href=\"http://wiki.freebase.com/wiki/Topic_API\"\u003eFreebase Topic API."
        },
        "relevantTopicIds": {
          "type": "array",
          "description": "Similar to topic_id, except that these topics are merely relevant to the video. These are topics that may be mentioned in, or appear in the video. You can retrieve information about each topic using Freebase Topic API.",
          "items": {
            "type": "string"
          }
        }
      },
      "id": "VideoTopicDetails",
      "description": "Freebase topic information related to the video."
    },
    "Activity": {
      "type": "object",
      "description": "An *activity* resource contains information about an action that a particular channel, or user, has taken on YouTube.The actions reported in activity feeds include rating a video, sharing a video, marking a video as a favorite, commenting on a video, uploading a video, and so forth. Each activity resource identifies the type of action, the channel associated with the action, and the resource(s) associated with the action, such as the video that was rated or uploaded.",
      "id": "Activity",
      "properties": {
        "kind": {
          "default": "youtube#activity",
          "type": "string",
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#activity\"."
        },
        "snippet": {
          "description": "The snippet object contains basic details about the activity, including the activity's type and group ID.",
          "$ref": "ActivitySnippet"
        },
        "etag": {
          "type": "string",
          "description": "Etag of this resource"
        },
        "id": {
          "description": "The ID that YouTube uses to uniquely identify the activity.",
          "type": "string"
        },
        "contentDetails": {
          "description": "The contentDetails object contains information about the content associated with the activity. For example, if the snippet.type value is videoRated, then the contentDetails object's content identifies the rated video.",
          "$ref": "ActivityContentDetails"
        }
      }
    },
    "MembershipsLevel": {
      "properties": {
        "etag": {
          "description": "Etag of this resource.",
          "type": "string"
        },
        "id": {
          "description": "The ID that YouTube assigns to uniquely identify the memberships level.",
          "type": "string"
        },
        "snippet": {
          "description": "The snippet object contains basic details about the level.",
          "$ref": "MembershipsLevelSnippet"
        },
        "kind": {
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#membershipsLevelListResponse\".",
          "default": "youtube#membershipsLevel",
          "type": "string"
        }
      },
      "id": "MembershipsLevel",
      "description": "A *membershipsLevel* resource represents an offer made by YouTube creators for their fans. Users can become members of the channel by joining one of the available levels. They will provide recurring monetary support and receives special benefits.",
      "type": "object"
    },
    "VideoAgeGating": {
      "properties": {
        "videoGameRating": {
          "enum": [
            "anyone",
            "m15Plus",
            "m16Plus",
            "m17Plus"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "type": "string",
          "description": "Video game rating, if any."
        },
        "alcoholContent": {
          "type": "boolean",
          "description": "Indicates whether or not the video has alcoholic beverage content. Only users of legal purchasing age in a particular country, as identified by ICAP, can view the content."
        },
        "restricted": {
          "description": "Age-restricted trailers. For redband trailers and adult-rated video-games. Only users aged 18+ can view the content. The the field is true the content is restricted to viewers aged 18+. Otherwise The field won't be present.",
          "type": "boolean"
        }
      },
      "id": "VideoAgeGating",
      "type": "object"
    },
    "PlaylistListResponse": {
      "id": "PlaylistListResponse",
      "properties": {
        "items": {
          "type": "array",
          "description": "A list of playlists that match the request criteria",
          "items": {
            "$ref": "Playlist"
          }
        },
        "etag": {
          "type": "string",
          "description": "Etag of this resource."
        },
        "prevPageToken": {
          "description": "The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.",
          "type": "string"
        },
        "eventId": {
          "type": "string",
          "description": "Serialized EventId of the request which produced this response."
        },
        "pageInfo": {
          "description": "General pagination information.",
          "$ref": "PageInfo"
        },
        "kind": {
          "type": "string",
          "default": "youtube#playlistListResponse",
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#playlistListResponse\"."
        },
        "visitorId": {
          "type": "string",
          "description": "The visitorId identifies the visitor."
        },
        "nextPageToken": {
          "type": "string",
          "description": "The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set."
        },
        "tokenPagination": {
          "$ref": "TokenPagination"
        }
      },
      "type": "object"
    },
    "LiveChatMessageAuthorDetails": {
      "id": "LiveChatMessageAuthorDetails",
      "type": "object",
      "properties": {
        "profileImageUrl": {
          "type": "string",
          "description": "The channels's avatar URL."
        },
        "isChatOwner": {
          "type": "boolean",
          "description": "Whether the author is the owner of the live chat."
        },
        "channelId": {
          "type": "string",
          "description": "The YouTube channel ID."
        },
        "channelUrl": {
          "type": "string",
          "description": "The channel's URL."
        },
        "isChatSponsor": {
          "description": "Whether the author is a sponsor of the live chat.",
          "type": "boolean"
        },
        "displayName": {
          "description": "The channel's display name.",
          "type": "string"
        },
        "isChatModerator": {
          "description": "Whether the author is a moderator of the live chat.",
          "type": "boolean"
        },
        "isVerified": {
          "type": "boolean",
          "description": "Whether the author's identity has been verified by YouTube."
        }
      }
    },
    "MembershipsDetails": {
      "type": "object",
      "properties": {
        "highestAccessibleLevelDisplayName": {
          "description": "Display name for the highest level that the user has access to at the moment.",
          "type": "string"
        },
        "accessibleLevels": {
          "items": {
            "type": "string"
          },
          "description": "Ids of all levels that the user has access to. This includes the currently active level and all other levels that are included because of a higher purchase.",
          "type": "array"
        },
        "membershipsDuration": {
          "$ref": "MembershipsDuration",
          "description": "Data about memberships duration without taking into consideration pricing levels."
        },
        "membershipsDurationAtLevels": {
          "items": {
            "$ref": "MembershipsDurationAtLevel"
          },
          "type": "array",
          "description": "Data about memberships duration on particular pricing levels."
        },
        "highestAccessibleLevel": {
          "type": "string",
          "description": "Id of the highest level that the user has access to at the moment."
        }
      },
      "id": "MembershipsDetails"
    },
    "ActivityContentDetailsPlaylistItem": {
      "properties": {
        "playlistId": {
          "description": "The value that YouTube uses to uniquely identify the playlist.",
          "type": "string"
        },
        "playlistItemId": {
          "description": "ID of the item within the playlist.",
          "type": "string"
        },
        "resourceId": {
          "description": "The resourceId object contains information about the resource that was added to the playlist.",
          "$ref": "ResourceId"
        }
      },
      "description": "Information about a new playlist item.",
      "id": "ActivityContentDetailsPlaylistItem",
      "type": "object"
    },
    "ContentRating": {
      "id": "ContentRating",
      "type": "object",
      "properties": {
        "skfilmRating": {
          "description": "The video's rating in Slovakia.",
          "enum": [
            "skfilmUnspecified",
            "skfilmG",
            "skfilmP2",
            "skfilmP5",
            "skfilmP8",
            "skfilmUnrated"
          ],
          "type": "string",
          "enumDescriptions": [
            "",
            "G",
            "P2",
            "P5",
            "P8",
            ""
          ]
        },
        "mcstRating": {
          "enum": [
            "mcstUnspecified",
            "mcstP",
            "mcst0",
            "mcstC13",
            "mcstC16",
            "mcst16plus",
            "mcstC18",
            "mcstGPg",
            "mcstUnrated"
          ],
          "type": "string",
          "enumDescriptions": [
            "",
            "P",
            "0",
            "C13",
            "C16",
            "16+",
            "C18",
            "MCST_G_PG",
            ""
          ],
          "description": "The video's rating system for Vietnam - MCST"
        },
        "csaRating": {
          "type": "string",
          "enumDescriptions": [
            "",
            "T",
            "10",
            "12",
            "16",
            "18",
            "Interdiction",
            ""
          ],
          "enum": [
            "csaUnspecified",
            "csaT",
            "csa10",
            "csa12",
            "csa16",
            "csa18",
            "csaInterdiction",
            "csaUnrated"
          ],
          "description": "The video's rating from France's Conseil supérieur de l’audiovisuel, which rates broadcast content."
        },
        "tvpgRating": {
          "enumDescriptions": [
            "",
            "TV-Y",
            "TV-Y7",
            "TV-Y7-FV",
            "TV-G",
            "TV-PG",
            "TV-14",
            "TV-MA",
            ""
          ],
          "enum": [
            "tvpgUnspecified",
            "tvpgY",
            "tvpgY7",
            "tvpgY7Fv",
            "tvpgG",
            "tvpgPg",
            "pg14",
            "tvpgMa",
            "tvpgUnrated"
          ],
          "description": "The video's TV Parental Guidelines (TVPG) rating.",
          "type": "string"
        },
        "menaMpaaRating": {
          "description": "The rating system for MENA countries, a clone of MPAA. It is needed to prevent titles go live w/o additional QC check, since some of them can be inappropriate for the countries at all. See b/33408548 for more details.",
          "type": "string",
          "enumDescriptions": [
            "",
            "G",
            "PG",
            "PG-13",
            "R",
            "To keep the same enum values as MPAA's items have, skip NC_17."
          ],
          "enum": [
            "menaMpaaUnspecified",
            "menaMpaaG",
            "menaMpaaPg",
            "menaMpaaPg13",
            "menaMpaaR",
            "menaMpaaUnrated"
          ]
        },
        "chvrsRating": {
          "enumDescriptions": [
            "",
            "G",
            "PG",
            "14A",
            "18A",
            "R",
            "E",
            ""
          ],
          "type": "string",
          "enum": [
            "chvrsUnspecified",
            "chvrsG",
            "chvrsPg",
            "chvrs14a",
            "chvrs18a",
            "chvrsR",
            "chvrsE",
            "chvrsUnrated"
          ],
          "description": "The video's Canadian Home Video Rating System (CHVRS) rating."
        },
        "bbfcRating": {
          "enum": [
            "bbfcUnspecified",
            "bbfcU",
            "bbfcPg",
            "bbfc12a",
            "bbfc12",
            "bbfc15",
            "bbfc18",
            "bbfcR18",
            "bbfcUnrated"
          ],
          "description": "The video's British Board of Film Classification (BBFC) rating.",
          "type": "string",
          "enumDescriptions": [
            "",
            "U",
            "PG",
            "12A",
            "12",
            "15",
            "18",
            "R18",
            ""
          ]
        },
        "russiaRating": {
          "enum": [
            "russiaUnspecified",
            "russia0",
            "russia6",
            "russia12",
            "russia16",
            "russia18",
            "russiaUnrated"
          ],
          "type": "string",
          "description": "The video's National Film Registry of the Russian Federation (MKRF - Russia) rating.",
          "enumDescriptions": [
            "",
            "0+",
            "6+",
            "12+",
            "16+",
            "18+",
            ""
          ]
        },
        "grfilmRating": {
          "description": "The video's rating in Greece.",
          "enumDescriptions": [
            "",
            "K",
            "E",
            "K-12",
            "K-13",
            "K-15",
            "K-17",
            "K-18",
            ""
          ],
          "enum": [
            "grfilmUnspecified",
            "grfilmK",
            "grfilmE",
            "grfilmK12",
            "grfilmK13",
            "grfilmK15",
            "grfilmK17",
            "grfilmK18",
            "grfilmUnrated"
          ],
          "type": "string"
        },
        "lsfRating": {
          "type": "string",
          "enumDescriptions": [
            "",
            "SU",
            "A",
            "BO",
            "13",
            "R",
            "17",
            "D",
            "21",
            ""
          ],
          "enum": [
            "lsfUnspecified",
            "lsfSu",
            "lsfA",
            "lsfBo",
            "lsf13",
            "lsfR",
            "lsf17",
            "lsfD",
            "lsf21",
            "lsfUnrated"
          ],
          "description": "The video's rating from Indonesia's Lembaga Sensor Film."
        },
        "mekuRating": {
          "enum": [
            "mekuUnspecified",
            "mekuS",
            "meku7",
            "meku12",
            "meku16",
            "meku18",
            "mekuUnrated"
          ],
          "type": "string",
          "enumDescriptions": [
            "",
            "S",
            "7",
            "12",
            "16",
            "18",
            ""
          ],
          "description": "The video's rating from Finland's Kansallinen Audiovisuaalinen Instituutti (National Audiovisual Institute)."
        },
        "cscfRating": {
          "description": "The video's rating from Luxembourg's Commission de surveillance de la classification des films (CSCF).",
          "type": "string",
          "enum": [
            "cscfUnspecified",
            "cscfAl",
            "cscfA",
            "cscf6",
            "cscf9",
            "cscf12",
            "cscf16",
            "cscf18",
            "cscfUnrated"
          ],
          "enumDescriptions": [
            "",
            "AL",
            "A",
            "6",
            "9",
            "12",
            "16",
            "18",
            ""
          ]
        },
        "rtcRating": {
          "enum": [
            "rtcUnspecified",
            "rtcAa",
            "rtcA",
            "rtcB",
            "rtcB15",
            "rtcC",
            "rtcD",
            "rtcUnrated"
          ],
          "enumDescriptions": [
            "",
            "AA",
            "A",
            "B",
            "B15",
            "C",
            "D",
            ""
          ],
          "description": "The video's General Directorate of Radio, Television and Cinematography (Mexico) rating.",
          "type": "string"
        },
        "mtrcbRating": {
          "description": "The video's rating from the Movie and Television Review and Classification Board (Philippines).",
          "type": "string",
          "enumDescriptions": [
            "",
            "G",
            "PG",
            "R-13",
            "R-16",
            "R-18",
            "X",
            ""
          ],
          "enum": [
            "mtrcbUnspecified",
            "mtrcbG",
            "mtrcbPg",
            "mtrcbR13",
            "mtrcbR16",
            "mtrcbR18",
            "mtrcbX",
            "mtrcbUnrated"
          ]
        },
        "ecbmctRating": {
          "enum": [
            "ecbmctUnspecified",
            "ecbmctG",
            "ecbmct7a",
            "ecbmct7plus",
            "ecbmct13a",
            "ecbmct13plus",
            "ecbmct15a",
            "ecbmct15plus",
            "ecbmct18plus",
            "ecbmctUnrated"
          ],
          "description": "Rating system in Turkey - Evaluation and Classification Board of the Ministry of Culture and Tourism",
          "type": "string",
          "enumDescriptions": [
            "",
            "G",
            "7A",
            "7+",
            "13A",
            "13+",
            "15A",
            "15+",
            "18+",
            ""
          ]
        },
        "ytRating": {
          "enum": [
            "ytUnspecified",
            "ytAgeRestricted"
          ],
          "enumDescriptions": [
            "",
            ""
          ],
          "type": "string",
          "description": "A rating that YouTube uses to identify age-restricted content."
        },
        "mocRating": {
          "enum": [
            "mocUnspecified",
            "mocE",
            "mocT",
            "moc7",
            "moc12",
            "moc15",
            "moc18",
            "mocX",
            "mocBanned",
            "mocUnrated"
          ],
          "description": "The video's Ministerio de Cultura (Colombia) rating.",
          "type": "string",
          "enumDescriptions": [
            "",
            "E",
            "T",
            "7",
            "12",
            "15",
            "18",
            "X",
            "Banned",
            ""
          ]
        },
        "catvRating": {
          "enumDescriptions": [
            "",
            "C",
            "C8",
            "G",
            "PG",
            "14+",
            "18+",
            "",
            ""
          ],
          "description": "Rating system for Canadian TV - Canadian TV Classification System The video's rating from the Canadian Radio-Television and Telecommunications Commission (CRTC) for Canadian English-language broadcasts. For more information, see the Canadian Broadcast Standards Council website.",
          "type": "string",
          "enum": [
            "catvUnspecified",
            "catvC",
            "catvC8",
            "catvG",
            "catvPg",
            "catv14plus",
            "catv18plus",
            "catvUnrated",
            "catvE"
          ]
        },
        "eefilmRating": {
          "type": "string",
          "description": "The video's rating in Estonia.",
          "enum": [
            "eefilmUnspecified",
            "eefilmPere",
            "eefilmL",
            "eefilmMs6",
            "eefilmK6",
            "eefilmMs12",
            "eefilmK12",
            "eefilmK14",
            "eefilmK16",
            "eefilmUnrated"
          ],
          "enumDescriptions": [
            "",
            "Pere",
            "L",
            "MS-6",
            "K-6",
            "MS-12",
            "K-12",
            "K-14",
            "K-16",
            ""
          ]
        },
        "icaaRating": {
          "enum": [
            "icaaUnspecified",
            "icaaApta",
            "icaa7",
            "icaa12",
            "icaa13",
            "icaa16",
            "icaa18",
            "icaaX",
            "icaaUnrated"
          ],
          "enumDescriptions": [
            "",
            "APTA",
            "7",
            "12",
            "13",
            "16",
            "18",
            "X",
            ""
          ],
          "description": "The video's Instituto de la Cinematografía y de las Artes Audiovisuales (ICAA - Spain) rating.",
          "type": "string"
        },
        "medietilsynetRating": {
          "enum": [
            "medietilsynetUnspecified",
            "medietilsynetA",
            "medietilsynet6",
            "medietilsynet7",
            "medietilsynet9",
            "medietilsynet11",
            "medietilsynet12",
            "medietilsynet15",
            "medietilsynet18",
            "medietilsynetUnrated"
          ],
          "enumDescriptions": [
            "",
            "A",
            "6",
            "7",
            "9",
            "11",
            "12",
            "15",
            "18",
            ""
          ],
          "description": "The video's rating from Medietilsynet, the Norwegian Media Authority.",
          "type": "string"
        },
        "rcnofRating": {
          "description": "The video's rating from the Hungarian Nemzeti Filmiroda, the Rating Committee of the National Office of Film.",
          "enum": [
            "rcnofUnspecified",
            "rcnofI",
            "rcnofIi",
            "rcnofIii",
            "rcnofIv",
            "rcnofV",
            "rcnofVi",
            "rcnofUnrated"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "agcomRating": {
          "enum": [
            "agcomUnspecified",
            "agcomT",
            "agcomVm14",
            "agcomVm18",
            "agcomUnrated"
          ],
          "description": "The video's rating from Italy's Autorità per le Garanzie nelle Comunicazioni (AGCOM).",
          "enumDescriptions": [
            "",
            "T",
            "VM14",
            "VM18",
            ""
          ],
          "type": "string"
        },
        "nmcRating": {
          "enum": [
            "nmcUnspecified",
            "nmcG",
            "nmcPg",
            "nmcPg13",
            "nmcPg15",
            "nmc15plus",
            "nmc18plus",
            "nmc18tc",
            "nmcUnrated"
          ],
          "enumDescriptions": [
            "",
            "G",
            "PG",
            "PG-13",
            "PG-15",
            "15+",
            "18+",
            "18TC",
            ""
          ],
          "description": "The National Media Council ratings system for United Arab Emirates.",
          "type": "string"
        },
        "chfilmRating": {
          "description": "The video's rating in Switzerland.",
          "type": "string",
          "enum": [
            "chfilmUnspecified",
            "chfilm0",
            "chfilm6",
            "chfilm12",
            "chfilm16",
            "chfilm18",
            "chfilmUnrated"
          ],
          "enumDescriptions": [
            "",
            "0",
            "6",
            "12",
            "16",
            "18",
            ""
          ]
        },
        "oflcRating": {
          "enumDescriptions": [
            "",
            "G",
            "PG",
            "M",
            "R13",
            "R15",
            "R16",
            "R18",
            "",
            "RP13",
            "RP16",
            "RP18"
          ],
          "type": "string",
          "description": "The video's Office of Film and Literature Classification (OFLC - New Zealand) rating.",
          "enum": [
            "oflcUnspecified",
            "oflcG",
            "oflcPg",
            "oflcM",
            "oflcR13",
            "oflcR15",
            "oflcR16",
            "oflcR18",
            "oflcUnrated",
            "oflcRp13",
            "oflcRp16",
            "oflcRp18"
          ]
        },
        "cbfcRating": {
          "description": "The video's Central Board of Film Certification (CBFC - India) rating.",
          "enumDescriptions": [
            "",
            "U",
            "U/A",
            "A",
            "S",
            ""
          ],
          "type": "string",
          "enum": [
            "cbfcUnspecified",
            "cbfcU",
            "cbfcUA",
            "cbfcA",
            "cbfcS",
            "cbfcUnrated"
          ]
        },
        "bmukkRating": {
          "enum": [
            "bmukkUnspecified",
            "bmukkAa",
            "bmukk6",
            "bmukk8",
            "bmukk10",
            "bmukk12",
            "bmukk14",
            "bmukk16",
            "bmukkUnrated"
          ],
          "description": "The video's rating from the Austrian Board of Media Classification (Bundesministerium für Unterricht, Kunst und Kultur).",
          "enumDescriptions": [
            "",
            "Unrestricted",
            "6+",
            "8+",
            "10+",
            "12+",
            "14+",
            "16+",
            ""
          ],
          "type": "string"
        },
        "nbcRating": {
          "enumDescriptions": [
            "",
            "G",
            "PG",
            "12+",
            "15+",
            "18+",
            "18+R",
            "PU",
            ""
          ],
          "description": "The video's rating from the Maldives National Bureau of Classification.",
          "type": "string",
          "enum": [
            "nbcUnspecified",
            "nbcG",
            "nbcPg",
            "nbc12plus",
            "nbc15plus",
            "nbc18plus",
            "nbc18plusr",
            "nbcPu",
            "nbcUnrated"
          ]
        },
        "nfrcRating": {
          "type": "string",
          "enumDescriptions": [
            "",
            "A",
            "B",
            "C",
            "D",
            "X",
            ""
          ],
          "enum": [
            "nfrcUnspecified",
            "nfrcA",
            "nfrcB",
            "nfrcC",
            "nfrcD",
            "nfrcX",
            "nfrcUnrated"
          ],
          "description": "The video's rating from the Bulgarian National Film Center."
        },
        "fskRating": {
          "enum": [
            "fskUnspecified",
            "fsk0",
            "fsk6",
            "fsk12",
            "fsk16",
            "fsk18",
            "fskUnrated"
          ],
          "enumDescriptions": [
            "",
            "FSK 0",
            "FSK 6",
            "FSK 12",
            "FSK 16",
            "FSK 18",
            ""
          ],
          "description": "The video's Freiwillige Selbstkontrolle der Filmwirtschaft (FSK - Germany) rating.",
          "type": "string"
        },
        "mccypRating": {
          "enum": [
            "mccypUnspecified",
            "mccypA",
            "mccyp7",
            "mccyp11",
            "mccyp15",
            "mccypUnrated"
          ],
          "type": "string",
          "enumDescriptions": [
            "",
            "A",
            "7",
            "11",
            "15",
            ""
          ],
          "description": "The video's rating from the Danish Film Institute's (Det Danske Filminstitut) Media Council for Children and Young People."
        },
        "cnaRating": {
          "type": "string",
          "enum": [
            "cnaUnspecified",
            "cnaAp",
            "cna12",
            "cna15",
            "cna18",
            "cna18plus",
            "cnaUnrated"
          ],
          "description": "The video's rating from Romania's CONSILIUL NATIONAL AL AUDIOVIZUALULUI (CNA).",
          "enumDescriptions": [
            "",
            "AP",
            "12",
            "15",
            "18",
            "18+",
            ""
          ]
        },
        "egfilmRating": {
          "description": "The video's rating in Egypt.",
          "type": "string",
          "enum": [
            "egfilmUnspecified",
            "egfilmGn",
            "egfilm18",
            "egfilmBn",
            "egfilmUnrated"
          ],
          "enumDescriptions": [
            "",
            "GN",
            "18",
            "BN",
            ""
          ]
        },
        "eirinRating": {
          "enum": [
            "eirinUnspecified",
            "eirinG",
            "eirinPg12",
            "eirinR15plus",
            "eirinR18plus",
            "eirinUnrated"
          ],
          "enumDescriptions": [
            "",
            "G",
            "PG-12",
            "R15+",
            "R18+",
            ""
          ],
          "description": "The video's Eirin (映倫) rating. Eirin is the Japanese rating system.",
          "type": "string"
        },
        "smsaRating": {
          "enumDescriptions": [
            "",
            "All ages",
            "7",
            "11",
            "15",
            ""
          ],
          "type": "string",
          "enum": [
            "smsaUnspecified",
            "smsaA",
            "smsa7",
            "smsa11",
            "smsa15",
            "smsaUnrated"
          ],
          "description": "The video's rating from Statens medieråd (Sweden's National Media Council)."
        },
        "cccRating": {
          "description": "The video's Consejo de Calificación Cinematográfica (Chile) rating.",
          "type": "string",
          "enumDescriptions": [
            "",
            "Todo espectador",
            "6+ - Inconveniente para menores de 7 años",
            "14+",
            "18+",
            "18+ - contenido excesivamente violento",
            "18+ - contenido pornográfico",
            ""
          ],
          "enum": [
            "cccUnspecified",
            "cccTe",
            "ccc6",
            "ccc14",
            "ccc18",
            "ccc18v",
            "ccc18s",
            "cccUnrated"
          ]
        },
        "mccaaRating": {
          "type": "string",
          "description": "The video's rating from Malta's Film Age-Classification Board.",
          "enum": [
            "mccaaUnspecified",
            "mccaaU",
            "mccaaPg",
            "mccaa12a",
            "mccaa12",
            "mccaa14",
            "mccaa15",
            "mccaa16",
            "mccaa18",
            "mccaaUnrated"
          ],
          "enumDescriptions": [
            "",
            "U",
            "PG",
            "12A",
            "12",
            "14 - this rating was removed from the new classification structure introduced in 2013.",
            "15",
            "16 - this rating was removed from the new classification structure introduced in 2013.",
            "18",
            ""
          ]
        },
        "smaisRating": {
          "description": "The video's rating in Iceland.",
          "enum": [
            "smaisUnspecified",
            "smaisL",
            "smais7",
            "smais12",
            "smais14",
            "smais16",
            "smais18",
            "smaisUnrated"
          ],
          "type": "string",
          "enumDescriptions": [
            "",
            "L",
            "7",
            "12",
            "14",
            "16",
            "18",
            ""
          ]
        },
        "fpbRating": {
          "description": "The video's rating from South Africa's Film and Publication Board.",
          "type": "string",
          "enum": [
            "fpbUnspecified",
            "fpbA",
            "fpbPg",
            "fpb79Pg",
            "fpb1012Pg",
            "fpb13",
            "fpb16",
            "fpb18",
            "fpbX18",
            "fpbXx",
            "fpbUnrated",
            "fpb10"
          ],
          "enumDescriptions": [
            "",
            "A",
            "PG",
            "7-9PG",
            "10-12PG",
            "13",
            "16",
            "18",
            "X18",
            "XX",
            "",
            "10"
          ]
        },
        "mpaaRating": {
          "enum": [
            "mpaaUnspecified",
            "mpaaG",
            "mpaaPg",
            "mpaaPg13",
            "mpaaR",
            "mpaaNc17",
            "mpaaX",
            "mpaaUnrated"
          ],
          "enumDescriptions": [
            "",
            "G",
            "PG",
            "PG-13",
            "R",
            "NC-17",
            "! X",
            ""
          ],
          "description": "The video's Motion Picture Association of America (MPAA) rating.",
          "type": "string"
        },
        "catvfrRating": {
          "enum": [
            "catvfrUnspecified",
            "catvfrG",
            "catvfr8plus",
            "catvfr13plus",
            "catvfr16plus",
            "catvfr18plus",
            "catvfrUnrated",
            "catvfrE"
          ],
          "type": "string",
          "enumDescriptions": [
            "",
            "G",
            "8+",
            "13+",
            "16+",
            "18+",
            "",
            ""
          ],
          "description": "The video's rating from the Canadian Radio-Television and Telecommunications Commission (CRTC) for Canadian French-language broadcasts. For more information, see the Canadian Broadcast Standards Council website."
        },
        "nbcplRating": {
          "enum": [
            "nbcplUnspecified",
            "nbcplI",
            "nbcplIi",
            "nbcplIii",
            "nbcplIv",
            "nbcpl18plus",
            "nbcplUnrated"
          ],
          "type": "string",
          "description": "The video's rating in Poland.",
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ]
        },
        "moctwRating": {
          "enum": [
            "moctwUnspecified",
            "moctwG",
            "moctwP",
            "moctwPg",
            "moctwR",
            "moctwUnrated",
            "moctwR12",
            "moctwR15"
          ],
          "description": "The video's rating from Taiwan's Ministry of Culture (文化部).",
          "type": "string",
          "enumDescriptions": [
            "",
            "G",
            "P",
            "PG",
            "R",
            "",
            "R-12",
            "R-15"
          ]
        },
        "cicfRating": {
          "enumDescriptions": [
            "",
            "E",
            "KT/EA",
            "KNT/ENA",
            ""
          ],
          "type": "string",
          "enum": [
            "cicfUnspecified",
            "cicfE",
            "cicfKtEa",
            "cicfKntEna",
            "cicfUnrated"
          ],
          "description": "The video's rating from the Commission de Contrôle des Films (Belgium)."
        },
        "resorteviolenciaRating": {
          "enumDescriptions": [
            "",
            "A",
            "B",
            "C",
            "D",
            "E",
            ""
          ],
          "description": "The video's rating in Venezuela.",
          "type": "string",
          "enum": [
            "resorteviolenciaUnspecified",
            "resorteviolenciaA",
            "resorteviolenciaB",
            "resorteviolenciaC",
            "resorteviolenciaD",
            "resorteviolenciaE",
            "resorteviolenciaUnrated"
          ]
        },
        "cceRating": {
          "enum": [
            "cceUnspecified",
            "cceM4",
            "cceM6",
            "cceM12",
            "cceM16",
            "cceM18",
            "cceUnrated",
            "cceM14"
          ],
          "enumDescriptions": [
            "",
            "4",
            "6",
            "12",
            "16",
            "18",
            "",
            "14"
          ],
          "description": "The video's rating from Portugal's Comissão de Classificação de Espect´culos.",
          "type": "string"
        },
        "anatelRating": {
          "enum": [
            "anatelUnspecified",
            "anatelF",
            "anatelI",
            "anatelI7",
            "anatelI10",
            "anatelI12",
            "anatelR",
            "anatelA",
            "anatelUnrated"
          ],
          "type": "string",
          "description": "The video's Anatel (Asociación Nacional de Televisión) rating for Chilean television.",
          "enumDescriptions": [
            "",
            "F",
            "I",
            "I-7",
            "I-10",
            "I-12",
            "R",
            "A",
            ""
          ]
        },
        "nfvcbRating": {
          "type": "string",
          "enumDescriptions": [
            "",
            "G",
            "PG",
            "12",
            "12A",
            "15",
            "18",
            "RE",
            ""
          ],
          "description": "The video's rating from Nigeria's National Film and Video Censors Board.",
          "enum": [
            "nfvcbUnspecified",
            "nfvcbG",
            "nfvcbPg",
            "nfvcb12",
            "nfvcb12a",
            "nfvcb15",
            "nfvcb18",
            "nfvcbRe",
            "nfvcbUnrated"
          ]
        },
        "fpbRatingReasons": {
          "items": {
            "enum": [
              "fpbRatingReasonUnspecified",
              "fpbBlasphemy",
              "fpbLanguage",
              "fpbNudity",
              "fpbPrejudice",
              "fpbSex",
              "fpbViolence",
              "fpbDrugs",
              "fpbSexualViolence",
              "fpbHorror",
              "fpbCriminalTechniques",
              "fpbImitativeActsTechniques"
            ],
            "type": "string",
            "enumDescriptions": [
              "",
              "South Africa rating content descriptors.",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              ""
            ]
          },
          "description": "Reasons that explain why the video received its FPB (South Africa) rating.",
          "type": "array"
        },
        "czfilmRating": {
          "enumDescriptions": [
            "",
            "U",
            "12",
            "14",
            "18",
            ""
          ],
          "type": "string",
          "enum": [
            "czfilmUnspecified",
            "czfilmU",
            "czfilm12",
            "czfilm14",
            "czfilm18",
            "czfilmUnrated"
          ],
          "description": "The video's rating in the Czech Republic."
        },
        "fmocRating": {
          "enum": [
            "fmocUnspecified",
            "fmocU",
            "fmoc10",
            "fmoc12",
            "fmoc16",
            "fmoc18",
            "fmocE",
            "fmocUnrated"
          ],
          "type": "string",
          "enumDescriptions": [
            "",
            "U",
            "10",
            "12",
            "16",
            "18",
            "E",
            ""
          ],
          "description": "This property has been deprecated. Use the contentDetails.contentRating.cncRating instead."
        },
        "kijkwijzerRating": {
          "type": "string",
          "description": "The video's NICAM/Kijkwijzer rating from the Nederlands Instituut voor de Classificatie van Audiovisuele Media (Netherlands).",
          "enum": [
            "kijkwijzerUnspecified",
            "kijkwijzerAl",
            "kijkwijzer6",
            "kijkwijzer9",
            "kijkwijzer12",
            "kijkwijzer16",
            "kijkwijzer18",
            "kijkwijzerUnrated"
          ],
          "enumDescriptions": [
            "",
            "AL",
            "6",
            "9",
            "12",
            "16",
            "",
            ""
          ]
        },
        "ifcoRating": {
          "enum": [
            "ifcoUnspecified",
            "ifcoG",
            "ifcoPg",
            "ifco12",
            "ifco12a",
            "ifco15",
            "ifco15a",
            "ifco16",
            "ifco18",
            "ifcoUnrated"
          ],
          "type": "string",
          "enumDescriptions": [
            "",
            "G",
            "PG",
            "12",
            "12A",
            "15",
            "15A",
            "16",
            "18",
            ""
          ],
          "description": "The video's Irish Film Classification Office (IFCO - Ireland) rating. See the IFCO website for more information."
        },
        "pefilmRating": {
          "enumDescriptions": [
            "",
            "PT",
            "PG",
            "14",
            "18",
            ""
          ],
          "type": "string",
          "enum": [
            "pefilmUnspecified",
            "pefilmPt",
            "pefilmPg",
            "pefilm14",
            "pefilm18",
            "pefilmUnrated"
          ],
          "description": "The video's rating in Peru."
        },
        "ilfilmRating": {
          "enumDescriptions": [
            "",
            "AA",
            "12",
            "14",
            "16",
            "18",
            ""
          ],
          "description": "The video's rating in Israel.",
          "type": "string",
          "enum": [
            "ilfilmUnspecified",
            "ilfilmAa",
            "ilfilm12",
            "ilfilm14",
            "ilfilm16",
            "ilfilm18",
            "ilfilmUnrated"
          ]
        },
        "cncRating": {
          "enum": [
            "cncUnspecified",
            "cncT",
            "cnc10",
            "cnc12",
            "cnc16",
            "cnc18",
            "cncE",
            "cncInterdiction",
            "cncUnrated"
          ],
          "type": "string",
          "enumDescriptions": [
            "",
            "T",
            "10",
            "12",
            "16",
            "18",
            "E",
            "interdiction",
            ""
          ],
          "description": "Rating system in France - Commission de classification cinematographique"
        },
        "nkclvRating": {
          "enumDescriptions": [
            "",
            "U",
            "7+",
            "12+",
            "! 16+",
            "18+",
            ""
          ],
          "description": "The video's rating from the Nacionãlais Kino centrs (National Film Centre of Latvia).",
          "type": "string",
          "enum": [
            "nkclvUnspecified",
            "nkclvU",
            "nkclv7plus",
            "nkclv12plus",
            "nkclv16plus",
            "nkclv18plus",
            "nkclvUnrated"
          ]
        },
        "mpaatRating": {
          "enum": [
            "mpaatUnspecified",
            "mpaatGb",
            "mpaatRb"
          ],
          "description": "The rating system for trailer, DVD, and Ad in the US. See http://movielabs.com/md/ratings/v2.3/html/US_MPAAT_Ratings.html.",
          "enumDescriptions": [
            "",
            "GB",
            "RB"
          ],
          "type": "string"
        },
        "djctqRatingReasons": {
          "type": "array",
          "description": "Reasons that explain why the video received its DJCQT (Brazil) rating.",
          "items": {
            "type": "string",
            "enum": [
              "djctqRatingReasonUnspecified",
              "djctqViolence",
              "djctqExtremeViolence",
              "djctqSexualContent",
              "djctqNudity",
              "djctqSex",
              "djctqExplicitSex",
              "djctqDrugs",
              "djctqLegalDrugs",
              "djctqIllegalDrugs",
              "djctqInappropriateLanguage",
              "djctqCriminalActs",
              "djctqImpactingContent"
            ],
            "enumDescriptions": [
              "",
              "Brazil rating content descriptors. See http://go/brazilratings section F. Violência (Violence)",
              "Violência extrema (Extreme violence)",
              "Conteúdo sexual (Sexual content)",
              "Nudez (Nudity)",
              "Sexo (Sex)",
              "Sexo Explícito (Explicit sex)",
              "Drogas (Drugs)",
              "Drogas Lícitas (Legal drugs)",
              "Drogas Ilícitas (Illegal drugs)",
              "Linguagem Imprópria (Inappropriate language)",
              "Atos Criminosos (Criminal Acts)",
              "Conteúdo Impactante (Impacting content)"
            ]
          }
        },
        "incaaRating": {
          "type": "string",
          "description": "The video's INCAA (Instituto Nacional de Cine y Artes Audiovisuales - Argentina) rating.",
          "enum": [
            "incaaUnspecified",
            "incaaAtp",
            "incaaSam13",
            "incaaSam16",
            "incaaSam18",
            "incaaC",
            "incaaUnrated"
          ],
          "enumDescriptions": [
            "",
            "ATP (Apta para todo publico)",
            "13 (Solo apta para mayores de 13 años)",
            "16 (Solo apta para mayores de 16 años)",
            "18 (Solo apta para mayores de 18 años)",
            "X (Solo apta para mayores de 18 años, de exhibición condicionada)",
            ""
          ]
        },
        "mdaRating": {
          "enumDescriptions": [
            "",
            "G",
            "PG",
            "PG13",
            "NC16",
            "M18",
            "R21",
            ""
          ],
          "type": "string",
          "description": "The video's rating from Singapore's Media Development Authority (MDA) and, specifically, it's Board of Film Censors (BFC).",
          "enum": [
            "mdaUnspecified",
            "mdaG",
            "mdaPg",
            "mdaPg13",
            "mdaNc16",
            "mdaM18",
            "mdaR21",
            "mdaUnrated"
          ]
        },
        "djctqRating": {
          "type": "string",
          "description": "The video's Departamento de Justiça, Classificação, Qualificação e Títulos (DJCQT - Brazil) rating.",
          "enumDescriptions": [
            "",
            "L",
            "10",
            "12",
            "14",
            "16",
            "18",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "djctqUnspecified",
            "djctqL",
            "djctq10",
            "djctq12",
            "djctq14",
            "djctq16",
            "djctq18",
            "djctqEr",
            "djctqL10",
            "djctqL12",
            "djctqL14",
            "djctqL16",
            "djctqL18",
            "djctq1012",
            "djctq1014",
            "djctq1016",
            "djctq1018",
            "djctq1214",
            "djctq1216",
            "djctq1218",
            "djctq1416",
            "djctq1418",
            "djctq1618",
            "djctqUnrated"
          ]
        },
        "rteRating": {
          "enumDescriptions": [
            "",
            "GA",
            "CH",
            "PS",
            "MA",
            ""
          ],
          "type": "string",
          "description": "The video's rating from Ireland's Raidió Teilifís Éireann.",
          "enum": [
            "rteUnspecified",
            "rteGa",
            "rteCh",
            "rtePs",
            "rteMa",
            "rteUnrated"
          ]
        },
        "mibacRating": {
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "mibacUnspecified",
            "mibacT",
            "mibacVap",
            "mibacVm12",
            "mibacVm14",
            "mibacVm18",
            "mibacUnrated"
          ],
          "description": "The video's rating from the Ministero dei Beni e delle Attività Culturali e del Turismo (Italy)."
        },
        "kmrbRating": {
          "type": "string",
          "description": "The video's Korea Media Rating Board (영상물등급위원회) rating. The KMRB rates videos in South Korea.",
          "enumDescriptions": [
            "",
            "전체관람가",
            "12세 이상 관람가",
            "15세 이상 관람가",
            "",
            "청소년 관람불가",
            ""
          ],
          "enum": [
            "kmrbUnspecified",
            "kmrbAll",
            "kmrb12plus",
            "kmrb15plus",
            "kmrbTeenr",
            "kmrbR",
            "kmrbUnrated"
          ]
        },
        "fcbmRating": {
          "enum": [
            "fcbmUnspecified",
            "fcbmU",
            "fcbmPg13",
            "fcbmP13",
            "fcbm18",
            "fcbm18sx",
            "fcbm18pa",
            "fcbm18sg",
            "fcbm18pl",
            "fcbmUnrated"
          ],
          "enumDescriptions": [
            "",
            "U",
            "PG13",
            "P13",
            "18",
            "18SX",
            "18PA",
            "18SG",
            "18PL",
            ""
          ],
          "type": "string",
          "description": "The video's rating from Malaysia's Film Censorship Board."
        },
        "fcoRating": {
          "description": "The video's rating from Hong Kong's Office for Film, Newspaper and Article Administration.",
          "enumDescriptions": [
            "",
            "I",
            "IIA",
            "IIB",
            "II",
            "III",
            ""
          ],
          "enum": [
            "fcoUnspecified",
            "fcoI",
            "fcoIia",
            "fcoIib",
            "fcoIi",
            "fcoIii",
            "fcoUnrated"
          ],
          "type": "string"
        },
        "kfcbRating": {
          "enumDescriptions": [
            "",
            "GE",
            "PG",
            "16",
            "18",
            ""
          ],
          "description": "The video's rating from the Kenya Film Classification Board.",
          "type": "string",
          "enum": [
            "kfcbUnspecified",
            "kfcbG",
            "kfcbPg",
            "kfcb16plus",
            "kfcbR",
            "kfcbUnrated"
          ]
        },
        "bfvcRating": {
          "type": "string",
          "enum": [
            "bfvcUnspecified",
            "bfvcG",
            "bfvcE",
            "bfvc13",
            "bfvc15",
            "bfvc18",
            "bfvc20",
            "bfvcB",
            "bfvcUnrated"
          ],
          "enumDescriptions": [
            "",
            "G",
            "E",
            "13",
            "15",
            "18",
            "20",
            "B",
            ""
          ],
          "description": "The video's rating from Thailand's Board of Film and Video Censors."
        },
        "acbRating": {
          "type": "string",
          "enumDescriptions": [
            "",
            "E",
            "Programs that have been given a P classification by the Australian Communications and Media Authority. These programs are intended for preschool children.",
            "Programs that have been given a C classification by the Australian Communications and Media Authority. These programs are intended for children (other than preschool children) who are younger than 14 years of age.",
            "G",
            "PG",
            "M",
            "MA15+",
            "R18+",
            ""
          ],
          "enum": [
            "acbUnspecified",
            "acbE",
            "acbP",
            "acbC",
            "acbG",
            "acbPg",
            "acbM",
            "acbMa15plus",
            "acbR18plus",
            "acbUnrated"
          ],
          "description": "The video's Australian Classification Board (ACB) or Australian Communications and Media Authority (ACMA) rating. ACMA ratings are used to classify children's television programming."
        }
      },
      "description": "Ratings schemes. The country-specific ratings are mostly for movies and shows. LINT.IfChange"
    },
    "CommentThread": {
      "id": "CommentThread",
      "description": "A *comment thread* represents information that applies to a top level comment and all its replies. It can also include the top level comment itself and some of the replies.",
      "type": "object",
      "properties": {
        "snippet": {
          "$ref": "CommentThreadSnippet",
          "description": "The snippet object contains basic details about the comment thread and also the top level comment."
        },
        "etag": {
          "type": "string",
          "description": "Etag of this resource."
        },
        "kind": {
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#commentThread\".",
          "default": "youtube#commentThread",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "The ID that YouTube uses to uniquely identify the comment thread."
        },
        "replies": {
          "$ref": "CommentThreadReplies",
          "description": "The replies object contains a limited number of replies (if any) to the top level comment found in the snippet."
        }
      }
    },
    "VideoLiveStreamingDetails": {
      "type": "object",
      "properties": {
        "scheduledEndTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time that the broadcast is scheduled to end. If the value is empty or the property is not present, then the broadcast is scheduled to contiue indefinitely."
        },
        "actualEndTime": {
          "description": "The time that the broadcast actually ended. This value will not be available until the broadcast is over.",
          "format": "date-time",
          "type": "string"
        },
        "scheduledStartTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time that the broadcast is scheduled to begin."
        },
        "concurrentViewers": {
          "description": "The number of viewers currently watching the broadcast. The property and its value will be present if the broadcast has current viewers and the broadcast owner has not hidden the viewcount for the video. Note that YouTube stops tracking the number of concurrent viewers for a broadcast when the broadcast ends. So, this property would not identify the number of viewers watching an archived video of a live broadcast that already ended.",
          "format": "uint64",
          "type": "string"
        },
        "actualStartTime": {
          "type": "string",
          "description": "The time that the broadcast actually started. This value will not be available until the broadcast begins.",
          "format": "date-time"
        },
        "activeLiveChatId": {
          "description": "The ID of the currently active live chat attached to this video. This field is filled only if the video is a currently live broadcast that has live chat. Once the broadcast transitions to complete this field will be removed and the live chat closed down. For persistent broadcasts that live chat id will no longer be tied to this video but rather to the new video being displayed at the persistent page.",
          "type": "string"
        }
      },
      "id": "VideoLiveStreamingDetails",
      "description": "Details about the live streaming metadata."
    },
    "SubscriptionSubscriberSnippet": {
      "type": "object",
      "id": "SubscriptionSubscriberSnippet",
      "properties": {
        "description": {
          "type": "string",
          "description": "The description of the subscriber."
        },
        "title": {
          "type": "string",
          "description": "The title of the subscriber."
        },
        "thumbnails": {
          "description": "Thumbnails for this subscriber.",
          "$ref": "ThumbnailDetails"
        },
        "channelId": {
          "description": "The channel ID of the subscriber.",
          "type": "string"
        }
      },
      "description": "Basic details about a subscription's subscriber including title, description, channel ID and thumbnails."
    },
    "Caption": {
      "id": "Caption",
      "type": "object",
      "properties": {
        "snippet": {
          "$ref": "CaptionSnippet",
          "description": "The snippet object contains basic details about the caption."
        },
        "etag": {
          "description": "Etag of this resource.",
          "type": "string"
        },
        "id": {
          "annotations": {
            "required": [
              "youtube.captions.update"
            ]
          },
          "description": "The ID that YouTube uses to uniquely identify the caption track.",
          "type": "string"
        },
        "kind": {
          "default": "youtube#caption",
          "type": "string",
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#caption\"."
        }
      },
      "description": "A *caption* resource represents a YouTube caption track. A caption track is associated with exactly one YouTube video."
    },
    "LiveBroadcastStatistics": {
      "properties": {
        "totalChatCount": {
          "description": "The total number of live chat messages currently on the broadcast. The property and its value will be present if the broadcast is public, has the live chat feature enabled, and has at least one message. Note that this field will not be filled after the broadcast ends. So this property would not identify the number of chat messages for an archived video of a completed live broadcast.",
          "format": "uint64",
          "type": "string"
        }
      },
      "description": "Statistics about the live broadcast. These represent a snapshot of the values at the time of the request. Statistics are only returned for live broadcasts.",
      "id": "LiveBroadcastStatistics",
      "type": "object"
    },
    "ActivityContentDetailsBulletin": {
      "id": "ActivityContentDetailsBulletin",
      "type": "object",
      "description": "Details about a channel bulletin post.",
      "properties": {
        "resourceId": {
          "description": "The resourceId object contains information that identifies the resource associated with a bulletin post. @mutable youtube.activities.insert",
          "$ref": "ResourceId"
        }
      }
    },
    "ChannelContentDetails": {
      "description": "Details about the content of a channel.",
      "id": "ChannelContentDetails",
      "type": "object",
      "properties": {
        "relatedPlaylists": {
          "type": "object",
          "properties": {
            "likes": {
              "type": "string",
              "description": "The ID of the playlist that contains the channel\"s liked videos. Use the playlistItems.insert and playlistItems.delete to add or remove items from that list."
            },
            "watchHistory": {
              "type": "string",
              "description": "The ID of the playlist that contains the channel\"s watch history. Use the playlistItems.insert and playlistItems.delete to add or remove items from that list."
            },
            "favorites": {
              "type": "string",
              "description": "The ID of the playlist that contains the channel\"s favorite videos. Use the playlistItems.insert and playlistItems.delete to add or remove items from that list."
            },
            "uploads": {
              "type": "string",
              "description": "The ID of the playlist that contains the channel\"s uploaded videos. Use the videos.insert method to upload new videos and the videos.delete method to delete previously uploaded videos."
            },
            "watchLater": {
              "type": "string",
              "description": "The ID of the playlist that contains the channel\"s watch later playlist. Use the playlistItems.insert and playlistItems.delete to add or remove items from that list."
            }
          }
        }
      }
    },
    "ChannelConversionPing": {
      "description": "Pings that the app shall fire (authenticated by biscotti cookie). Each ping has a context, in which the app must fire the ping, and a url identifying the ping.",
      "properties": {
        "context": {
          "description": "Defines the context of the ping.",
          "type": "string",
          "enum": [
            "subscribe",
            "unsubscribe",
            "cview"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ]
        },
        "conversionUrl": {
          "description": "The url (without the schema) that the player shall send the ping to. It's at caller's descretion to decide which schema to use (http vs https) Example of a returned url: //googleads.g.doubleclick.net/pagead/ viewthroughconversion/962985656/?data=path%3DtHe_path%3Btype%3D cview%3Butuid%3DGISQtTNGYqaYl4sKxoVvKA&labe=default The caller must append biscotti authentication (ms param in case of mobile, for example) to this ping.",
          "type": "string"
        }
      },
      "id": "ChannelConversionPing",
      "type": "object"
    },
    "PlaylistItemStatus": {
      "id": "PlaylistItemStatus",
      "type": "object",
      "description": "Information about the playlist item's privacy status.",
      "properties": {
        "privacyStatus": {
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "enum": [
            "public",
            "unlisted",
            "private"
          ],
          "description": "This resource's privacy status.",
          "type": "string"
        }
      }
    },
    "VideoAbuseReportReasonSnippet": {
      "description": "Basic details about a video category, such as its localized title.",
      "id": "VideoAbuseReportReasonSnippet",
      "properties": {
        "label": {
          "description": "The localized label belonging to this abuse report reason.",
          "type": "string"
        },
        "secondaryReasons": {
          "description": "The secondary reasons associated with this reason, if any are available. (There might be 0 or more.)",
          "items": {
            "$ref": "VideoAbuseReportSecondaryReason"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "SuperStickerMetadata": {
      "id": "SuperStickerMetadata",
      "type": "object",
      "properties": {
        "stickerId": {
          "description": "Unique identifier of the Super Sticker. This is a shorter form of the alt_text that includes pack name and a recognizable characteristic of the sticker.",
          "type": "string"
        },
        "altTextLanguage": {
          "type": "string",
          "description": "Specifies the localization language in which the alt text is returned."
        },
        "altText": {
          "description": "Internationalized alt text that describes the sticker image and any animation associated with it.",
          "type": "string"
        }
      }
    },
    "LiveChatUserBannedMessageDetails": {
      "type": "object",
      "id": "LiveChatUserBannedMessageDetails",
      "properties": {
        "banDurationSeconds": {
          "description": "The duration of the ban. This property is only present if the banType is temporary.",
          "format": "uint64",
          "type": "string"
        },
        "bannedUserDetails": {
          "description": "The details of the user that was banned.",
          "$ref": "ChannelProfileDetails"
        },
        "banType": {
          "enum": [
            "permanent",
            "temporary"
          ],
          "description": "The type of ban.",
          "enumDescriptions": [
            "",
            ""
          ],
          "type": "string"
        }
      }
    },
    "MembershipsDurationAtLevel": {
      "properties": {
        "memberSince": {
          "description": "The date and time when the user became a continuous member for the given level.",
          "type": "string"
        },
        "level": {
          "description": "Pricing level ID.",
          "type": "string"
        },
        "memberTotalDurationMonths": {
          "type": "integer",
          "format": "int32",
          "description": "The cumulative time the user has been a member for the given level in complete months (the time is rounded down to the nearest integer)."
        }
      },
      "id": "MembershipsDurationAtLevel",
      "type": "object"
    },
    "LiveBroadcastStatus": {
      "properties": {
        "lifeCycleStatus": {
          "enum": [
            "lifeCycleStatusUnspecified",
            "created",
            "ready",
            "testing",
            "live",
            "complete",
            "revoked",
            "testStarting",
            "liveStarting"
          ],
          "description": "The broadcast's status. The status can be updated using the API's liveBroadcasts.transition method.",
          "type": "string",
          "enumDescriptions": [
            "No value or the value is unknown.",
            "Incomplete settings, but otherwise valid",
            "Complete settings",
            "Visible only to partner, may need special UI treatment",
            "Viper is recording; this means the \"clock\" is running",
            "The broadcast is finished.",
            "This broadcast was removed by admin action",
            "Transition into TESTING has been requested",
            "Transition into LIVE has been requested"
          ]
        },
        "liveBroadcastPriority": {
          "description": "Priority of the live broadcast event (internal state).",
          "enum": [
            "liveBroadcastPriorityUnspecified",
            "low",
            "normal",
            "high"
          ],
          "type": "string",
          "enumDescriptions": [
            "",
            "Low priority broadcast: for low view count HoAs or other low priority broadcasts.",
            "Normal priority broadcast: for regular HoAs and broadcasts.",
            "High priority broadcast: for high profile HoAs, like PixelCorp ones."
          ]
        },
        "privacyStatus": {
          "enum": [
            "public",
            "unlisted",
            "private"
          ],
          "description": "The broadcast's privacy status. Note that the broadcast represents exactly one YouTube video, so the privacy settings are identical to those supported for videos. In addition, you can set this field by modifying the broadcast resource or by setting the privacyStatus field of the corresponding video resource.",
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string",
          "annotations": {
            "required": [
              "youtube.liveBroadcasts.insert",
              "youtube.liveBroadcasts.update"
            ]
          }
        },
        "selfDeclaredMadeForKids": {
          "description": "This field will be set to True if the creator declares the broadcast to be kids only: go/live-cw-work.",
          "type": "boolean"
        },
        "madeForKids": {
          "type": "boolean",
          "description": "Whether the broadcast is made for kids or not, decided by YouTube instead of the creator. This field is read only."
        },
        "recordingStatus": {
          "enumDescriptions": [
            "No value or the value is unknown.",
            "The recording has not yet been started.",
            "The recording is currently on.",
            "The recording is completed, and cannot be started again."
          ],
          "enum": [
            "liveBroadcastRecordingStatusUnspecified",
            "notRecording",
            "recording",
            "recorded"
          ],
          "description": "The broadcast's recording status.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "LiveBroadcastStatus",
      "description": "Live broadcast state."
    },
    "LiveStreamListResponse": {
      "properties": {
        "tokenPagination": {
          "$ref": "TokenPagination"
        },
        "prevPageToken": {
          "description": "The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.",
          "type": "string"
        },
        "visitorId": {
          "type": "string",
          "description": "The visitorId identifies the visitor."
        },
        "etag": {
          "description": "Etag of this resource.",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string",
          "description": "The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set."
        },
        "eventId": {
          "description": "Serialized EventId of the request which produced this response.",
          "type": "string"
        },
        "pageInfo": {
          "$ref": "PageInfo"
        },
        "kind": {
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#liveStreamListResponse\".",
          "default": "youtube#liveStreamListResponse",
          "type": "string"
        },
        "items": {
          "description": "A list of live streams that match the request criteria.",
          "type": "array",
          "items": {
            "$ref": "LiveStream"
          }
        }
      },
      "id": "LiveStreamListResponse",
      "type": "object"
    },
    "ActivityContentDetailsLike": {
      "description": "Information about a resource that received a positive (like) rating.",
      "properties": {
        "resourceId": {
          "$ref": "ResourceId",
          "description": "The resourceId object contains information that identifies the rated resource."
        }
      },
      "id": "ActivityContentDetailsLike",
      "type": "object"
    },
    "ActivitySnippet": {
      "description": "Basic details about an activity, including title, description, thumbnails, activity type and group. Next ID: 12",
      "properties": {
        "title": {
          "type": "string",
          "description": "The title of the resource primarily associated with the activity."
        },
        "publishedAt": {
          "description": "The date and time that the video was uploaded.",
          "type": "string",
          "format": "date-time"
        },
        "type": {
          "enum": [
            "typeUnspecified",
            "upload",
            "like",
            "favorite",
            "comment",
            "subscription",
            "playlistItem",
            "recommendation",
            "bulletin",
            "social",
            "channelItem",
            "promotedItem"
          ],
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "description": "The type of activity that the resource describes."
        },
        "description": {
          "description": "The description of the resource primarily associated with the activity. @mutable youtube.activities.insert",
          "type": "string"
        },
        "thumbnails": {
          "$ref": "ThumbnailDetails",
          "description": "A map of thumbnail images associated with the resource that is primarily associated with the activity. For each object in the map, the key is the name of the thumbnail image, and the value is an object that contains other information about the thumbnail."
        },
        "channelId": {
          "description": "The ID that YouTube uses to uniquely identify the channel associated with the activity.",
          "type": "string"
        },
        "groupId": {
          "description": "The group ID associated with the activity. A group ID identifies user events that are associated with the same user and resource. For example, if a user rates a video and marks the same video as a favorite, the entries for those events would have the same group ID in the user's activity feed. In your user interface, you can avoid repetition by grouping events with the same groupId value.",
          "type": "string"
        },
        "channelTitle": {
          "type": "string",
          "description": "Channel title for the channel responsible for this activity"
        }
      },
      "type": "object",
      "id": "ActivitySnippet"
    },
    "I18nRegionSnippet": {
      "properties": {
        "gl": {
          "description": "The region code as a 2-letter ISO country code.",
          "type": "string"
        },
        "name": {
          "description": "The human-readable name of the region.",
          "type": "string"
        }
      },
      "description": "Basic details about an i18n region, such as region code and human-readable name.",
      "type": "object",
      "id": "I18nRegionSnippet"
    },
    "LiveChatModerator": {
      "description": "A *liveChatModerator* resource represents a moderator for a YouTube live chat. A chat moderator has the ability to ban/unban users from a chat, remove message, etc.",
      "properties": {
        "etag": {
          "description": "Etag of this resource.",
          "type": "string"
        },
        "id": {
          "description": "The ID that YouTube assigns to uniquely identify the moderator.",
          "type": "string"
        },
        "snippet": {
          "$ref": "LiveChatModeratorSnippet",
          "description": "The snippet object contains basic details about the moderator."
        },
        "kind": {
          "default": "youtube#liveChatModerator",
          "type": "string",
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#liveChatModerator\"."
        }
      },
      "id": "LiveChatModerator",
      "type": "object"
    },
    "I18nRegion": {
      "description": "A *i18nRegion* resource identifies a region where YouTube is available.",
      "properties": {
        "snippet": {
          "description": "The snippet object contains basic details about the i18n region, such as region code and human-readable name.",
          "$ref": "I18nRegionSnippet"
        },
        "id": {
          "description": "The ID that YouTube uses to uniquely identify the i18n region.",
          "type": "string"
        },
        "kind": {
          "description": "Identifies what kind of resource this is. Value: the fixed string \"youtube#i18nRegion\".",
          "default": "youtube#i18nRegion",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "Etag of this resource."
        }
      },
      "type": "object",
      "id": "I18nRegion"
    },
    "ActivityContentDetailsSubscription": {
      "properties": {
        "resourceId": {
          "description": "The resourceId object contains information that identifies the resource that the user subscribed to.",
          "$ref": "ResourceId"
        }
      },
      "type": "object",
      "id": "ActivityContentDetailsSubscription",
      "description": "Information about a channel that a user subscribed to."
    },
    "LiveChatTextMessageDetails": {
      "id": "LiveChatTextMessageDetails",
      "type": "object",
      "properties": {
        "messageText": {
          "type": "string",
          "description": "The user's message."
        }
      }
    },
    "ChannelStatus": {
      "id": "ChannelStatus",
      "properties": {
        "isLinked": {
          "description": "If true, then the user is linked to either a YouTube username or G+ account. Otherwise, the user doesn't have a public YouTube identity.",
          "type": "boolean"
        },
        "longUploadsStatus": {
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "type": "string",
          "description": "The long uploads status of this channel. See https://support.google.com/youtube/answer/71673 for more information.",
          "enum": [
            "longUploadsUnspecified",
            "allowed",
            "eligible",
            "disallowed"
          ]
        },
        "madeForKids": {
          "type": "boolean"
        },
        "selfDeclaredMadeForKids": {
          "type": "boolean"
        },
        "privacyStatus": {
          "type": "string",
          "enum": [
            "public",
            "unlisted",
            "private"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "description": "Privacy status of the channel."
        }
      },
      "description": "JSON template for the status part of a channel.",
      "type": "object"
    },
    "PlaylistPlayer": {
      "type": "object",
      "id": "PlaylistPlayer",
      "properties": {
        "embedHtml": {
          "type": "string",
          "description": "An \u003ciframe\u003e tag that embeds a player that will play the playlist."
        }
      }
    },
    "AccessPolicy": {
      "type": "object",
      "description": "Rights management policy for YouTube resources.",
      "properties": {
        "allowed": {
          "type": "boolean",
          "description": "The value of allowed indicates whether the access to the policy is allowed or denied by default."
        },
        "exception": {
          "description": "A list of region codes that identify countries where the default policy do not apply.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "id": "AccessPolicy"
    },
    "ImageSettings": {
      "id": "ImageSettings",
      "description": "Branding properties for images associated with the channel.",
      "type": "object",
      "properties": {
        "smallBrandedBannerImageUrl": {
          "description": "The URL for the 640px by 70px banner image that appears below the video player in the default view of the video watch page. The URL for the image that appears above the top-left corner of the video player. This is a 25-pixel-high image with a flexible width that cannot exceed 170 pixels.",
          "$ref": "LocalizedProperty"
        },
        "bannerTvHighImageUrl": {
          "type": "string",
          "description": "Banner image. TV size high resolution (1920x1080)."
        },
        "largeBrandedBannerImageImapScript": {
          "$ref": "LocalizedProperty",
          "description": "The image map script for the large banner image."
        },
        "bannerMobileExtraHdImageUrl": {
          "description": "Banner image. Mobile size high resolution (1440x395).",
          "type": "string"
        },
        "bannerMobileMediumHdImageUrl": {
          "type": "string",
          "description": "Banner image. Mobile size medium/high resolution (960x263)."
        },
        "bannerTabletHdImageUrl": {
          "type": "string",
          "description": "Banner image. Tablet size high resolution (2276x377)."
        },
        "bannerMobileImageUrl": {
          "description": "Banner image. Mobile size (640x175).",
          "type": "string"
        },
        "bannerTabletImageUrl": {
          "description": "Banner image. Tablet size (1707x283).",
          "type": "string"
        },
        "bannerTvMediumImageUrl": {
          "description": "Banner image. TV size medium resolution (1280x720).",
          "type": "string"
        },
        "largeBrandedBannerImageUrl": {
          "$ref": "LocalizedProperty",
          "description": "The URL for the 854px by 70px image that appears below the video player in the expanded video view of the video watch page."
        },
        "bannerTvImageUrl": {
          "type": "string",
          "description": "Banner image. TV size extra high resolution (2120x1192)."
        },
        "bannerExternalUrl": {
          "type": "string",
          "description": "This is generated when a ChannelBanner.Insert request has succeeded for the given channel."
        },
        "smallBrandedBannerImageImapScript": {
          "$ref": "LocalizedProperty",
          "description": "The image map script for the small banner image."
        },
        "trackingImageUrl": {
          "description": "The URL for a 1px by 1px tracking pixel that can be used to collect statistics for views of the channel or video pages.",
          "type": "string"
        },
        "bannerTabletExtraHdImageUrl": {
          "type": "string",
          "description": "Banner image. Tablet size extra high resolution (2560x424)."
        },
        "backgroundImageUrl": {
          "description": "The URL for the background image shown on the video watch page. The image should be 1200px by 615px, with a maximum file size of 128k.",
          "$ref": "LocalizedProperty"
        },
        "watchIconImageUrl": {
          "type": "string"
        },
        "bannerTvLowImageUrl": {
          "description": "Banner image. TV size low resolution (854x480).",
          "type": "string"
        },
        "bannerMobileLowImageUrl": {
          "type": "string",
          "description": "Banner image. Mobile size low resolution (320x88)."
        },
        "bannerTabletLowImageUrl": {
          "type": "string",
          "description": "Banner image. Tablet size low resolution (1138x188)."
        },
        "bannerMobileHdImageUrl": {
          "type": "string",
          "description": "Banner image. Mobile size high resolution (1280x360)."
        },
        "bannerImageUrl": {
          "description": "Banner image. Desktop size (1060x175).",
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "callback": {
      "description": "JSONP",
      "type": "string",
      "location": "query"
    },
    "alt": {
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "type": "string",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "description": "Data format for response.",
      "default": "json",
      "location": "query"
    },
    "key": {
      "location": "query",
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    },
    "access_token": {
      "type": "string",
      "location": "query",
      "description": "OAuth access token."
    },
    "$.xgafv": {
      "description": "V1 error format.",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query",
      "type": "string",
      "enum": [
        "1",
        "2"
      ]
    },
    "uploadType": {
      "location": "query",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string"
    },
    "upload_protocol": {
      "location": "query",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string"
    },
    "quotaUser": {
      "type": "string",
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
    },
    "prettyPrint": {
      "location": "query",
      "default": "true",
      "description": "Returns response with indentations and line breaks.",
      "type": "boolean"
    },
    "oauth_token": {
      "location": "query",
      "type": "string",
      "description": "OAuth 2.0 token for the current user."
    },
    "fields": {
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string"
    }
  },
  "basePath": ""
}
