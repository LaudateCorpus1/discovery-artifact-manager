{
  "basePath": "",
  "mtlsRootUrl": "https://area120tables.mtls.googleapis.com/",
  "rootUrl": "https://area120tables.googleapis.com/",
  "id": "area120tables:v1alpha1",
  "ownerDomain": "google.com",
  "title": "Area120 Tables API",
  "batchPath": "batch",
  "version": "v1alpha1",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/spreadsheets": {
          "description": "See, edit, create, and delete your spreadsheets in Google Drive"
        },
        "https://www.googleapis.com/auth/drive": {
          "description": "See, edit, create, and delete all of your Google Drive files"
        },
        "https://www.googleapis.com/auth/drive.file": {
          "description": "See, edit, create, and delete only the specific Google Drive files you use with this app"
        },
        "https://www.googleapis.com/auth/drive.readonly": {
          "description": "See and download all your Google Drive files"
        },
        "https://www.googleapis.com/auth/tables": {
          "description": "See, edit, create, and delete your tables in Tables by Area 120"
        },
        "https://www.googleapis.com/auth/spreadsheets.readonly": {
          "description": "View your Google Spreadsheets"
        }
      }
    }
  },
  "discoveryVersion": "v1",
  "kind": "discovery#restDescription",
  "parameters": {
    "quotaUser": {
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string"
    },
    "access_token": {
      "type": "string",
      "location": "query",
      "description": "OAuth access token."
    },
    "fields": {
      "location": "query",
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "$.xgafv": {
      "enum": [
        "1",
        "2"
      ],
      "type": "string",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query",
      "description": "V1 error format."
    },
    "oauth_token": {
      "type": "string",
      "description": "OAuth 2.0 token for the current user.",
      "location": "query"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "upload_protocol": {
      "location": "query",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string"
    },
    "alt": {
      "description": "Data format for response.",
      "type": "string",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "location": "query",
      "default": "json"
    },
    "prettyPrint": {
      "default": "true",
      "description": "Returns response with indentations and line breaks.",
      "location": "query",
      "type": "boolean"
    },
    "key": {
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string"
    },
    "callback": {
      "location": "query",
      "type": "string",
      "description": "JSONP"
    }
  },
  "fullyEncodeReservedExpansion": true,
  "protocol": "rest",
  "canonicalName": "Area120 Tables",
  "description": "",
  "name": "area120tables",
  "version_module": true,
  "ownerName": "Google",
  "schemas": {
    "UpdateRowRequest": {
      "description": "Request message for TablesService.UpdateRow.",
      "properties": {
        "updateMask": {
          "type": "string",
          "description": "The list of fields to update.",
          "format": "google-fieldmask"
        },
        "row": {
          "$ref": "Row",
          "description": "Required. The row to update."
        },
        "view": {
          "description": "Optional. Column key to use for values in the row. Defaults to user entered name.",
          "enumDescriptions": [
            "Defaults to user entered text.",
            "Uses internally generated column id to identify values."
          ],
          "type": "string",
          "enum": [
            "VIEW_UNSPECIFIED",
            "COLUMN_ID_VIEW"
          ]
        }
      },
      "type": "object",
      "id": "UpdateRowRequest"
    },
    "Table": {
      "type": "object",
      "description": "A single table. NextId: 7",
      "properties": {
        "displayName": {
          "description": "The human readable title of the table.",
          "type": "string"
        },
        "savedViews": {
          "description": "Saved views for this table.",
          "type": "array",
          "items": {
            "$ref": "SavedView"
          }
        },
        "columns": {
          "type": "array",
          "items": {
            "$ref": "ColumnDescription"
          },
          "description": "List of columns in this table. Order of columns matches the display order."
        },
        "createTime": {
          "type": "string",
          "description": "Time when the table was created.",
          "format": "google-datetime"
        },
        "name": {
          "type": "string",
          "description": "The resource name of the table. Table names have the form `tables/{table}`."
        },
        "updateTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Time when the table was last updated excluding updates to individual rows"
        }
      },
      "id": "Table"
    },
    "LookupDetails": {
      "description": "Details about a lookup column whose value comes from the associated relationship.",
      "type": "object",
      "id": "LookupDetails",
      "properties": {
        "relationshipColumnId": {
          "description": "The id of the relationship column.",
          "type": "string"
        },
        "relationshipColumn": {
          "description": "The name of the relationship column associated with the lookup.",
          "type": "string"
        }
      }
    },
    "RelationshipDetails": {
      "type": "object",
      "description": "Details about a relationship column.",
      "properties": {
        "linkedTable": {
          "type": "string",
          "description": "The name of the table this relationship is linked to."
        }
      },
      "id": "RelationshipDetails"
    },
    "ListWorkspacesResponse": {
      "description": "Response message for TablesService.ListWorkspaces.",
      "properties": {
        "workspaces": {
          "items": {
            "$ref": "Workspace"
          },
          "type": "array",
          "description": "The list of workspaces."
        },
        "nextPageToken": {
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is empty, there are no subsequent pages.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "ListWorkspacesResponse"
    },
    "BatchUpdateRowsResponse": {
      "id": "BatchUpdateRowsResponse",
      "properties": {
        "rows": {
          "items": {
            "$ref": "Row"
          },
          "type": "array",
          "description": "The updated rows."
        }
      },
      "description": "Response message for TablesService.BatchUpdateRows.",
      "type": "object"
    },
    "Workspace": {
      "id": "Workspace",
      "type": "object",
      "properties": {
        "tables": {
          "items": {
            "$ref": "Table"
          },
          "description": "The list of tables in the workspace.",
          "type": "array"
        },
        "displayName": {
          "type": "string",
          "description": "The human readable title of the workspace."
        },
        "createTime": {
          "description": "Time when the workspace was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "updateTime": {
          "format": "google-datetime",
          "description": "Time when the workspace was last updated.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The resource name of the workspace. Workspace names have the form `workspaces/{workspace}`."
        }
      },
      "description": "A single workspace."
    },
    "ColumnDescription": {
      "id": "ColumnDescription",
      "type": "object",
      "description": "Details on a column in the table.",
      "properties": {
        "id": {
          "description": "Internal id for a column.",
          "type": "string"
        },
        "lookupDetails": {
          "description": "Optional. Indicates that this is a lookup column whose value is derived from the relationship column specified in the details. Lookup columns can not be updated directly. To change the value you must update the associated relationship column.",
          "$ref": "LookupDetails"
        },
        "multipleValuesDisallowed": {
          "description": "Optional. Indicates whether or not multiple values are allowed for array types where such a restriction is possible.",
          "type": "boolean"
        },
        "relationshipDetails": {
          "$ref": "RelationshipDetails",
          "description": "Optional. Additional details about a relationship column. Specified when data_type is relationship."
        },
        "dataType": {
          "description": "Data type of the column Supported types are auto_id, boolean, boolean_list, creator, create_timestamp, date, dropdown, location, integer, integer_list, number, number_list, person, person_list, tags, check_list, text, text_list, update_timestamp, updater, relationship, file_attachment_list. These types directly map to the column types supported on Tables website.",
          "type": "string"
        },
        "name": {
          "description": "column name",
          "type": "string"
        },
        "labels": {
          "items": {
            "$ref": "LabeledItem"
          },
          "type": "array",
          "description": "Optional. Range of labeled values for the column. Some columns like tags and drop-downs limit the values to a set of possible values. We return the range of values in such cases to help clients implement better user data validation."
        }
      }
    },
    "ListRowsResponse": {
      "id": "ListRowsResponse",
      "description": "Response message for TablesService.ListRows.",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is empty, there are no subsequent pages."
        },
        "rows": {
          "description": "The rows from the specified table.",
          "items": {
            "$ref": "Row"
          },
          "type": "array"
        }
      }
    },
    "BatchDeleteRowsRequest": {
      "id": "BatchDeleteRowsRequest",
      "properties": {
        "names": {
          "description": "Required. The names of the rows to delete. All rows must belong to the parent table or else the entire batch will fail. A maximum of 500 rows can be deleted in a batch. Format: tables/{table}/rows/{row}",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Request message for TablesService.BatchDeleteRows",
      "type": "object"
    },
    "BatchCreateRowsRequest": {
      "type": "object",
      "properties": {
        "requests": {
          "description": "Required. The request message specifying the rows to create. A maximum of 500 rows can be created in a single batch.",
          "items": {
            "$ref": "CreateRowRequest"
          },
          "type": "array"
        }
      },
      "id": "BatchCreateRowsRequest",
      "description": "Request message for TablesService.BatchCreateRows."
    },
    "LabeledItem": {
      "id": "LabeledItem",
      "properties": {
        "id": {
          "type": "string",
          "description": "Internal id associated with the item."
        },
        "name": {
          "description": "Display string as entered by user.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "A single item in a labeled column."
    },
    "CreateRowRequest": {
      "description": "Request message for TablesService.CreateRow.",
      "id": "CreateRowRequest",
      "properties": {
        "parent": {
          "description": "Required. The parent table where this row will be created. Format: tables/{table}",
          "type": "string"
        },
        "view": {
          "enum": [
            "VIEW_UNSPECIFIED",
            "COLUMN_ID_VIEW"
          ],
          "description": "Optional. Column key to use for values in the row. Defaults to user entered name.",
          "enumDescriptions": [
            "Defaults to user entered text.",
            "Uses internally generated column id to identify values."
          ],
          "type": "string"
        },
        "row": {
          "$ref": "Row",
          "description": "Required. The row to create."
        }
      },
      "type": "object"
    },
    "BatchUpdateRowsRequest": {
      "type": "object",
      "id": "BatchUpdateRowsRequest",
      "properties": {
        "requests": {
          "items": {
            "$ref": "UpdateRowRequest"
          },
          "type": "array",
          "description": "Required. The request messages specifying the rows to update. A maximum of 500 rows can be modified in a single batch."
        }
      },
      "description": "Request message for TablesService.BatchUpdateRows."
    },
    "SavedView": {
      "description": "A saved view of a table. NextId: 3",
      "type": "object",
      "id": "SavedView",
      "properties": {
        "name": {
          "description": "Display name of the saved view.",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "Internal id associated with the saved view."
        }
      }
    },
    "Row": {
      "id": "Row",
      "properties": {
        "updateTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Time when the row was last updated."
        },
        "name": {
          "description": "The resource name of the row. Row names have the form `tables/{table}/rows/{row}`. The name is ignored when creating a row.",
          "type": "string"
        },
        "values": {
          "additionalProperties": {
            "type": "any"
          },
          "type": "object",
          "description": "The values of the row. This is a map of column key to value. Key is user entered name(default) or the internal column id based on the view in the request."
        },
        "createTime": {
          "description": "Time when the row was created.",
          "type": "string",
          "format": "google-datetime"
        }
      },
      "type": "object",
      "description": "A single row in a table."
    },
    "Empty": {
      "properties": {},
      "id": "Empty",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.",
      "type": "object"
    },
    "ListTablesResponse": {
      "properties": {
        "tables": {
          "type": "array",
          "items": {
            "$ref": "Table"
          },
          "description": "The list of tables."
        },
        "nextPageToken": {
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is empty, there are no subsequent pages.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "ListTablesResponse",
      "description": "Response message for TablesService.ListTables."
    },
    "BatchCreateRowsResponse": {
      "id": "BatchCreateRowsResponse",
      "description": "Response message for TablesService.BatchCreateRows.",
      "properties": {
        "rows": {
          "items": {
            "$ref": "Row"
          },
          "type": "array",
          "description": "The created rows."
        }
      },
      "type": "object"
    }
  },
  "baseUrl": "https://area120tables.googleapis.com/",
  "revision": "20210413",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "documentationLink": "https://support.google.com/area120-tables/answer/10011390",
  "servicePath": "",
  "resources": {
    "workspaces": {
      "methods": {
        "get": {
          "parameterOrder": [
            "name"
          ],
          "httpMethod": "GET",
          "path": "v1alpha1/{+name}",
          "flatPath": "v1alpha1/workspaces/{workspacesId}",
          "scopes": [
            "https://www.googleapis.com/auth/drive",
            "https://www.googleapis.com/auth/drive.file",
            "https://www.googleapis.com/auth/drive.readonly",
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/spreadsheets.readonly",
            "https://www.googleapis.com/auth/tables"
          ],
          "description": "Gets a workspace. Returns NOT_FOUND if the workspace does not exist.",
          "response": {
            "$ref": "Workspace"
          },
          "id": "area120tables.workspaces.get",
          "parameters": {
            "name": {
              "description": "Required. The name of the workspace to retrieve. Format: workspaces/{workspace}",
              "pattern": "^workspaces/[^/]+$",
              "required": true,
              "type": "string",
              "location": "path"
            }
          }
        },
        "list": {
          "httpMethod": "GET",
          "id": "area120tables.workspaces.list",
          "flatPath": "v1alpha1/workspaces",
          "path": "v1alpha1/workspaces",
          "description": "Lists workspaces for the user.",
          "response": {
            "$ref": "ListWorkspacesResponse"
          },
          "parameters": {
            "pageSize": {
              "type": "integer",
              "format": "int32",
              "description": "The maximum number of workspaces to return. The service may return fewer than this value. If unspecified, at most 10 workspaces are returned. The maximum value is 25; values above 25 are coerced to 25.",
              "location": "query"
            },
            "pageToken": {
              "location": "query",
              "description": "A page token, received from a previous `ListWorkspaces` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListWorkspaces` must match the call that provided the page token.",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/drive",
            "https://www.googleapis.com/auth/drive.file",
            "https://www.googleapis.com/auth/drive.readonly",
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/spreadsheets.readonly",
            "https://www.googleapis.com/auth/tables"
          ],
          "parameterOrder": []
        }
      }
    },
    "tables": {
      "methods": {
        "get": {
          "parameterOrder": [
            "name"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/drive",
            "https://www.googleapis.com/auth/drive.file",
            "https://www.googleapis.com/auth/drive.readonly",
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/spreadsheets.readonly",
            "https://www.googleapis.com/auth/tables"
          ],
          "httpMethod": "GET",
          "flatPath": "v1alpha1/tables/{tablesId}",
          "path": "v1alpha1/{+name}",
          "description": "Gets a table. Returns NOT_FOUND if the table does not exist.",
          "response": {
            "$ref": "Table"
          },
          "id": "area120tables.tables.get",
          "parameters": {
            "name": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Required. The name of the table to retrieve. Format: tables/{table}",
              "pattern": "^tables/[^/]+$"
            }
          }
        },
        "list": {
          "parameters": {
            "pageSize": {
              "description": "The maximum number of tables to return. The service may return fewer than this value. If unspecified, at most 20 tables are returned. The maximum value is 100; values above 100 are coerced to 100.",
              "type": "integer",
              "format": "int32",
              "location": "query"
            },
            "orderBy": {
              "location": "query",
              "type": "string",
              "description": "Optional. Sorting order for the list of tables on createTime/updateTime."
            },
            "pageToken": {
              "description": "A page token, received from a previous `ListTables` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListTables` must match the call that provided the page token.",
              "location": "query",
              "type": "string"
            }
          },
          "flatPath": "v1alpha1/tables",
          "description": "Lists tables for the user.",
          "id": "area120tables.tables.list",
          "path": "v1alpha1/tables",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/drive",
            "https://www.googleapis.com/auth/drive.file",
            "https://www.googleapis.com/auth/drive.readonly",
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/spreadsheets.readonly",
            "https://www.googleapis.com/auth/tables"
          ],
          "response": {
            "$ref": "ListTablesResponse"
          },
          "parameterOrder": []
        }
      },
      "resources": {
        "rows": {
          "methods": {
            "batchCreate": {
              "flatPath": "v1alpha1/tables/{tablesId}/rows:batchCreate",
              "response": {
                "$ref": "BatchCreateRowsResponse"
              },
              "parameters": {
                "parent": {
                  "pattern": "^tables/[^/]+$",
                  "description": "Required. The parent table where the rows will be created. Format: tables/{table}",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "path": "v1alpha1/{+parent}/rows:batchCreate",
              "parameterOrder": [
                "parent"
              ],
              "id": "area120tables.tables.rows.batchCreate",
              "scopes": [
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file",
                "https://www.googleapis.com/auth/spreadsheets",
                "https://www.googleapis.com/auth/tables"
              ],
              "request": {
                "$ref": "BatchCreateRowsRequest"
              },
              "description": "Creates multiple rows.",
              "httpMethod": "POST"
            },
            "get": {
              "parameters": {
                "name": {
                  "required": true,
                  "location": "path",
                  "description": "Required. The name of the row to retrieve. Format: tables/{table}/rows/{row}",
                  "pattern": "^tables/[^/]+/rows/[^/]+$",
                  "type": "string"
                },
                "view": {
                  "enumDescriptions": [
                    "Defaults to user entered text.",
                    "Uses internally generated column id to identify values."
                  ],
                  "location": "query",
                  "type": "string",
                  "enum": [
                    "VIEW_UNSPECIFIED",
                    "COLUMN_ID_VIEW"
                  ],
                  "description": "Optional. Column key to use for values in the row. Defaults to user entered name."
                }
              },
              "flatPath": "v1alpha1/tables/{tablesId}/rows/{rowsId}",
              "path": "v1alpha1/{+name}",
              "description": "Gets a row. Returns NOT_FOUND if the row does not exist in the table.",
              "response": {
                "$ref": "Row"
              },
              "httpMethod": "GET",
              "parameterOrder": [
                "name"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file",
                "https://www.googleapis.com/auth/drive.readonly",
                "https://www.googleapis.com/auth/spreadsheets",
                "https://www.googleapis.com/auth/spreadsheets.readonly",
                "https://www.googleapis.com/auth/tables"
              ],
              "id": "area120tables.tables.rows.get"
            },
            "delete": {
              "flatPath": "v1alpha1/tables/{tablesId}/rows/{rowsId}",
              "httpMethod": "DELETE",
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "name": {
                  "description": "Required. The name of the row to delete. Format: tables/{table}/rows/{row}",
                  "pattern": "^tables/[^/]+/rows/[^/]+$",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              },
              "id": "area120tables.tables.rows.delete",
              "path": "v1alpha1/{+name}",
              "response": {
                "$ref": "Empty"
              },
              "scopes": [
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file",
                "https://www.googleapis.com/auth/spreadsheets",
                "https://www.googleapis.com/auth/tables"
              ],
              "description": "Deletes a row."
            },
            "patch": {
              "id": "area120tables.tables.rows.patch",
              "description": "Updates a row.",
              "request": {
                "$ref": "Row"
              },
              "flatPath": "v1alpha1/tables/{tablesId}/rows/{rowsId}",
              "path": "v1alpha1/{+name}",
              "response": {
                "$ref": "Row"
              },
              "httpMethod": "PATCH",
              "scopes": [
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file",
                "https://www.googleapis.com/auth/spreadsheets",
                "https://www.googleapis.com/auth/tables"
              ],
              "parameters": {
                "view": {
                  "type": "string",
                  "description": "Optional. Column key to use for values in the row. Defaults to user entered name.",
                  "enumDescriptions": [
                    "Defaults to user entered text.",
                    "Uses internally generated column id to identify values."
                  ],
                  "enum": [
                    "VIEW_UNSPECIFIED",
                    "COLUMN_ID_VIEW"
                  ],
                  "location": "query"
                },
                "name": {
                  "pattern": "^tables/[^/]+/rows/[^/]+$",
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The resource name of the row. Row names have the form `tables/{table}/rows/{row}`. The name is ignored when creating a row."
                },
                "updateMask": {
                  "description": "The list of fields to update.",
                  "format": "google-fieldmask",
                  "location": "query",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ]
            },
            "list": {
              "response": {
                "$ref": "ListRowsResponse"
              },
              "path": "v1alpha1/{+parent}/rows",
              "id": "area120tables.tables.rows.list",
              "httpMethod": "GET",
              "parameters": {
                "orderBy": {
                  "description": "Optional. Sorting order for the list of rows on createTime/updateTime.",
                  "location": "query",
                  "type": "string"
                },
                "view": {
                  "location": "query",
                  "description": "Optional. Column key to use for values in the row. Defaults to user entered name.",
                  "enumDescriptions": [
                    "Defaults to user entered text.",
                    "Uses internally generated column id to identify values."
                  ],
                  "type": "string",
                  "enum": [
                    "VIEW_UNSPECIFIED",
                    "COLUMN_ID_VIEW"
                  ]
                },
                "parent": {
                  "description": "Required. The parent table. Format: tables/{table}",
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "pattern": "^tables/[^/]+$"
                },
                "pageToken": {
                  "location": "query",
                  "type": "string",
                  "description": "A page token, received from a previous `ListRows` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListRows` must match the call that provided the page token."
                },
                "pageSize": {
                  "location": "query",
                  "format": "int32",
                  "type": "integer",
                  "description": "The maximum number of rows to return. The service may return fewer than this value. If unspecified, at most 50 rows are returned. The maximum value is 1,000; values above 1,000 are coerced to 1,000."
                },
                "filter": {
                  "description": "Optional. Filter to only include resources matching the requirements. For more information, see [Filtering list results](https://support.google.com/area120-tables/answer/10503371).",
                  "location": "query",
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file",
                "https://www.googleapis.com/auth/drive.readonly",
                "https://www.googleapis.com/auth/spreadsheets",
                "https://www.googleapis.com/auth/spreadsheets.readonly",
                "https://www.googleapis.com/auth/tables"
              ],
              "description": "Lists rows in a table. Returns NOT_FOUND if the table does not exist.",
              "parameterOrder": [
                "parent"
              ],
              "flatPath": "v1alpha1/tables/{tablesId}/rows"
            },
            "batchUpdate": {
              "description": "Updates multiple rows.",
              "httpMethod": "POST",
              "parameterOrder": [
                "parent"
              ],
              "path": "v1alpha1/{+parent}/rows:batchUpdate",
              "id": "area120tables.tables.rows.batchUpdate",
              "flatPath": "v1alpha1/tables/{tablesId}/rows:batchUpdate",
              "scopes": [
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file",
                "https://www.googleapis.com/auth/spreadsheets",
                "https://www.googleapis.com/auth/tables"
              ],
              "parameters": {
                "parent": {
                  "location": "path",
                  "required": true,
                  "pattern": "^tables/[^/]+$",
                  "type": "string",
                  "description": "Required. The parent table shared by all rows being updated. Format: tables/{table}"
                }
              },
              "request": {
                "$ref": "BatchUpdateRowsRequest"
              },
              "response": {
                "$ref": "BatchUpdateRowsResponse"
              }
            },
            "create": {
              "response": {
                "$ref": "Row"
              },
              "request": {
                "$ref": "Row"
              },
              "parameters": {
                "parent": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "Required. The parent table where this row will be created. Format: tables/{table}",
                  "pattern": "^tables/[^/]+$"
                },
                "view": {
                  "type": "string",
                  "enumDescriptions": [
                    "Defaults to user entered text.",
                    "Uses internally generated column id to identify values."
                  ],
                  "location": "query",
                  "description": "Optional. Column key to use for values in the row. Defaults to user entered name.",
                  "enum": [
                    "VIEW_UNSPECIFIED",
                    "COLUMN_ID_VIEW"
                  ]
                }
              },
              "flatPath": "v1alpha1/tables/{tablesId}/rows",
              "httpMethod": "POST",
              "path": "v1alpha1/{+parent}/rows",
              "parameterOrder": [
                "parent"
              ],
              "description": "Creates a row.",
              "scopes": [
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file",
                "https://www.googleapis.com/auth/spreadsheets",
                "https://www.googleapis.com/auth/tables"
              ],
              "id": "area120tables.tables.rows.create"
            },
            "batchDelete": {
              "id": "area120tables.tables.rows.batchDelete",
              "parameters": {
                "parent": {
                  "type": "string",
                  "pattern": "^tables/[^/]+$",
                  "description": "Required. The parent table shared by all rows being deleted. Format: tables/{table}",
                  "required": true,
                  "location": "path"
                }
              },
              "description": "Deletes multiple rows.",
              "httpMethod": "POST",
              "path": "v1alpha1/{+parent}/rows:batchDelete",
              "response": {
                "$ref": "Empty"
              },
              "flatPath": "v1alpha1/tables/{tablesId}/rows:batchDelete",
              "scopes": [
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file",
                "https://www.googleapis.com/auth/spreadsheets",
                "https://www.googleapis.com/auth/tables"
              ],
              "parameterOrder": [
                "parent"
              ],
              "request": {
                "$ref": "BatchDeleteRowsRequest"
              }
            }
          }
        }
      }
    }
  }
}
