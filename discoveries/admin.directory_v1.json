{
  "basePath": "",
  "title": "Admin SDK API",
  "packagePath": "admin",
  "description": "Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.",
  "resources": {
    "orgunits": {
      "methods": {
        "delete": {
          "id": "directory.orgunits.delete",
          "httpMethod": "DELETE",
          "description": "Removes an organizational unit.",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "parameters": {
            "customerId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users)."
            },
            "orgUnitPath": {
              "pattern": "^.*$",
              "type": "string",
              "required": true,
              "location": "path",
              "description": "The full path of the organizational unit or its unique ID."
            },
            "allowPlus": {
              "location": "query",
              "type": "boolean",
              "description": "Parses org unit path without url decode to allow for plus in ou name"
            }
          },
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ]
        },
        "patch": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "parameters": {
            "customerId": {
              "required": true,
              "location": "path",
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "type": "string"
            },
            "orgUnitPath": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "The full path of the organizational unit or its unique ID.",
              "pattern": "^.*$"
            },
            "allowPlus": {
              "description": "Parses org unit path without url decode to allow for plus in ou name",
              "type": "boolean",
              "location": "query"
            }
          },
          "description": "Updates an organizational unit. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch)",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "request": {
            "$ref": "OrgUnit"
          },
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "id": "directory.orgunits.patch",
          "httpMethod": "PATCH",
          "response": {
            "$ref": "OrgUnit"
          }
        },
        "list": {
          "description": "Retrieves a list of all organizational units for an account.",
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "parameterOrder": [
            "customerId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "httpMethod": "GET",
          "response": {
            "$ref": "OrgUnits"
          },
          "id": "directory.orgunits.list",
          "parameters": {
            "orgUnitPath": {
              "location": "query",
              "description": "The full path to the organizational unit or its unique ID. Returns the children of the specified organizational unit.",
              "type": "string",
              "default": ""
            },
            "customerId": {
              "required": true,
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "location": "path",
              "type": "string"
            },
            "type": {
              "enum": [
                "all",
                "children"
              ],
              "description": "Whether to return all sub-organizations or just immediate children.",
              "type": "string",
              "enumDescriptions": [
                "All sub-organizational units.",
                "Immediate children only (default)."
              ],
              "location": "query"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits"
        },
        "update": {
          "response": {
            "$ref": "OrgUnit"
          },
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "description": "Updates an organizational unit.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "httpMethod": "PUT",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "id": "directory.orgunits.update",
          "request": {
            "$ref": "OrgUnit"
          },
          "parameters": {
            "orgUnitPath": {
              "location": "path",
              "required": true,
              "pattern": "^.*$",
              "type": "string",
              "description": "The full path of the organizational unit or its unique ID."
            },
            "allowPlus": {
              "location": "query",
              "description": "Parses org unit path without url decode to allow for plus in ou name",
              "type": "boolean"
            },
            "customerId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users)."
            }
          }
        },
        "insert": {
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "id": "directory.orgunits.insert",
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "parameters": {
            "customerId": {
              "type": "string",
              "location": "path",
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "required": true
            }
          },
          "request": {
            "$ref": "OrgUnit"
          },
          "httpMethod": "POST",
          "parameterOrder": [
            "customerId"
          ],
          "response": {
            "$ref": "OrgUnit"
          },
          "description": "Adds an organizational unit.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ]
        },
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "description": "Retrieves an organizational unit.",
          "httpMethod": "GET",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "parameters": {
            "orgUnitPath": {
              "location": "path",
              "type": "string",
              "description": "The full path of the organizational unit or its unique ID.",
              "required": true,
              "pattern": "^.*$"
            },
            "customerId": {
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "allowPlus": {
              "location": "query",
              "type": "boolean",
              "description": "Parses org unit path without url decode to allow for plus in ou name"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "id": "directory.orgunits.get",
          "response": {
            "$ref": "OrgUnit"
          },
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}"
        }
      }
    },
    "domainAliases": {
      "methods": {
        "list": {
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "description": "Lists the domain aliases of the customer.",
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "parameterOrder": [
            "customer"
          ],
          "id": "directory.domainAliases.list",
          "response": {
            "$ref": "DomainAliases"
          },
          "httpMethod": "GET",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the Google Workspace account.",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "parentDomainName": {
              "type": "string",
              "location": "query",
              "description": "Name of the parent domain for which domain aliases are to be fetched."
            }
          }
        },
        "delete": {
          "id": "directory.domainAliases.delete",
          "description": "Deletes a domain Alias of the customer.",
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "httpMethod": "DELETE",
          "parameters": {
            "domainAliasName": {
              "description": "Name of domain alias to be retrieved.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "customer": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the Google Workspace account.",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ]
        },
        "get": {
          "response": {
            "$ref": "DomainAlias"
          },
          "description": "Retrieves a domain alias of the customer.",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "parameters": {
            "domainAliasName": {
              "description": "Name of domain alias to be retrieved.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "customer": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the Google Workspace account.",
              "location": "path"
            }
          },
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "id": "directory.domainAliases.get",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}"
        },
        "insert": {
          "id": "directory.domainAliases.insert",
          "response": {
            "$ref": "DomainAlias"
          },
          "parameters": {
            "customer": {
              "location": "path",
              "description": "Immutable ID of the Google Workspace account.",
              "type": "string",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "description": "Inserts a domain alias of the customer.",
          "parameterOrder": [
            "customer"
          ],
          "request": {
            "$ref": "DomainAlias"
          },
          "httpMethod": "POST",
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ]
        }
      }
    },
    "tokens": {
      "methods": {
        "list": {
          "parameters": {
            "userKey": {
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}/tokens",
          "id": "directory.tokens.list",
          "response": {
            "$ref": "Tokens"
          },
          "description": "Returns the set of tokens specified user has issued to 3rd party applications.",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "path": "admin/directory/v1/users/{userKey}/tokens",
          "parameterOrder": [
            "userKey"
          ]
        },
        "get": {
          "parameters": {
            "userKey": {
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string",
              "location": "path"
            },
            "clientId": {
              "description": "The Client ID of the application the token is issued to.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "id": "directory.tokens.get",
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "response": {
            "$ref": "Token"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "httpMethod": "GET",
          "description": "Get information about an access token issued by a user."
        },
        "delete": {
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "id": "directory.tokens.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "description": "Delete all access tokens issued by a user for an application.",
          "parameters": {
            "userKey": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            },
            "clientId": {
              "location": "path",
              "description": "The Client ID of the application the token is issued to.",
              "type": "string",
              "required": true
            }
          },
          "httpMethod": "DELETE"
        }
      }
    },
    "customers": {
      "resources": {
        "chrome": {
          "resources": {
            "printers": {
              "methods": {
                "create": {
                  "path": "admin/directory/v1/{+parent}/chrome/printers",
                  "id": "admin.customers.chrome.printers.create",
                  "parameterOrder": [
                    "parent"
                  ],
                  "httpMethod": "POST",
                  "description": "Creates a printer under given Organization Unit.",
                  "request": {
                    "$ref": "Printer"
                  },
                  "response": {
                    "$ref": "Printer"
                  },
                  "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printers",
                  "parameters": {
                    "parent": {
                      "pattern": "^customers/[^/]+$",
                      "required": true,
                      "description": "Required. The name of the customer. Format: customers/{customer_id}",
                      "location": "path",
                      "type": "string"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.chrome.printers"
                  ]
                },
                "delete": {
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.chrome.printers"
                  ],
                  "path": "admin/directory/v1/{+name}",
                  "parameters": {
                    "name": {
                      "type": "string",
                      "pattern": "^customers/[^/]+/chrome/printers/[^/]+$",
                      "required": true,
                      "description": "Required. The name of the printer to be updated. Format: customers/{customer_id}/chrome/printers/{printer_id}",
                      "location": "path"
                    }
                  },
                  "response": {
                    "$ref": "Empty"
                  },
                  "id": "admin.customers.chrome.printers.delete",
                  "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printers/{printersId}",
                  "parameterOrder": [
                    "name"
                  ],
                  "httpMethod": "DELETE",
                  "description": "Deletes a `Printer`."
                },
                "list": {
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "ListPrintersResponse"
                  },
                  "path": "admin/directory/v1/{+parent}/chrome/printers",
                  "parameters": {
                    "parent": {
                      "required": true,
                      "pattern": "^customers/[^/]+$",
                      "type": "string",
                      "description": "Required. The name of the customer who owns this collection of printers. Format: customers/{customer_id}",
                      "location": "path"
                    },
                    "orgUnitId": {
                      "description": "Organization Unit that we want to list the printers for. When org_unit is not present in the request then all printers of the customer are returned (or filtered). When org_unit is present in the request then only printers available to this OU will be returned (owned or inherited). You may see if printer is owned or inherited for this OU by looking at Printer.org_unit_id.",
                      "location": "query",
                      "type": "string"
                    },
                    "filter": {
                      "location": "query",
                      "description": "Search query. Search syntax is shared between this api and Admin Console printers pages.",
                      "type": "string"
                    },
                    "pageSize": {
                      "description": "The maximum number of objects to return. The service may return fewer than this value.",
                      "type": "integer",
                      "format": "int32",
                      "location": "query"
                    },
                    "pageToken": {
                      "location": "query",
                      "type": "string",
                      "description": "A page token, received from a previous call."
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.chrome.printers",
                    "https://www.googleapis.com/auth/admin.chrome.printers.readonly"
                  ],
                  "description": "List printers configs.",
                  "httpMethod": "GET",
                  "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printers",
                  "id": "admin.customers.chrome.printers.list"
                },
                "batchCreatePrinters": {
                  "response": {
                    "$ref": "BatchCreatePrintersResponse"
                  },
                  "httpMethod": "POST",
                  "request": {
                    "$ref": "BatchCreatePrintersRequest"
                  },
                  "path": "admin/directory/v1/{+parent}/chrome/printers:batchCreatePrinters",
                  "id": "admin.customers.chrome.printers.batchCreatePrinters",
                  "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printers:batchCreatePrinters",
                  "parameterOrder": [
                    "parent"
                  ],
                  "parameters": {
                    "parent": {
                      "type": "string",
                      "pattern": "^customers/[^/]+$",
                      "required": true,
                      "location": "path",
                      "description": "Required. The name of the customer. Format: customers/{customer_id}"
                    }
                  },
                  "description": "Creates printers under given Organization Unit.",
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.chrome.printers"
                  ]
                },
                "get": {
                  "description": "Returns a `Printer` resource (printer's config).",
                  "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printers/{printersId}",
                  "id": "admin.customers.chrome.printers.get",
                  "response": {
                    "$ref": "Printer"
                  },
                  "parameters": {
                    "name": {
                      "description": "Required. The name of the printer to retrieve. Format: customers/{customer_id}/chrome/printers/{printer_id}",
                      "location": "path",
                      "type": "string",
                      "required": true,
                      "pattern": "^customers/[^/]+/chrome/printers/[^/]+$"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "path": "admin/directory/v1/{+name}",
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.chrome.printers",
                    "https://www.googleapis.com/auth/admin.chrome.printers.readonly"
                  ],
                  "httpMethod": "GET"
                },
                "patch": {
                  "httpMethod": "PATCH",
                  "response": {
                    "$ref": "Printer"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.chrome.printers"
                  ],
                  "id": "admin.customers.chrome.printers.patch",
                  "path": "admin/directory/v1/{+name}",
                  "description": "Updates a `Printer` resource.",
                  "parameterOrder": [
                    "name"
                  ],
                  "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printers/{printersId}",
                  "request": {
                    "$ref": "Printer"
                  },
                  "parameters": {
                    "clearMask": {
                      "format": "google-fieldmask",
                      "location": "query",
                      "type": "string",
                      "description": "The list of fields to be cleared. Note, some of the fields are read only and cannot be updated. Values for not specified fields will be patched."
                    },
                    "updateMask": {
                      "description": "The list of fields to be updated. Note, some of the fields are read only and cannot be updated. Values for not specified fields will be patched.",
                      "location": "query",
                      "type": "string",
                      "format": "google-fieldmask"
                    },
                    "name": {
                      "required": true,
                      "location": "path",
                      "type": "string",
                      "pattern": "^customers/[^/]+/chrome/printers/[^/]+$",
                      "description": "The resource name of the Printer object, in the format customers/{customer-id}/printers/{printer-id} (During printer creation leave empty)"
                    }
                  }
                },
                "listPrinterModels": {
                  "response": {
                    "$ref": "ListPrinterModelsResponse"
                  },
                  "id": "admin.customers.chrome.printers.listPrinterModels",
                  "parameters": {
                    "filter": {
                      "type": "string",
                      "location": "query",
                      "description": "Filer to list only models by a given manufacturer in format: \"manufacturer:Brother\". Search syntax is shared between this api and Admin Console printers pages."
                    },
                    "pageSize": {
                      "description": "The maximum number of objects to return. The service may return fewer than this value.",
                      "format": "int32",
                      "location": "query",
                      "type": "integer"
                    },
                    "parent": {
                      "location": "path",
                      "description": "Required. The name of the customer who owns this collection of printers. Format: customers/{customer_id}",
                      "type": "string",
                      "required": true,
                      "pattern": "^customers/[^/]+$"
                    },
                    "pageToken": {
                      "type": "string",
                      "description": "A page token, received from a previous call.",
                      "location": "query"
                    }
                  },
                  "httpMethod": "GET",
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.chrome.printers",
                    "https://www.googleapis.com/auth/admin.chrome.printers.readonly"
                  ],
                  "description": "Lists the supported printer models.",
                  "path": "admin/directory/v1/{+parent}/chrome/printers:listPrinterModels",
                  "parameterOrder": [
                    "parent"
                  ],
                  "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printers:listPrinterModels"
                },
                "batchDeletePrinters": {
                  "response": {
                    "$ref": "BatchDeletePrintersResponse"
                  },
                  "httpMethod": "POST",
                  "path": "admin/directory/v1/{+parent}/chrome/printers:batchDeletePrinters",
                  "id": "admin.customers.chrome.printers.batchDeletePrinters",
                  "parameterOrder": [
                    "parent"
                  ],
                  "description": "Deletes printers in batch.",
                  "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printers:batchDeletePrinters",
                  "parameters": {
                    "parent": {
                      "location": "path",
                      "pattern": "^customers/[^/]+$",
                      "required": true,
                      "description": "Required. The name of the customer. Format: customers/{customer_id}",
                      "type": "string"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.chrome.printers"
                  ],
                  "request": {
                    "$ref": "BatchDeletePrintersRequest"
                  }
                }
              }
            }
          }
        }
      },
      "methods": {
        "patch": {
          "parameterOrder": [
            "customerKey"
          ],
          "id": "directory.customers.patch",
          "description": "Patch Customers via Apiary Patch Orchestration",
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "parameters": {
            "customerKey": {
              "description": "Id of the customer to be updated",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "httpMethod": "PATCH",
          "response": {
            "$ref": "Customer"
          },
          "request": {
            "$ref": "Customer"
          },
          "path": "admin/directory/v1/customers/{customerKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ]
        },
        "get": {
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "response": {
            "$ref": "Customer"
          },
          "description": "Retrieves a customer.",
          "path": "admin/directory/v1/customers/{customerKey}",
          "id": "directory.customers.get",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer",
            "https://www.googleapis.com/auth/admin.directory.customer.readonly"
          ],
          "parameterOrder": [
            "customerKey"
          ],
          "parameters": {
            "customerKey": {
              "required": true,
              "location": "path",
              "description": "Id of the customer to be retrieved",
              "type": "string"
            }
          }
        },
        "update": {
          "path": "admin/directory/v1/customers/{customerKey}",
          "request": {
            "$ref": "Customer"
          },
          "httpMethod": "PUT",
          "description": "Updates a customer.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "parameters": {
            "customerKey": {
              "required": true,
              "description": "Id of the customer to be updated",
              "type": "string",
              "location": "path"
            }
          },
          "id": "directory.customers.update",
          "parameterOrder": [
            "customerKey"
          ],
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "response": {
            "$ref": "Customer"
          }
        }
      }
    },
    "asps": {
      "methods": {
        "list": {
          "response": {
            "$ref": "Asps"
          },
          "httpMethod": "GET",
          "parameters": {
            "userKey": {
              "type": "string",
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true
            }
          },
          "description": "List the ASPs issued by a user.",
          "path": "admin/directory/v1/users/{userKey}/asps",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/asps",
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.asps.list"
        },
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "description": "Delete an ASP issued by a user.",
          "httpMethod": "DELETE",
          "parameters": {
            "userKey": {
              "type": "string",
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true
            },
            "codeId": {
              "format": "int32",
              "description": "The unique ID of the ASP to be deleted.",
              "type": "integer",
              "location": "path",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "id": "directory.asps.delete"
        },
        "get": {
          "response": {
            "$ref": "Asp"
          },
          "httpMethod": "GET",
          "id": "directory.asps.get",
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "type": "string",
              "location": "path"
            },
            "codeId": {
              "location": "path",
              "description": "The unique ID of the ASP.",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "description": "Get information about an ASP issued by a user.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ]
        }
      }
    },
    "domains": {
      "methods": {
        "insert": {
          "httpMethod": "POST",
          "parameterOrder": [
            "customer"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "id": "directory.domains.insert",
          "description": "Inserts a domain of the customer.",
          "parameters": {
            "customer": {
              "location": "path",
              "description": "Immutable ID of the Google Workspace account.",
              "required": true,
              "type": "string"
            }
          },
          "response": {
            "$ref": "Domains"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "path": "admin/directory/v1/customer/{customer}/domains",
          "request": {
            "$ref": "Domains"
          }
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "parameters": {
            "customer": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the Google Workspace account.",
              "type": "string"
            }
          },
          "httpMethod": "GET",
          "description": "Lists the domains of the customer.",
          "parameterOrder": [
            "customer"
          ],
          "path": "admin/directory/v1/customer/{customer}/domains",
          "response": {
            "$ref": "Domains2"
          },
          "id": "directory.domains.list"
        },
        "delete": {
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "httpMethod": "DELETE",
          "id": "directory.domains.delete",
          "parameters": {
            "domainName": {
              "required": true,
              "description": "Name of domain to be deleted",
              "location": "path",
              "type": "string"
            },
            "customer": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the Google Workspace account.",
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "description": "Deletes a domain of the customer."
        },
        "get": {
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "parameters": {
            "customer": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the Google Workspace account."
            },
            "domainName": {
              "location": "path",
              "required": true,
              "description": "Name of domain to be retrieved",
              "type": "string"
            }
          },
          "description": "Retrieves a domain of the customer.",
          "httpMethod": "GET",
          "response": {
            "$ref": "Domains"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "id": "directory.domains.get",
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "parameterOrder": [
            "customer",
            "domainName"
          ]
        }
      }
    },
    "mobiledevices": {
      "methods": {
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "parameters": {
            "resourceId": {
              "type": "string",
              "description": "The unique ID the API service uses to identify the mobile device.",
              "location": "path",
              "required": true
            },
            "projection": {
              "enumDescriptions": [
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "type": "string",
              "location": "query",
              "enum": [
                "BASIC",
                "FULL"
              ],
              "description": "Restrict information returned to a set of selected fields."
            },
            "customerId": {
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "id": "directory.mobiledevices.get",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "description": "Retrieves a mobile device's properties.",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "httpMethod": "GET",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "response": {
            "$ref": "MobileDevice"
          }
        },
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile"
          ],
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "httpMethod": "DELETE",
          "description": "Removes a mobile device.",
          "id": "directory.mobiledevices.delete",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "parameters": {
            "resourceId": {
              "description": "The unique ID the API service uses to identify the mobile device.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "customerId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users)."
            }
          }
        },
        "action": {
          "request": {
            "$ref": "MobileDeviceAction"
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "description": "Takes an action that affects a mobile device. For example, remotely wiping a device.",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action"
          ],
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "id": "directory.mobiledevices.action",
          "parameters": {
            "resourceId": {
              "description": "The unique ID the API service uses to identify the mobile device.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "customerId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users)."
            }
          }
        },
        "list": {
          "parameterOrder": [
            "customerId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "parameters": {
            "projection": {
              "description": "Restrict information returned to a set of selected fields.",
              "location": "query",
              "type": "string",
              "enum": [
                "BASIC",
                "FULL"
              ],
              "enumDescriptions": [
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ]
            },
            "pageToken": {
              "type": "string",
              "description": "Token to specify next page in the list",
              "location": "query"
            },
            "query": {
              "location": "query",
              "description": "Search string in the format given at https://developers.google.com/admin-sdk/directory/v1/search-operators",
              "type": "string"
            },
            "sortOrder": {
              "type": "string",
              "enumDescriptions": [
                "Ascending order.",
                "Descending order."
              ],
              "enum": [
                "ASCENDING",
                "DESCENDING"
              ],
              "description": "Whether to return results in ascending or descending order. Must be used with the `orderBy` parameter.",
              "location": "query"
            },
            "orderBy": {
              "location": "query",
              "enum": [
                "deviceId",
                "email",
                "lastSync",
                "model",
                "name",
                "os",
                "status",
                "type"
              ],
              "type": "string",
              "enumDescriptions": [
                "The serial number for a Google Sync mobile device. For Android devices, this is a software generated unique identifier.",
                "The device owner's email address.",
                "Last policy settings sync date time of the device.",
                "The mobile device's model.",
                "The device owner's user name.",
                "The device's operating system.",
                "The device status.",
                "Type of the device."
              ],
              "description": "Device property to use for sorting results."
            },
            "maxResults": {
              "description": "Maximum number of results to return. Max allowed value is 100.",
              "maximum": "100",
              "location": "query",
              "type": "integer",
              "format": "int32",
              "minimum": "1",
              "default": "100"
            },
            "customerId": {
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "id": "directory.mobiledevices.list",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "description": "Retrieves a paginated list of all mobile devices for an account.",
          "response": {
            "$ref": "MobileDevices"
          }
        }
      }
    },
    "customer": {
      "resources": {
        "devices": {
          "resources": {
            "chromeos": {
              "resources": {
                "commands": {
                  "methods": {
                    "get": {
                      "description": "Gets command data a specific command issued to the device.",
                      "response": {
                        "$ref": "DirectoryChromeosdevicesCommand"
                      },
                      "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}",
                      "parameterOrder": [
                        "customerId",
                        "deviceId",
                        "commandId"
                      ],
                      "scopes": [
                        "https://www.googleapis.com/auth/admin.directory.device.chromeos",
                        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
                      ],
                      "parameters": {
                        "deviceId": {
                          "required": true,
                          "location": "path",
                          "description": "Immutable. Immutable ID of Chrome OS Device.",
                          "type": "string"
                        },
                        "customerId": {
                          "required": true,
                          "description": "Immutable. Immutable ID of the Google Workspace account.",
                          "type": "string",
                          "location": "path"
                        },
                        "commandId": {
                          "format": "int64",
                          "description": "Immutable. Immutable ID of Chrome OS Device Command.",
                          "required": true,
                          "type": "string",
                          "location": "path"
                        }
                      },
                      "httpMethod": "GET",
                      "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}",
                      "id": "admin.customer.devices.chromeos.commands.get"
                    }
                  }
                }
              },
              "methods": {
                "issueCommand": {
                  "request": {
                    "$ref": "DirectoryChromeosdevicesIssueCommandRequest"
                  },
                  "parameterOrder": [
                    "customerId",
                    "deviceId"
                  ],
                  "httpMethod": "POST",
                  "parameters": {
                    "customerId": {
                      "required": true,
                      "description": "Immutable. Immutable ID of the Google Workspace account.",
                      "location": "path",
                      "type": "string"
                    },
                    "deviceId": {
                      "type": "string",
                      "required": true,
                      "location": "path",
                      "description": "Immutable. Immutable ID of Chrome OS Device."
                    }
                  },
                  "response": {
                    "$ref": "DirectoryChromeosdevicesIssueCommandResponse"
                  },
                  "id": "admin.customer.devices.chromeos.issueCommand",
                  "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand",
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.directory.device.chromeos"
                  ],
                  "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand",
                  "description": "Issues a command for the device to execute."
                }
              }
            }
          }
        }
      }
    },
    "schemas": {
      "methods": {
        "delete": {
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "description": "Delete schema",
          "id": "directory.schemas.delete",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameters": {
            "customerId": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the Google Workspace account.",
              "location": "path"
            },
            "schemaKey": {
              "required": true,
              "type": "string",
              "description": "Name or immutable ID of the schema.",
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ]
        },
        "patch": {
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "response": {
            "$ref": "Schema"
          },
          "request": {
            "$ref": "Schema"
          },
          "description": "Patch Schema via Apiary Patch Orchestration",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "httpMethod": "PATCH",
          "id": "directory.schemas.patch",
          "parameters": {
            "schemaKey": {
              "location": "path",
              "description": "Name or immutable ID of the schema.",
              "type": "string",
              "required": true
            },
            "customerId": {
              "description": "Immutable ID of the Google Workspace account.",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ]
        },
        "list": {
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "parameters": {
            "customerId": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the Google Workspace account.",
              "type": "string"
            }
          },
          "parameterOrder": [
            "customerId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "id": "directory.schemas.list",
          "httpMethod": "GET",
          "description": "Retrieve all schemas for a customer",
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "response": {
            "$ref": "Schemas"
          }
        },
        "update": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "description": "Update schema",
          "parameters": {
            "customerId": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of the Google Workspace account.",
              "type": "string"
            },
            "schemaKey": {
              "description": "Name or immutable ID of the schema.",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "httpMethod": "PUT",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "id": "directory.schemas.update",
          "response": {
            "$ref": "Schema"
          },
          "request": {
            "$ref": "Schema"
          }
        },
        "insert": {
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "parameters": {
            "customerId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the Google Workspace account."
            }
          },
          "request": {
            "$ref": "Schema"
          },
          "httpMethod": "POST",
          "description": "Create schema.",
          "response": {
            "$ref": "Schema"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "id": "directory.schemas.insert",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "parameterOrder": [
            "customerId"
          ]
        },
        "get": {
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "id": "directory.schemas.get",
          "description": "Retrieve schema",
          "parameters": {
            "schemaKey": {
              "type": "string",
              "description": "Name or immutable ID of the schema.",
              "location": "path",
              "required": true
            },
            "customerId": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the Google Workspace account."
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "response": {
            "$ref": "Schema"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ]
        }
      }
    },
    "privileges": {
      "methods": {
        "list": {
          "description": "Retrieves a paginated list of all privileges for a customer.",
          "path": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "id": "directory.privileges.list",
          "parameterOrder": [
            "customer"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "parameters": {
            "customer": {
              "description": "Immutable ID of the Google Workspace account.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "httpMethod": "GET",
          "response": {
            "$ref": "Privileges"
          }
        }
      }
    },
    "twoStepVerification": {
      "methods": {
        "turnOff": {
          "description": "Turn off 2-Step Verification for user.",
          "parameters": {
            "userKey": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "path": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "id": "directory.twoStepVerification.turnOff",
          "httpMethod": "POST",
          "parameterOrder": [
            "userKey"
          ]
        }
      }
    },
    "resources": {
      "resources": {
        "features": {
          "methods": {
            "get": {
              "id": "directory.resources.features.get",
              "description": "Retrieves a feature.",
              "httpMethod": "GET",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "response": {
                "$ref": "Feature"
              },
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                },
                "featureKey": {
                  "description": "The unique ID of the feature to retrieve.",
                  "location": "path",
                  "type": "string",
                  "required": true
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}"
            },
            "rename": {
              "parameters": {
                "oldName": {
                  "required": true,
                  "type": "string",
                  "description": "The unique ID of the feature to rename.",
                  "location": "path"
                },
                "customer": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID."
                }
              },
              "id": "directory.resources.features.rename",
              "request": {
                "$ref": "FeatureRename"
              },
              "parameterOrder": [
                "customer",
                "oldName"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "description": "Renames a feature.",
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ]
            },
            "list": {
              "response": {
                "$ref": "Features"
              },
              "description": "Retrieves a list of features for an account.",
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "id": "directory.resources.features.list",
              "parameterOrder": [
                "customer"
              ],
              "parameters": {
                "pageToken": {
                  "description": "Token to specify the next page in the list.",
                  "location": "query",
                  "type": "string"
                },
                "maxResults": {
                  "minimum": "1",
                  "type": "integer",
                  "location": "query",
                  "maximum": "500",
                  "format": "int32",
                  "description": "Maximum number of results to return."
                },
                "customer": {
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features"
            },
            "insert": {
              "request": {
                "$ref": "Feature"
              },
              "response": {
                "$ref": "Feature"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "id": "directory.resources.features.insert",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "parameters": {
                "customer": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID."
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "httpMethod": "POST",
              "description": "Inserts a feature.",
              "parameterOrder": [
                "customer"
              ]
            },
            "update": {
              "parameters": {
                "customer": {
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "required": true
                },
                "featureKey": {
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID of the feature to update.",
                  "required": true
                }
              },
              "id": "directory.resources.features.update",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "httpMethod": "PUT",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "response": {
                "$ref": "Feature"
              },
              "request": {
                "$ref": "Feature"
              },
              "description": "Updates a feature."
            },
            "delete": {
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "parameters": {
                "customer": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID."
                },
                "featureKey": {
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID of the feature to delete.",
                  "required": true
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "httpMethod": "DELETE",
              "id": "directory.resources.features.delete",
              "description": "Deletes a feature."
            },
            "patch": {
              "request": {
                "$ref": "Feature"
              },
              "response": {
                "$ref": "Feature"
              },
              "id": "directory.resources.features.patch",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "httpMethod": "PATCH",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "description": "Patches a feature via Apiary Patch Orchestration.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameters": {
                "featureKey": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The unique ID of the feature to update."
                },
                "customer": {
                  "required": true,
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "location": "path",
                  "type": "string"
                }
              }
            }
          }
        },
        "calendars": {
          "methods": {
            "patch": {
              "description": "Patches a calendar resource via Apiary Patch Orchestration.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "response": {
                "$ref": "CalendarResource"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "id": "directory.resources.calendars.patch",
              "parameters": {
                "calendarResourceId": {
                  "description": "The unique ID of the calendar resource to update.",
                  "location": "path",
                  "type": "string",
                  "required": true
                },
                "customer": {
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "httpMethod": "PATCH",
              "request": {
                "$ref": "CalendarResource"
              },
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ]
            },
            "update": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "httpMethod": "PUT",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "id": "directory.resources.calendars.update",
              "response": {
                "$ref": "CalendarResource"
              },
              "description": "Updates a calendar resource. This method supports patch semantics, meaning you only need to include the fields you wish to update. Fields that are not present in the request will be preserved.",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "parameters": {
                "calendarResourceId": {
                  "description": "The unique ID of the calendar resource to update.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                },
                "customer": {
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              },
              "request": {
                "$ref": "CalendarResource"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}"
            },
            "get": {
              "id": "directory.resources.calendars.get",
              "response": {
                "$ref": "CalendarResource"
              },
              "description": "Retrieves a calendar resource.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "parameters": {
                "calendarResourceId": {
                  "description": "The unique ID of the calendar resource to retrieve.",
                  "type": "string",
                  "location": "path",
                  "required": true
                },
                "customer": {
                  "required": true,
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "location": "path",
                  "type": "string"
                }
              },
              "httpMethod": "GET",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ]
            },
            "insert": {
              "request": {
                "$ref": "CalendarResource"
              },
              "parameterOrder": [
                "customer"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "parameters": {
                "customer": {
                  "location": "path",
                  "required": true,
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "type": "string"
                }
              },
              "response": {
                "$ref": "CalendarResource"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "description": "Inserts a calendar resource.",
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "id": "directory.resources.calendars.insert"
            },
            "delete": {
              "id": "directory.resources.calendars.delete",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameters": {
                "calendarResourceId": {
                  "required": true,
                  "location": "path",
                  "description": "The unique ID of the calendar resource to delete.",
                  "type": "string"
                },
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path"
                }
              },
              "description": "Deletes a calendar resource.",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "httpMethod": "DELETE",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}"
            },
            "list": {
              "response": {
                "$ref": "CalendarResources"
              },
              "httpMethod": "GET",
              "parameterOrder": [
                "customer"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "id": "directory.resources.calendars.list",
              "description": "Retrieves a list of calendar resources for an account.",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "parameters": {
                "customer": {
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "required": true
                },
                "maxResults": {
                  "location": "query",
                  "maximum": "500",
                  "format": "int32",
                  "minimum": "1",
                  "type": "integer",
                  "description": "Maximum number of results to return."
                },
                "orderBy": {
                  "description": "Field(s) to sort results by in either ascending or descending order. Supported fields include `resourceId`, `resourceName`, `capacity`, `buildingId`, and `floorName`. If no order is specified, defaults to ascending. Should be of the form \"field [asc|desc], field [asc|desc], ...\". For example `buildingId, capacity desc` would return results sorted first by `buildingId` in ascending order then by `capacity` in descending order.",
                  "location": "query",
                  "type": "string"
                },
                "pageToken": {
                  "location": "query",
                  "description": "Token to specify the next page in the list.",
                  "type": "string"
                },
                "query": {
                  "description": "String query used to filter results. Should be of the form \"field operator value\" where field can be any of supported fields and operators can be any of supported operations. Operators include '=' for exact match, '!=' for mismatch and ':' for prefix match or HAS match where applicable. For prefix match, the value should always be followed by a *. Logical operators NOT and AND are supported (in this order of precedence). Supported fields include `generatedResourceName`, `name`, `buildingId`, `floor_name`, `capacity`, `featureInstances.feature.name`, `resourceEmail`, `resourceCategory`. For example `buildingId=US-NYC-9TH AND featureInstances.feature.name:Phone`.",
                  "location": "query",
                  "type": "string"
                }
              }
            }
          }
        },
        "buildings": {
          "methods": {
            "update": {
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "parameters": {
                "coordinatesSource": {
                  "default": "SOURCE_UNSPECIFIED",
                  "enumDescriptions": [
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to `RESOLVED_FROM_ADDRESS` if postal address is provided. Otherwise, defaults to `CLIENT_SPECIFIED` if coordinates are provided."
                  ],
                  "description": "Source from which Building.coordinates are derived.",
                  "type": "string",
                  "location": "query",
                  "enum": [
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ]
                },
                "buildingId": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The id of the building to update."
                },
                "customer": {
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "request": {
                "$ref": "Building"
              },
              "description": "Updates a building.",
              "response": {
                "$ref": "Building"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "id": "directory.resources.buildings.update",
              "httpMethod": "PUT"
            },
            "list": {
              "parameters": {
                "customer": {
                  "location": "path",
                  "required": true,
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "type": "string"
                },
                "maxResults": {
                  "type": "integer",
                  "description": "Maximum number of results to return.",
                  "minimum": "1",
                  "location": "query",
                  "format": "int32",
                  "maximum": "500"
                },
                "pageToken": {
                  "location": "query",
                  "type": "string",
                  "description": "Token to specify the next page in the list."
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "httpMethod": "GET",
              "parameterOrder": [
                "customer"
              ],
              "description": "Retrieves a list of buildings for an account.",
              "id": "directory.resources.buildings.list",
              "response": {
                "$ref": "Buildings"
              }
            },
            "delete": {
              "parameters": {
                "customer": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID."
                },
                "buildingId": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "The id of the building to delete."
                }
              },
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "id": "directory.resources.buildings.delete",
              "description": "Deletes a building.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "httpMethod": "DELETE",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}"
            },
            "get": {
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "response": {
                "$ref": "Building"
              },
              "httpMethod": "GET",
              "description": "Retrieves a building.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameters": {
                "buildingId": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The unique ID of the building to retrieve."
                },
                "customer": {
                  "required": true,
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "location": "path",
                  "type": "string"
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "id": "directory.resources.buildings.get"
            },
            "insert": {
              "parameters": {
                "coordinatesSource": {
                  "type": "string",
                  "location": "query",
                  "enumDescriptions": [
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to `RESOLVED_FROM_ADDRESS` if postal address is provided. Otherwise, defaults to `CLIENT_SPECIFIED` if coordinates are provided."
                  ],
                  "description": "Source from which Building.coordinates are derived.",
                  "enum": [
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "default": "SOURCE_UNSPECIFIED"
                },
                "customer": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID."
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "description": "Inserts a building.",
              "httpMethod": "POST",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "request": {
                "$ref": "Building"
              },
              "parameterOrder": [
                "customer"
              ],
              "response": {
                "$ref": "Building"
              },
              "id": "directory.resources.buildings.insert"
            },
            "patch": {
              "httpMethod": "PATCH",
              "response": {
                "$ref": "Building"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameters": {
                "buildingId": {
                  "required": true,
                  "description": "The id of the building to update.",
                  "type": "string",
                  "location": "path"
                },
                "coordinatesSource": {
                  "enum": [
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "default": "SOURCE_UNSPECIFIED",
                  "location": "query",
                  "enumDescriptions": [
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to `RESOLVED_FROM_ADDRESS` if postal address is provided. Otherwise, defaults to `CLIENT_SPECIFIED` if coordinates are provided."
                  ],
                  "description": "Source from which Building.coordinates are derived.",
                  "type": "string"
                },
                "customer": {
                  "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "location": "path",
                  "type": "string",
                  "required": true
                }
              },
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "request": {
                "$ref": "Building"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "description": "Patches a building via Apiary Patch Orchestration.",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "id": "directory.resources.buildings.patch"
            }
          }
        }
      }
    },
    "roleAssignments": {
      "methods": {
        "get": {
          "response": {
            "$ref": "RoleAssignment"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "httpMethod": "GET",
          "id": "directory.roleAssignments.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "parameters": {
            "customer": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the Google Workspace account."
            },
            "roleAssignmentId": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the role assignment.",
              "required": true
            }
          },
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "description": "Retrieve a role assignment.",
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ]
        },
        "insert": {
          "httpMethod": "POST",
          "description": "Creates a role assignment.",
          "response": {
            "$ref": "RoleAssignment"
          },
          "id": "directory.roleAssignments.insert",
          "request": {
            "$ref": "RoleAssignment"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "parameters": {
            "customer": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of the Google Workspace account.",
              "type": "string"
            }
          },
          "parameterOrder": [
            "customer"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ]
        },
        "list": {
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "response": {
            "$ref": "RoleAssignments"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "parameters": {
            "maxResults": {
              "minimum": "1",
              "location": "query",
              "description": "Maximum number of results to return.",
              "format": "int32",
              "maximum": "200",
              "type": "integer"
            },
            "userKey": {
              "description": "The user's primary email address, alias email address, or unique user ID. If included in the request, returns role assignments only for this user.",
              "location": "query",
              "type": "string"
            },
            "roleId": {
              "location": "query",
              "type": "string",
              "description": "Immutable ID of a role. If included in the request, returns only role assignments containing this role ID."
            },
            "pageToken": {
              "description": "Token to specify the next page in the list.",
              "type": "string",
              "location": "query"
            },
            "customer": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the Google Workspace account.",
              "type": "string"
            }
          },
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "id": "directory.roleAssignments.list",
          "parameterOrder": [
            "customer"
          ],
          "description": "Retrieves a paginated list of all roleAssignments."
        },
        "delete": {
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "parameters": {
            "customer": {
              "required": true,
              "description": "Immutable ID of the Google Workspace account.",
              "type": "string",
              "location": "path"
            },
            "roleAssignmentId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the role assignment."
            }
          },
          "id": "directory.roleAssignments.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "description": "Deletes a role assignment."
        }
      }
    },
    "chromeosdevices": {
      "methods": {
        "list": {
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "parameterOrder": [
            "customerId"
          ],
          "parameters": {
            "sortOrder": {
              "description": "Whether to return results in ascending or descending order. Must be used with the `orderBy` parameter.",
              "enumDescriptions": [
                "Ascending order.",
                "Descending order."
              ],
              "type": "string",
              "location": "query",
              "enum": [
                "ASCENDING",
                "DESCENDING"
              ]
            },
            "orderBy": {
              "type": "string",
              "location": "query",
              "enum": [
                "annotatedLocation",
                "annotatedUser",
                "lastSync",
                "notes",
                "serialNumber",
                "status",
                "supportEndDate"
              ],
              "enumDescriptions": [
                "Chrome device location as annotated by the administrator.",
                "Chromebook user as annotated by administrator.",
                "The date and time the Chrome device was last synchronized with the policy settings in the Admin console.",
                "Chrome device notes as annotated by the administrator.",
                "The Chrome device serial number entered when the device was enabled.",
                "Chrome device status. For more information, see the \u003ca [chromeosdevices](/admin-sdk/directory/v1/reference/chromeosdevices.html).",
                "Chrome device support end date. This is applicable only for devices purchased directly from Google."
              ],
              "description": "Device property to use for sorting results."
            },
            "query": {
              "description": "Search string in the format given at http://support.google.com/chromeos/a/bin/answer.py?answer=1698333",
              "type": "string",
              "location": "query"
            },
            "pageToken": {
              "description": "The `pageToken` query parameter is used to request the next page of query results. The follow-on request's `pageToken` query parameter is the `nextPageToken` from your previous response.",
              "type": "string",
              "location": "query"
            },
            "maxResults": {
              "default": "100",
              "minimum": "1",
              "location": "query",
              "format": "int32",
              "description": "Maximum number of results to return.",
              "type": "integer"
            },
            "projection": {
              "enumDescriptions": [
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "type": "string",
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "BASIC",
                "FULL"
              ],
              "location": "query"
            },
            "orgUnitPath": {
              "type": "string",
              "description": "The full path of the organizational unit or its unique ID.",
              "location": "query"
            },
            "customerId": {
              "type": "string",
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "location": "path",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "response": {
            "$ref": "ChromeOsDevices"
          },
          "httpMethod": "GET",
          "description": "Retrieves a paginated list of Chrome OS devices within an account.",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "id": "directory.chromeosdevices.list"
        },
        "update": {
          "description": "Updates a device's updatable properties, such as `annotatedUser`, `annotatedLocation`, `notes`, `orgUnitPath`, or `annotatedAssetId`.",
          "httpMethod": "PUT",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "parameters": {
            "projection": {
              "enum": [
                "BASIC",
                "FULL"
              ],
              "type": "string",
              "description": "Restrict information returned to a set of selected fields.",
              "enumDescriptions": [
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "location": "query"
            },
            "deviceId": {
              "type": "string",
              "required": true,
              "description": "The unique ID of the device. The `deviceId`s are returned in the response from the [chromeosdevices.list](/admin-sdk/v1/reference/chromeosdevices/list) method.",
              "location": "path"
            },
            "customerId": {
              "required": true,
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "location": "path",
              "type": "string"
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "id": "directory.chromeosdevices.update",
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "request": {
            "$ref": "ChromeOsDevice"
          }
        },
        "patch": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "httpMethod": "PATCH",
          "description": "Updates a device's updatable properties, such as `annotatedUser`, `annotatedLocation`, `notes`, `orgUnitPath`, or `annotatedAssetId`. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch).",
          "parameters": {
            "deviceId": {
              "required": true,
              "location": "path",
              "description": "The unique ID of the device. The `deviceId`s are returned in the response from the [chromeosdevices.list](/admin-sdk/v1/reference/chromeosdevices/list) method.",
              "type": "string"
            },
            "customerId": {
              "required": true,
              "location": "path",
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "type": "string"
            },
            "projection": {
              "enum": [
                "BASIC",
                "FULL"
              ],
              "type": "string",
              "description": "Restrict information returned to a set of selected fields.",
              "location": "query",
              "enumDescriptions": [
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ]
            }
          },
          "id": "directory.chromeosdevices.patch",
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "request": {
            "$ref": "ChromeOsDevice"
          }
        },
        "get": {
          "id": "directory.chromeosdevices.get",
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "parameters": {
            "deviceId": {
              "type": "string",
              "required": true,
              "description": "The unique ID of the device. The `deviceId`s are returned in the response from the [chromeosdevices.list](/admin-sdk/directory/v1/reference/chromeosdevices/list) method.",
              "location": "path"
            },
            "customerId": {
              "type": "string",
              "location": "path",
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "required": true
            },
            "projection": {
              "enumDescriptions": [
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "type": "string",
              "description": "Determines whether the response contains the full list of properties or only a subset.",
              "enum": [
                "BASIC",
                "FULL"
              ],
              "location": "query"
            }
          },
          "description": "Retrieves a Chrome OS device's properties.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}"
        },
        "moveDevicesToOu": {
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "httpMethod": "POST",
          "id": "directory.chromeosdevices.moveDevicesToOu",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "request": {
            "$ref": "ChromeOsMoveDevicesToOu"
          },
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "description": "Move or insert multiple Chrome OS devices to an organizational unit. You can move up to 50 devices at once.",
          "parameters": {
            "customerId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the Google Workspace account"
            },
            "orgUnitPath": {
              "description": "Full path of the target organizational unit or its ID",
              "location": "query",
              "type": "string",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ]
        },
        "action": {
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "parameters": {
            "resourceId": {
              "description": "The unique ID of the device. The `resourceId`s are returned in the response from the [chromeosdevices.list](/admin-sdk/directory/v1/reference/chromeosdevices/list) method.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "customerId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users)."
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action",
          "request": {
            "$ref": "ChromeOsDeviceAction"
          },
          "httpMethod": "POST",
          "id": "directory.chromeosdevices.action",
          "description": "Takes an action that affects a Chrome OS Device. This includes deprovisioning, disabling, and re-enabling devices. *Warning:* * Deprovisioning a device will stop device policy syncing and remove device-level printers. After a device is deprovisioned, it must be wiped before it can be re-enrolled. * Lost or stolen devices should use the disable action. * Re-enabling a disabled device will consume a device license. If you do not have sufficient licenses available when completing the re-enable action, you will receive an error. For more information about deprovisioning and disabling devices, visit the [help center](https://support.google.com/chrome/a/answer/3523633)."
        }
      }
    },
    "users": {
      "methods": {
        "update": {
          "id": "directory.users.update",
          "response": {
            "$ref": "User"
          },
          "httpMethod": "PUT",
          "request": {
            "$ref": "User"
          },
          "description": "Updates a user. This method supports patch semantics, meaning you only need to include the fields you wish to update. Fields that are not present in the request will be preserved, and fields set to `null` will be cleared.",
          "parameters": {
            "userKey": {
              "location": "path",
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true
            }
          },
          "parameterOrder": [
            "userKey"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "path": "admin/directory/v1/users/{userKey}"
        },
        "list": {
          "id": "directory.users.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "parameters": {
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify next page in the list"
            },
            "event": {
              "type": "string",
              "location": "query",
              "enum": [
                "add",
                "delete",
                "makeAdmin",
                "undelete",
                "update"
              ],
              "description": "Event on which subscription is intended (if subscribing)",
              "enumDescriptions": [
                "User Created Event",
                "User Deleted Event",
                "User Admin Status Change Event",
                "User Undeleted Event",
                "User Updated Event"
              ]
            },
            "orderBy": {
              "enumDescriptions": [
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "enum": [
                "email",
                "familyName",
                "givenName"
              ],
              "location": "query",
              "type": "string",
              "description": "Property to use for sorting results."
            },
            "projection": {
              "description": "What subset of fields to fetch for this user.",
              "enumDescriptions": [
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas requested in `customFieldMask`.",
                "Include all fields associated with this user."
              ],
              "default": "basic",
              "location": "query",
              "type": "string",
              "enum": [
                "basic",
                "custom",
                "full"
              ]
            },
            "domain": {
              "type": "string",
              "location": "query",
              "description": "The domain name. Use this field to get fields from only one domain. To return all domains for a customer account, use the `customer` query parameter instead. Either the `customer` or the `domain` parameter must be provided."
            },
            "viewType": {
              "enum": [
                "admin_view",
                "domain_public"
              ],
              "enumDescriptions": [
                "Results include both administrator-only and domain-public fields for the user.",
                "Results only include fields for the user that are publicly visible to other users in the domain."
              ],
              "type": "string",
              "location": "query",
              "default": "admin_view",
              "description": "Whether to fetch the administrator-only or domain-wide public view of the user. For more information, see [Retrieve a user as a non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin)."
            },
            "customFieldMask": {
              "description": "A comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when `projection=custom`.",
              "type": "string",
              "location": "query"
            },
            "showDeleted": {
              "location": "query",
              "type": "string",
              "description": "If set to `true`, retrieves the list of deleted users. (Default: `false`)"
            },
            "sortOrder": {
              "type": "string",
              "location": "query",
              "enum": [
                "ASCENDING",
                "DESCENDING"
              ],
              "description": "Whether to return results in ascending or descending order.",
              "enumDescriptions": [
                "Ascending order.",
                "Descending order."
              ]
            },
            "customer": {
              "description": "The unique ID for the customer's Google Workspace account. In case of a multi-domain account, to fetch all groups for a customer, fill this field instead of domain. You can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users). Either the `customer` or the `domain` parameter must be provided.",
              "type": "string",
              "location": "query"
            },
            "maxResults": {
              "maximum": "500",
              "type": "integer",
              "description": "Maximum number of results to return.",
              "default": "100",
              "minimum": "1",
              "format": "int32",
              "location": "query"
            },
            "query": {
              "description": "Query string for searching user fields. For more information on constructing user queries, see [Search for Users](/admin-sdk/directory/v1/guides/search-users).",
              "type": "string",
              "location": "query"
            }
          },
          "description": "Retrieves a paginated list of either deleted users or all users in a domain.",
          "path": "admin/directory/v1/users",
          "flatPath": "admin/directory/v1/users",
          "response": {
            "$ref": "Users"
          },
          "httpMethod": "GET",
          "parameterOrder": []
        },
        "watch": {
          "request": {
            "$ref": "Channel"
          },
          "parameterOrder": [],
          "path": "admin/directory/v1/users/watch",
          "id": "directory.users.watch",
          "description": "Watch for changes in users list",
          "response": {
            "$ref": "Channel"
          },
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "parameters": {
            "showDeleted": {
              "description": "If set to true, retrieves the list of deleted users. (Default: false)",
              "type": "string",
              "location": "query"
            },
            "customer": {
              "type": "string",
              "location": "query",
              "description": "Immutable ID of the Google Workspace account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain."
            },
            "sortOrder": {
              "enum": [
                "ASCENDING",
                "DESCENDING"
              ],
              "enumDescriptions": [
                "Ascending order.",
                "Descending order."
              ],
              "description": "Whether to return results in ascending or descending order.",
              "type": "string",
              "location": "query"
            },
            "query": {
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users",
              "type": "string",
              "location": "query"
            },
            "event": {
              "enum": [
                "add",
                "delete",
                "makeAdmin",
                "undelete",
                "update"
              ],
              "type": "string",
              "description": "Events to watch for.",
              "location": "query",
              "enumDescriptions": [
                "User Created Event",
                "User Deleted Event",
                "User Admin Status Change Event",
                "User Undeleted Event",
                "User Updated Event"
              ]
            },
            "projection": {
              "location": "query",
              "description": "What subset of fields to fetch for this user.",
              "enumDescriptions": [
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "default": "basic",
              "enum": [
                "basic",
                "custom",
                "full"
              ],
              "type": "string"
            },
            "maxResults": {
              "description": "Maximum number of results to return.",
              "maximum": "500",
              "location": "query",
              "type": "integer",
              "default": "100",
              "minimum": "1",
              "format": "int32"
            },
            "customFieldMask": {
              "location": "query",
              "type": "string",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom."
            },
            "orderBy": {
              "enum": [
                "email",
                "familyName",
                "givenName"
              ],
              "type": "string",
              "description": "Column to use for sorting results",
              "enumDescriptions": [
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "location": "query"
            },
            "domain": {
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.\"",
              "type": "string",
              "location": "query"
            },
            "viewType": {
              "description": "Whether to fetch the administrator-only or domain-wide public view of the user. For more information, see [Retrieve a user as a non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin).",
              "enumDescriptions": [
                "Results include both administrator-only and domain-public fields.",
                "Results only include fields for the user that are publicly visible to other users in the domain."
              ],
              "default": "admin_view",
              "enum": [
                "admin_view",
                "domain_public"
              ],
              "location": "query",
              "type": "string"
            },
            "pageToken": {
              "type": "string",
              "description": "Token to specify next page in the list",
              "location": "query"
            }
          },
          "flatPath": "admin/directory/v1/users/watch"
        },
        "delete": {
          "parameterOrder": [
            "userKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/users/{userKey}",
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "path": "admin/directory/v1/users/{userKey}",
          "id": "directory.users.delete",
          "description": "Deletes a user."
        },
        "insert": {
          "response": {
            "$ref": "User"
          },
          "description": "Creates a user.",
          "parameters": {},
          "flatPath": "admin/directory/v1/users",
          "request": {
            "$ref": "User"
          },
          "id": "directory.users.insert",
          "path": "admin/directory/v1/users",
          "httpMethod": "POST",
          "parameterOrder": [],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ]
        },
        "patch": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "response": {
            "$ref": "User"
          },
          "parameterOrder": [
            "userKey"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}",
          "id": "directory.users.patch",
          "path": "admin/directory/v1/users/{userKey}",
          "parameters": {
            "userKey": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "request": {
            "$ref": "User"
          },
          "description": "Updates a user using patch semantics. The update method should be used instead, since it also supports patch semantics and has better performance. This method is unable to clear fields that contain repeated objects (`addresses`, `phones`, etc). Use the update method instead.",
          "httpMethod": "PATCH"
        },
        "get": {
          "httpMethod": "GET",
          "path": "admin/directory/v1/users/{userKey}",
          "parameterOrder": [
            "userKey"
          ],
          "response": {
            "$ref": "User"
          },
          "description": "Retrieves a user.",
          "flatPath": "admin/directory/v1/users/{userKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly"
          ],
          "id": "directory.users.get",
          "parameters": {
            "customFieldMask": {
              "type": "string",
              "location": "query",
              "description": "A comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when `projection=custom`."
            },
            "viewType": {
              "location": "query",
              "type": "string",
              "default": "admin_view",
              "enum": [
                "admin_view",
                "domain_public"
              ],
              "description": "Whether to fetch the administrator-only or domain-wide public view of the user. For more information, see [Retrieve a user as a non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin).",
              "enumDescriptions": [
                "Results include both administrator-only and domain-public fields for the user.",
                "Results only include fields for the user that are publicly visible to other users in the domain."
              ]
            },
            "userKey": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            },
            "projection": {
              "enum": [
                "basic",
                "custom",
                "full"
              ],
              "enumDescriptions": [
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas requested in `customFieldMask`.",
                "Include all fields associated with this user."
              ],
              "description": "What subset of fields to fetch for this user.",
              "default": "basic",
              "location": "query",
              "type": "string"
            }
          }
        },
        "makeAdmin": {
          "description": "Makes a user a super administrator.",
          "httpMethod": "POST",
          "id": "directory.users.makeAdmin",
          "request": {
            "$ref": "UserMakeAdmin"
          },
          "path": "admin/directory/v1/users/{userKey}/makeAdmin",
          "parameterOrder": [
            "userKey"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/makeAdmin",
          "parameters": {
            "userKey": {
              "location": "path",
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ]
        },
        "signOut": {
          "httpMethod": "POST",
          "parameters": {
            "userKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Identifies the target user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}/signOut",
          "parameterOrder": [
            "userKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "id": "directory.users.signOut",
          "path": "admin/directory/v1/users/{userKey}/signOut",
          "description": "Sign a user out of all web and device sessions and reset their sign-in cookies. User will have to sign in by authenticating again."
        },
        "undelete": {
          "request": {
            "$ref": "UserUndelete"
          },
          "description": "Undeletes a deleted user.",
          "flatPath": "admin/directory/v1/users/{userKey}/undelete",
          "id": "directory.users.undelete",
          "parameters": {
            "userKey": {
              "type": "string",
              "required": true,
              "description": "The immutable id of the user",
              "location": "path"
            }
          },
          "parameterOrder": [
            "userKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "path": "admin/directory/v1/users/{userKey}/undelete",
          "httpMethod": "POST"
        }
      },
      "resources": {
        "aliases": {
          "methods": {
            "delete": {
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "httpMethod": "DELETE",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "parameters": {
                "userKey": {
                  "location": "path",
                  "type": "string",
                  "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
                  "required": true
                },
                "alias": {
                  "location": "path",
                  "type": "string",
                  "description": "The alias to be removed.",
                  "required": true
                }
              },
              "parameterOrder": [
                "userKey",
                "alias"
              ],
              "path": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "description": "Removes an alias.",
              "id": "directory.users.aliases.delete"
            },
            "insert": {
              "id": "directory.users.aliases.insert",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "parameterOrder": [
                "userKey"
              ],
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "request": {
                "$ref": "Alias"
              },
              "httpMethod": "POST",
              "description": "Adds an alias.",
              "parameters": {
                "userKey": {
                  "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                }
              },
              "response": {
                "$ref": "Alias"
              }
            },
            "watch": {
              "request": {
                "$ref": "Channel"
              },
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/watch",
              "parameterOrder": [
                "userKey"
              ],
              "description": "Watch for changes in users list.",
              "id": "directory.users.aliases.watch",
              "httpMethod": "POST",
              "parameters": {
                "userKey": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "Email or immutable ID of the user"
                },
                "event": {
                  "description": "Events to watch for.",
                  "location": "query",
                  "enumDescriptions": [
                    "Alias Created Event",
                    "Alias Deleted Event"
                  ],
                  "enum": [
                    "add",
                    "delete"
                  ],
                  "type": "string"
                }
              },
              "response": {
                "$ref": "Channel"
              },
              "path": "admin/directory/v1/users/{userKey}/aliases/watch",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ]
            },
            "list": {
              "response": {
                "$ref": "Aliases"
              },
              "parameters": {
                "event": {
                  "enumDescriptions": [
                    "Alias Created Event",
                    "Alias Deleted Event"
                  ],
                  "enum": [
                    "add",
                    "delete"
                  ],
                  "location": "query",
                  "type": "string",
                  "description": "Events to watch for."
                },
                "userKey": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
                }
              },
              "id": "directory.users.aliases.list",
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "parameterOrder": [
                "userKey"
              ],
              "description": "Lists all aliases for a user.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "httpMethod": "GET",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases"
            }
          }
        },
        "photos": {
          "methods": {
            "get": {
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "id": "directory.users.photos.get",
              "parameterOrder": [
                "userKey"
              ],
              "response": {
                "$ref": "UserPhoto"
              },
              "parameters": {
                "userKey": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
                }
              },
              "httpMethod": "GET",
              "description": "Retrieves the user's photo."
            },
            "patch": {
              "request": {
                "$ref": "UserPhoto"
              },
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "id": "directory.users.photos.patch",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "parameters": {
                "userKey": {
                  "location": "path",
                  "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
                  "required": true,
                  "type": "string"
                }
              },
              "description": "Adds a photo for the user. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch).",
              "httpMethod": "PATCH",
              "response": {
                "$ref": "UserPhoto"
              },
              "parameterOrder": [
                "userKey"
              ]
            },
            "update": {
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "httpMethod": "PUT",
              "parameters": {
                "userKey": {
                  "location": "path",
                  "type": "string",
                  "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
                  "required": true
                }
              },
              "response": {
                "$ref": "UserPhoto"
              },
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "description": "Adds a photo for the user.",
              "id": "directory.users.photos.update",
              "request": {
                "$ref": "UserPhoto"
              },
              "parameterOrder": [
                "userKey"
              ]
            },
            "delete": {
              "description": "Removes the user's photo.",
              "parameters": {
                "userKey": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "httpMethod": "DELETE",
              "parameterOrder": [
                "userKey"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "id": "directory.users.photos.delete"
            }
          }
        }
      }
    },
    "channels": {
      "methods": {
        "stop": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.alias",
            "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "parameters": {},
          "id": "admin.channels.stop",
          "parameterOrder": [],
          "description": "Stop watching resources through this channel.",
          "path": "admin/directory_v1/channels/stop",
          "httpMethod": "POST",
          "flatPath": "admin/directory_v1/channels/stop",
          "request": {
            "$ref": "Channel"
          }
        }
      }
    },
    "members": {
      "methods": {
        "patch": {
          "httpMethod": "PATCH",
          "parameters": {
            "memberKey": {
              "description": "Identifies the group member in the API request. A group member can be a user or another group. The value can be the member's (group or user) primary email address, alias, or unique ID.",
              "required": true,
              "type": "string",
              "location": "path"
            },
            "groupKey": {
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "request": {
            "$ref": "Member"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "id": "directory.members.patch",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "description": "Updates the membership properties of a user in the specified group. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch).",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "response": {
            "$ref": "Member"
          }
        },
        "hasMember": {
          "parameters": {
            "groupKey": {
              "required": true,
              "type": "string",
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "location": "path"
            },
            "memberKey": {
              "description": "Identifies the user member in the API request. The value can be the user's primary email address, alias, or unique ID.",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "response": {
            "$ref": "MembersHasMember"
          },
          "id": "directory.members.hasMember",
          "path": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "httpMethod": "GET",
          "description": "Checks whether the given user is a member of the group. Membership can be direct or nested."
        },
        "get": {
          "parameters": {
            "memberKey": {
              "required": true,
              "description": "Identifies the group member in the API request. A group member can be a user or another group. The value can be the member's (group or user) primary email address, alias, or unique ID.",
              "type": "string",
              "location": "path"
            },
            "groupKey": {
              "type": "string",
              "location": "path",
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "required": true
            }
          },
          "httpMethod": "GET",
          "response": {
            "$ref": "Member"
          },
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "description": "Retrieves a group member's properties.",
          "id": "directory.members.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ]
        },
        "update": {
          "id": "directory.members.update",
          "parameters": {
            "groupKey": {
              "location": "path",
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "required": true,
              "type": "string"
            },
            "memberKey": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Identifies the group member in the API request. A group member can be a user or another group. The value can be the member's (group or user) primary email address, alias, or unique ID."
            }
          },
          "httpMethod": "PUT",
          "request": {
            "$ref": "Member"
          },
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "description": "Updates the membership of a user in the specified group.",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "response": {
            "$ref": "Member"
          }
        },
        "list": {
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "httpMethod": "GET",
          "parameters": {
            "roles": {
              "location": "query",
              "description": "The `roles` query parameter allows you to retrieve group members by role. Allowed values are `OWNER`, `MANAGER`, and `MEMBER`.",
              "type": "string"
            },
            "maxResults": {
              "type": "integer",
              "format": "int32",
              "location": "query",
              "description": "Maximum number of results to return. Max allowed value is 200.",
              "default": "200",
              "minimum": "1"
            },
            "includeDerivedMembership": {
              "type": "boolean",
              "location": "query",
              "description": "Whether to list indirect memberships. Default: false."
            },
            "pageToken": {
              "location": "query",
              "description": "Token to specify next page in the list.",
              "type": "string"
            },
            "groupKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID."
            }
          },
          "description": "Retrieves a paginated list of all members in a group.",
          "response": {
            "$ref": "Members"
          },
          "id": "directory.members.list",
          "parameterOrder": [
            "groupKey"
          ]
        },
        "delete": {
          "parameters": {
            "groupKey": {
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "memberKey": {
              "description": "Identifies the group member in the API request. A group member can be a user or another group. The value can be the member's (group or user) primary email address, alias, or unique ID.",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "httpMethod": "DELETE",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "description": "Removes a member from a group.",
          "id": "directory.members.delete",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}"
        },
        "insert": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "parameterOrder": [
            "groupKey"
          ],
          "request": {
            "$ref": "Member"
          },
          "description": "Adds a user to the specified group.",
          "parameters": {
            "groupKey": {
              "location": "path",
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "required": true,
              "type": "string"
            }
          },
          "id": "directory.members.insert",
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "response": {
            "$ref": "Member"
          },
          "httpMethod": "POST"
        }
      }
    },
    "verificationCodes": {
      "methods": {
        "generate": {
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "description": "Generate new backup verification codes for the user.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "id": "directory.verificationCodes.generate",
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "parameterOrder": [
            "userKey"
          ],
          "parameters": {
            "userKey": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the user"
            }
          }
        },
        "invalidate": {
          "httpMethod": "POST",
          "parameterOrder": [
            "userKey"
          ],
          "parameters": {
            "userKey": {
              "location": "path",
              "description": "Email or immutable ID of the user",
              "required": true,
              "type": "string"
            }
          },
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "description": "Invalidate the current backup verification codes for the user.",
          "id": "directory.verificationCodes.invalidate",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate"
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "description": "Returns the current set of valid backup verification codes for the specified user.",
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes",
          "response": {
            "$ref": "VerificationCodes"
          },
          "httpMethod": "GET",
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.verificationCodes.list",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes"
        }
      }
    },
    "groups": {
      "methods": {
        "insert": {
          "description": "Creates a group.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "response": {
            "$ref": "Group"
          },
          "path": "admin/directory/v1/groups",
          "flatPath": "admin/directory/v1/groups",
          "parameters": {},
          "request": {
            "$ref": "Group"
          },
          "parameterOrder": [],
          "httpMethod": "POST",
          "id": "directory.groups.insert"
        },
        "patch": {
          "parameters": {
            "groupKey": {
              "location": "path",
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "type": "string",
              "required": true
            }
          },
          "request": {
            "$ref": "Group"
          },
          "id": "directory.groups.patch",
          "path": "admin/directory/v1/groups/{groupKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "httpMethod": "PATCH",
          "response": {
            "$ref": "Group"
          },
          "parameterOrder": [
            "groupKey"
          ],
          "description": "Updates a group's properties. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch).",
          "flatPath": "admin/directory/v1/groups/{groupKey}"
        },
        "get": {
          "description": "Retrieves a group's properties.",
          "parameters": {
            "groupKey": {
              "type": "string",
              "required": true,
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "path": "admin/directory/v1/groups/{groupKey}",
          "id": "directory.groups.get",
          "response": {
            "$ref": "Group"
          },
          "parameterOrder": [
            "groupKey"
          ],
          "httpMethod": "GET"
        },
        "delete": {
          "parameterOrder": [
            "groupKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "description": "Deletes a group.",
          "path": "admin/directory/v1/groups/{groupKey}",
          "parameters": {
            "groupKey": {
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "httpMethod": "DELETE",
          "id": "directory.groups.delete"
        },
        "update": {
          "response": {
            "$ref": "Group"
          },
          "parameterOrder": [
            "groupKey"
          ],
          "parameters": {
            "groupKey": {
              "type": "string",
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "location": "path",
              "required": true
            }
          },
          "description": "Updates a group's properties.",
          "id": "directory.groups.update",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "request": {
            "$ref": "Group"
          },
          "httpMethod": "PUT",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "path": "admin/directory/v1/groups/{groupKey}"
        },
        "list": {
          "parameterOrder": [],
          "response": {
            "$ref": "Groups"
          },
          "description": "Retrieve all groups of a domain or of a user given a userKey (paginated)",
          "httpMethod": "GET",
          "parameters": {
            "orderBy": {
              "type": "string",
              "description": "Column to use for sorting results",
              "location": "query",
              "enum": [
                "email"
              ],
              "enumDescriptions": [
                "Email of the group."
              ]
            },
            "maxResults": {
              "description": "Maximum number of results to return. Max allowed value is 200.",
              "format": "int32",
              "minimum": "1",
              "location": "query",
              "type": "integer",
              "default": "200"
            },
            "sortOrder": {
              "enumDescriptions": [
                "Ascending order.",
                "Descending order."
              ],
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "location": "query",
              "enum": [
                "ASCENDING",
                "DESCENDING"
              ],
              "type": "string"
            },
            "pageToken": {
              "type": "string",
              "description": "Token to specify next page in the list",
              "location": "query"
            },
            "userKey": {
              "type": "string",
              "description": "Email or immutable ID of the user if only those groups are to be listed, the given user is a member of. If it's an ID, it should match with the ID of the user object.",
              "location": "query"
            },
            "domain": {
              "type": "string",
              "location": "query",
              "description": "The domain name. Use this field to get fields from only one domain. To return all domains for a customer account, use the `customer` query parameter instead."
            },
            "customer": {
              "description": "The unique ID for the customer's Google Workspace account. In case of a multi-domain account, to fetch all groups for a customer, fill this field instead of domain. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users](/admin-sdk/directory/v1/reference/users)",
              "type": "string",
              "location": "query"
            },
            "query": {
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-groups",
              "location": "query",
              "type": "string"
            }
          },
          "id": "directory.groups.list",
          "path": "admin/directory/v1/groups",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "flatPath": "admin/directory/v1/groups"
        }
      },
      "resources": {
        "aliases": {
          "methods": {
            "insert": {
              "description": "Adds an alias for the group.",
              "parameters": {
                "groupKey": {
                  "location": "path",
                  "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
                  "type": "string",
                  "required": true
                }
              },
              "request": {
                "$ref": "Alias"
              },
              "id": "directory.groups.aliases.insert",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "response": {
                "$ref": "Alias"
              },
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "httpMethod": "POST",
              "parameterOrder": [
                "groupKey"
              ]
            },
            "delete": {
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "parameterOrder": [
                "groupKey",
                "alias"
              ],
              "path": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "description": "Removes an alias.",
              "id": "directory.groups.aliases.delete",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "httpMethod": "DELETE",
              "parameters": {
                "alias": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The alias to be removed"
                },
                "groupKey": {
                  "type": "string",
                  "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
                  "location": "path",
                  "required": true
                }
              }
            },
            "list": {
              "parameterOrder": [
                "groupKey"
              ],
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "parameters": {
                "groupKey": {
                  "type": "string",
                  "location": "path",
                  "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
                  "required": true
                }
              },
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group",
                "https://www.googleapis.com/auth/admin.directory.group.readonly"
              ],
              "description": "Lists all aliases for a group.",
              "id": "directory.groups.aliases.list",
              "response": {
                "$ref": "Aliases"
              },
              "httpMethod": "GET"
            }
          }
        }
      }
    },
    "roles": {
      "methods": {
        "get": {
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "response": {
            "$ref": "Role"
          },
          "id": "directory.roles.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameters": {
            "roleId": {
              "description": "Immutable ID of the role.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "customer": {
              "description": "Immutable ID of the Google Workspace account.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "description": "Retrieves a role."
        },
        "patch": {
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "request": {
            "$ref": "Role"
          },
          "description": "Patch role via Apiary Patch Orchestration",
          "response": {
            "$ref": "Role"
          },
          "httpMethod": "PATCH",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "id": "directory.roles.patch",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameters": {
            "roleId": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the role.",
              "type": "string"
            },
            "customer": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the Google Workspace account.",
              "required": true
            }
          },
          "parameterOrder": [
            "customer",
            "roleId"
          ]
        },
        "update": {
          "httpMethod": "PUT",
          "parameters": {
            "customer": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the Google Workspace account."
            },
            "roleId": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the role."
            }
          },
          "description": "Updates a role.",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "request": {
            "$ref": "Role"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "id": "directory.roles.update",
          "response": {
            "$ref": "Role"
          },
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameterOrder": [
            "customer",
            "roleId"
          ]
        },
        "delete": {
          "description": "Deletes a role.",
          "id": "directory.roles.delete",
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "parameters": {
            "roleId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the role."
            },
            "customer": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the Google Workspace account."
            }
          },
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}"
        },
        "list": {
          "httpMethod": "GET",
          "parameters": {
            "pageToken": {
              "description": "Token to specify the next page in the list.",
              "location": "query",
              "type": "string"
            },
            "customer": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the Google Workspace account.",
              "type": "string"
            },
            "maxResults": {
              "minimum": "1",
              "description": "Maximum number of results to return.",
              "type": "integer",
              "maximum": "100",
              "location": "query",
              "format": "int32"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "path": "admin/directory/v1/customer/{customer}/roles",
          "description": "Retrieves a paginated list of all the roles in a domain.",
          "response": {
            "$ref": "Roles"
          },
          "id": "directory.roles.list",
          "parameterOrder": [
            "customer"
          ]
        },
        "insert": {
          "request": {
            "$ref": "Role"
          },
          "httpMethod": "POST",
          "parameters": {
            "customer": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the Google Workspace account."
            }
          },
          "id": "directory.roles.insert",
          "response": {
            "$ref": "Role"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "parameterOrder": [
            "customer"
          ],
          "path": "admin/directory/v1/customer/{customer}/roles",
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "description": "Creates a role."
        }
      }
    }
  },
  "servicePath": "",
  "baseUrl": "https://admin.googleapis.com/",
  "ownerDomain": "google.com",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "discoveryVersion": "v1",
  "canonicalName": "directory",
  "version": "directory_v1",
  "mtlsRootUrl": "https://admin.mtls.googleapis.com/",
  "name": "admin",
  "id": "admin:directory_v1",
  "parameters": {
    "alt": {
      "location": "query",
      "description": "Data format for response.",
      "type": "string",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "default": "json"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "location": "query",
      "type": "string"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query",
      "type": "string"
    },
    "key": {
      "location": "query",
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    },
    "quotaUser": {
      "location": "query",
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "$.xgafv": {
      "type": "string",
      "enum": [
        "1",
        "2"
      ],
      "location": "query",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "description": "V1 error format."
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query",
      "type": "string"
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "prettyPrint": {
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "location": "query",
      "type": "boolean"
    },
    "access_token": {
      "description": "OAuth access token.",
      "type": "string",
      "location": "query"
    }
  },
  "kind": "discovery#restDescription",
  "batchPath": "batch",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/admin.chrome.printers": {
          "description": "See, add, edit, and permanently delete the printers that your organization can use with Chrome"
        },
        "https://www.googleapis.com/auth/admin.directory.domain.readonly": {
          "description": "View domains related to your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema.readonly": {
          "description": "View user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos": {
          "description": "View and manage your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar": {
          "description": "View and manage the provisioning of calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member": {
          "description": "View and manage group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user": {
          "description": "View and manage the provisioning of users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly": {
          "description": "View your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias.readonly": {
          "description": "View user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile": {
          "description": "View and manage your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.customer.readonly": {
          "description": "View customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.group": {
          "description": "View and manage the provisioning of groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.security": {
          "description": "Manage data access permissions for users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias": {
          "description": "View and manage user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit": {
          "description": "View and manage organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.readonly": {
          "description": "View groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly": {
          "description": "View calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.action": {
          "description": "Manage your mobile devices by performing administrative tasks"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit.readonly": {
          "description": "View organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.customer": {
          "description": "View and manage customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.domain": {
          "description": "View and manage the provisioning of domains for your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.user.readonly": {
          "description": "See info about users on your domain"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud Platform data"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly": {
          "description": "View delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.chrome.printers.readonly": {
          "description": "See the printers that your organization can use with Chrome"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member.readonly": {
          "description": "View group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly": {
          "description": "View your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement": {
          "description": "Manage delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema": {
          "description": "View and manage the provisioning of user schemas on your domain"
        }
      }
    }
  },
  "rootUrl": "https://admin.googleapis.com/",
  "protocol": "rest",
  "fullyEncodeReservedExpansion": true,
  "ownerName": "Google",
  "documentationLink": "http://developers.google.com/admin-sdk/",
  "revision": "20210413",
  "schemas": {
    "CustomerPostalAddress": {
      "id": "CustomerPostalAddress",
      "properties": {
        "addressLine2": {
          "type": "string",
          "description": "Address line 2 of the address."
        },
        "locality": {
          "type": "string",
          "description": "Name of the locality. An example of a locality value is the city of `San Francisco`."
        },
        "countryCode": {
          "type": "string",
          "description": "This is a required property. For `countryCode` information see the [ISO 3166 country code elements](https://www.iso.org/iso/country_codes.htm)."
        },
        "region": {
          "description": "Name of the region. An example of a region value is `NY` for the state of New York.",
          "type": "string"
        },
        "postalCode": {
          "type": "string",
          "description": "The postal code. A postalCode example is a postal zip code such as `10009`. This is in accordance with - http: //portablecontacts.net/draft-spec.html#address_element."
        },
        "addressLine3": {
          "type": "string",
          "description": "Address line 3 of the address."
        },
        "addressLine1": {
          "description": "A customer's physical address. The address can be composed of one to three lines.",
          "type": "string"
        },
        "contactName": {
          "type": "string",
          "description": "The customer contact's name."
        },
        "organizationName": {
          "description": "The company or company division name.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserIm": {
      "description": "JSON template for instant messenger of an user.",
      "id": "UserIm",
      "properties": {
        "primary": {
          "description": "If this is user's primary im. Only one entry could be marked as primary.",
          "type": "boolean"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example instant messengers could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "protocol": {
          "description": "Protocol used in the instant messenger. It should be one of the values from ImProtocolTypes map. Similar to type it can take a CUSTOM value and specify the custom name in customProtocol field.",
          "type": "string"
        },
        "customProtocol": {
          "description": "Custom protocol.",
          "type": "string"
        },
        "im": {
          "description": "Instant messenger id.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "RecentUsers": {
      "properties": {
        "type": {
          "description": "The type of the user.",
          "type": "string"
        },
        "email": {
          "type": "string",
          "description": "The user's email address. This is only present if the user type is `USER_TYPE_MANAGED`."
        }
      },
      "type": "object",
      "description": "List of recent device users, in descending order, by last login time.",
      "id": "RecentUsers"
    },
    "RoleAssignment": {
      "id": "RoleAssignment",
      "description": "Defines an assignment of a role.",
      "type": "object",
      "properties": {
        "scopeType": {
          "description": "The scope in which this role is assigned.",
          "type": "string"
        },
        "assignedTo": {
          "type": "string",
          "description": "The unique ID of the user this role is assigned to."
        },
        "kind": {
          "default": "admin#directory#roleAssignment",
          "type": "string",
          "description": "The type of the API resource. This is always `admin#directory#roleAssignment`."
        },
        "roleAssignmentId": {
          "type": "string",
          "format": "int64",
          "description": "ID of this roleAssignment."
        },
        "roleId": {
          "type": "string",
          "format": "int64",
          "description": "The ID of the role that is assigned."
        },
        "orgUnitId": {
          "description": "If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this role is restricted to.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      }
    },
    "PrinterModel": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Display name. eq. \"Brother MFC-8840D\""
        },
        "manufacturer": {
          "description": "Manufacturer. eq. \"Brother\"",
          "type": "string"
        },
        "makeAndModel": {
          "description": "Make and model as represented in \"make_and_model\" field in Printer object. eq. \"brother mfc-8840d\"",
          "type": "string"
        }
      },
      "id": "PrinterModel",
      "description": "Printer manufacturer and model"
    },
    "ListPrintersResponse": {
      "type": "object",
      "description": "Response for listing printers.",
      "id": "ListPrintersResponse",
      "properties": {
        "printers": {
          "items": {
            "$ref": "Printer"
          },
          "description": "List of printers. If `org_unit_id` was given in the request, then only printers visible for this OU will be returned. If `org_unit_id` was given in the request, then all printers will be returned.",
          "type": "array"
        },
        "nextPageToken": {
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.",
          "type": "string"
        }
      }
    },
    "DirectoryChromeosdevicesCommandResult": {
      "type": "object",
      "properties": {
        "errorMessage": {
          "description": "The error message with a short explanation as to why the command failed. Only present if the command failed.",
          "type": "string"
        },
        "executeTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The time at which the command was executed or failed to execute."
        },
        "result": {
          "description": "The result of the command.",
          "type": "string",
          "enum": [
            "COMMAND_RESULT_TYPE_UNSPECIFIED",
            "IGNORED",
            "FAILURE",
            "SUCCESS"
          ],
          "enumDescriptions": [
            "The command result was unspecified.",
            "The command was ignored as obsolete.",
            "The command could not be executed successfully.",
            "The command was successfully executed."
          ]
        }
      },
      "description": "The result of executing a command.",
      "id": "DirectoryChromeosdevicesCommandResult"
    },
    "OrgUnits": {
      "id": "OrgUnits",
      "properties": {
        "organizationUnits": {
          "type": "array",
          "description": "List of organizational unit objects.",
          "items": {
            "$ref": "OrgUnit"
          }
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. For Org Unit resources, the type is `admin#directory#orgUnits`.",
          "default": "admin#directory#orgUnits"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserGender": {
      "id": "UserGender",
      "properties": {
        "type": {
          "description": "Gender.",
          "type": "string"
        },
        "addressMeAs": {
          "type": "string",
          "description": "AddressMeAs. A human-readable string containing the proper way to refer to the profile owner by humans for example he/him/his or they/them/their."
        },
        "customGender": {
          "description": "Custom gender.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DirectoryChromeosdevicesCommand": {
      "properties": {
        "state": {
          "type": "string",
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "EXPIRED",
            "CANCELLED",
            "SENT_TO_CLIENT",
            "ACKED_BY_CLIENT",
            "EXECUTED_BY_CLIENT"
          ],
          "enumDescriptions": [
            "The command status was unspecified.",
            "An unexpired command not yet sent to the client.",
            "The command didn't get executed by the client within the expected time.",
            "The command is cancelled by admin while in PENDING.",
            "The command has been sent to the client.",
            "The client has responded that it received the command.",
            "The client has (un)successfully executed the command."
          ],
          "description": "Indicates the command state."
        },
        "payload": {
          "type": "string",
          "description": "The payload that the command specified, if any."
        },
        "commandResult": {
          "$ref": "DirectoryChromeosdevicesCommandResult",
          "description": "The result of the command execution."
        },
        "issueTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "The timestamp when the command was issued by the admin."
        },
        "commandId": {
          "format": "int64",
          "type": "string",
          "description": "Unique ID of a device command."
        },
        "type": {
          "enumDescriptions": [
            "The command type was unspecified.",
            "Reboot the device. Can only be issued to Kiosk and managed guest session devices.",
            "Take a screenshot of the device. Only available if the device is in Kiosk Mode.",
            "Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.",
            "Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.",
            "Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!"
          ],
          "enum": [
            "COMMAND_TYPE_UNSPECIFIED",
            "REBOOT",
            "TAKE_A_SCREENSHOT",
            "SET_VOLUME",
            "WIPE_USERS",
            "REMOTE_POWERWASH"
          ],
          "description": "The type of the command.",
          "type": "string"
        },
        "commandExpireTime": {
          "format": "google-datetime",
          "description": "The time at which the command will expire. If the device doesn't execute the command within this time the command will become expired.",
          "type": "string"
        }
      },
      "id": "DirectoryChromeosdevicesCommand",
      "type": "object",
      "description": "Information regarding a command that was issued to a device."
    },
    "Features": {
      "type": "object",
      "description": "Public API: Resources.features",
      "properties": {
        "kind": {
          "default": "admin#directory#resources#features#featuresList",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "nextPageToken": {
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "features": {
          "items": {
            "$ref": "Feature"
          },
          "description": "The Features in this page of results.",
          "type": "array"
        }
      },
      "id": "Features"
    },
    "Privileges": {
      "type": "object",
      "properties": {
        "items": {
          "description": "A list of Privilege resources.",
          "items": {
            "$ref": "Privilege"
          },
          "type": "array"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#privileges",
          "description": "The type of the API resource. This is always `admin#directory#privileges`."
        }
      },
      "id": "Privileges"
    },
    "MobileDevices": {
      "id": "MobileDevices",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "mobiledevices": {
          "type": "array",
          "items": {
            "$ref": "MobileDevice"
          },
          "description": "List of Mobile Device objects."
        },
        "kind": {
          "default": "admin#directory#mobiledevices",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      }
    },
    "CalendarResource": {
      "properties": {
        "floorSection": {
          "type": "string",
          "description": "Name of the section within a floor a resource is located in."
        },
        "generatedResourceName": {
          "description": "The read-only auto-generated name of the calendar resource which includes metadata about the resource such as building name, floor, capacity, etc. For example, \"NYC-2-Training Room 1A (16)\".",
          "type": "string"
        },
        "resourceType": {
          "type": "string",
          "description": "The type of the calendar resource, intended for non-room resources."
        },
        "resourceId": {
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          },
          "description": "The unique ID for the calendar resource.",
          "type": "string"
        },
        "resourceCategory": {
          "type": "string",
          "description": "The category of the calendar resource. Either CONFERENCE_ROOM or OTHER. Legacy data is set to CATEGORY_UNKNOWN."
        },
        "capacity": {
          "description": "Capacity of a resource, number of seats in a room.",
          "type": "integer",
          "format": "int32"
        },
        "floorName": {
          "type": "string",
          "description": "Name of the floor a resource is located on."
        },
        "userVisibleDescription": {
          "description": "Description of the resource, visible to users and admins.",
          "type": "string"
        },
        "featureInstances": {
          "description": "Instances of features for the calendar resource.",
          "type": "any"
        },
        "kind": {
          "default": "admin#directory#resources#calendars#CalendarResource",
          "description": "The type of the resource. For calendar resources, the value is `admin#directory#resources#calendars#CalendarResource`.",
          "type": "string"
        },
        "resourceName": {
          "description": "The name of the calendar resource. For example, \"Training Room 1A\".",
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          },
          "type": "string"
        },
        "etags": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "resourceDescription": {
          "description": "Description of the resource, visible only to admins.",
          "type": "string"
        },
        "resourceEmail": {
          "type": "string",
          "description": "The read-only email for the calendar resource. Generated as part of creating a new calendar resource."
        },
        "buildingId": {
          "type": "string",
          "description": "Unique ID for the building a resource is located in."
        }
      },
      "type": "object",
      "description": "Public API: Resources.calendars",
      "id": "CalendarResource"
    },
    "UserAbout": {
      "id": "UserAbout",
      "properties": {
        "value": {
          "type": "string",
          "description": "Actual value of notes."
        },
        "contentType": {
          "description": "About entry can have a type which indicates the content type. It can either be plain or html. By default, notes contents are assumed to contain plain text.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "JSON template for About (notes) of a user in Directory API."
    },
    "Privilege": {
      "properties": {
        "isOuScopable": {
          "description": "If the privilege can be restricted to an organization unit.",
          "type": "boolean"
        },
        "kind": {
          "default": "admin#directory#privilege",
          "description": "The type of the API resource. This is always `admin#directory#privilege`.",
          "type": "string"
        },
        "serviceId": {
          "type": "string",
          "description": "The obfuscated ID of the service this privilege is for. This value is returned with [`Privileges.list()`](/admin-sdk/directory/v1/reference/privileges/list)."
        },
        "privilegeName": {
          "description": "The name of the privilege.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "serviceName": {
          "description": "The name of the service this privilege is for.",
          "type": "string"
        },
        "childPrivileges": {
          "description": "A list of child privileges. Privileges for a service form a tree. Each privilege can have a list of child privileges; this list is empty for a leaf privilege.",
          "type": "array",
          "items": {
            "$ref": "Privilege"
          }
        }
      },
      "id": "Privilege",
      "type": "object"
    },
    "Roles": {
      "id": "Roles",
      "properties": {
        "nextPageToken": {
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "description": "The type of the API resource. This is always `admin#directory#roles`.",
          "default": "admin#directory#roles",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "Role"
          },
          "description": "A list of Role resources."
        }
      },
      "type": "object"
    },
    "UserName": {
      "type": "object",
      "properties": {
        "familyName": {
          "description": "The user's last name. Required when creating a user account.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "givenName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "The user's first name. Required when creating a user account."
        },
        "fullName": {
          "type": "string",
          "description": "The user's full name formed by concatenating the first and last name values."
        }
      },
      "id": "UserName"
    },
    "UserUndelete": {
      "properties": {
        "orgUnitPath": {
          "description": "OrgUnit of User",
          "type": "string"
        }
      },
      "id": "UserUndelete",
      "type": "object"
    },
    "Aliases": {
      "description": "JSON response template to list aliases in Directory API.",
      "properties": {
        "aliases": {
          "type": "array",
          "items": {
            "type": "any"
          }
        },
        "kind": {
          "default": "admin#directory#aliases",
          "type": "string"
        },
        "etag": {
          "type": "string"
        }
      },
      "id": "Aliases",
      "type": "object"
    },
    "Asp": {
      "type": "object",
      "properties": {
        "userKey": {
          "type": "string",
          "description": "The unique ID of the user who issued the ASP."
        },
        "lastTimeUsed": {
          "description": "The time when the ASP was last used. Expressed in [Unix time](https://en.wikipedia.org/wiki/Epoch_time) format.",
          "format": "int64",
          "type": "string"
        },
        "creationTime": {
          "type": "string",
          "description": "The time when the ASP was created. Expressed in [Unix time](https://en.wikipedia.org/wiki/Epoch_time) format.",
          "format": "int64"
        },
        "codeId": {
          "format": "int32",
          "description": "The unique ID of the ASP.",
          "type": "integer"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the ASP."
        },
        "name": {
          "type": "string",
          "description": "The name of the application that the user, represented by their `userId`, entered when the ASP was created."
        },
        "kind": {
          "default": "admin#directory#asp",
          "type": "string",
          "description": "The type of the API resource. This is always `admin#directory#asp`."
        }
      },
      "description": "An application-specific password (ASP) is used with applications that do not accept a verification code when logging into the application on certain devices. The ASP access code is used instead of the login and password you commonly use when accessing an application through a browser. For more information about ASPs and how to create one, see the [help center](https://support.google.com/a/answer/2537800#asp).",
      "id": "Asp"
    },
    "DirectoryChromeosdevicesIssueCommandRequest": {
      "description": "A request for issuing a command.",
      "type": "object",
      "id": "DirectoryChromeosdevicesIssueCommandRequest",
      "properties": {
        "payload": {
          "type": "string",
          "description": "The payload for the command, provide it only if command supports it. The following commands support adding payload: - SET_VOLUME: Payload is a stringified JSON object in the form: { \"volume\": 50 }. The volume has to be an integer in the range [0,100]."
        },
        "commandType": {
          "type": "string",
          "enum": [
            "COMMAND_TYPE_UNSPECIFIED",
            "REBOOT",
            "TAKE_A_SCREENSHOT",
            "SET_VOLUME",
            "WIPE_USERS",
            "REMOTE_POWERWASH"
          ],
          "enumDescriptions": [
            "The command type was unspecified.",
            "Reboot the device. Can only be issued to Kiosk and managed guest session devices.",
            "Take a screenshot of the device. Only available if the device is in Kiosk Mode.",
            "Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.",
            "Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.",
            "Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!"
          ],
          "description": "The type of command."
        }
      }
    },
    "Domains": {
      "type": "object",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#domain",
          "description": "Kind of resource this is."
        },
        "domainAliases": {
          "description": "List of domain alias objects. (Read-only)",
          "items": {
            "$ref": "DomainAlias"
          },
          "type": "array"
        },
        "creationTime": {
          "description": "Creation time of the domain. Expressed in [Unix time](https://en.wikipedia.org/wiki/Epoch_time) format. (Read-only).",
          "format": "int64",
          "type": "string"
        },
        "verified": {
          "description": "Indicates the verification state of a domain. (Read-only).",
          "type": "boolean"
        },
        "domainName": {
          "description": "The domain name of the customer.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          }
        },
        "isPrimary": {
          "type": "boolean",
          "description": "Indicates if the domain is a primary domain (Read-only)."
        }
      },
      "id": "Domains"
    },
    "UserOrganization": {
      "description": "JSON template for an organization entry.",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the organization."
        },
        "fullTimeEquivalent": {
          "format": "int32",
          "type": "integer",
          "description": "The full-time equivalent millipercent within the organization (100000 = 100%)."
        },
        "location": {
          "description": "Location of the organization. This need not be fully qualified address.",
          "type": "string"
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Name of the organization"
        },
        "costCenter": {
          "type": "string",
          "description": "The cost center of the users department."
        },
        "department": {
          "description": "Department within the organization.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example organization could be of school work etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a CustomType value."
        },
        "title": {
          "description": "Title (designation) of the user in the organization.",
          "type": "string"
        },
        "domain": {
          "description": "The domain to which the organization belongs to.",
          "type": "string"
        },
        "symbol": {
          "type": "string",
          "description": "Symbol of the organization."
        },
        "primary": {
          "type": "boolean",
          "description": "If it user's primary organization."
        }
      },
      "type": "object",
      "id": "UserOrganization"
    },
    "Member": {
      "id": "Member",
      "type": "object",
      "properties": {
        "email": {
          "description": "The member's email address. A member can be a user or another group. This property is required when adding a member to a group. The `email` must be unique and cannot be an alias of another group. If the email address is changed, the API automatically reflects the email address changes.",
          "type": "string"
        },
        "id": {
          "description": "The unique ID of the group member. A member `id` can be used as a member request URI's `memberKey`.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#member",
          "description": "The type of the API resource. For Members resources, the value is `admin#directory#member`.",
          "type": "string"
        },
        "delivery_settings": {
          "type": "string",
          "description": "Defines mail delivery preferences of member. This is only supported by create/update/get."
        },
        "role": {
          "description": "The member's role in a group. The API returns an error for cycles in group memberships. For example, if `group1` is a member of `group2`, `group2` cannot be a member of `group1`. For more information about a member's role, see the [administration help center](https://support.google.com/a/answer/167094).",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "The type of group member."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "status": {
          "type": "string",
          "description": "Status of member (Immutable)"
        }
      },
      "description": "A Google Groups member can be a user or another group. This member can be inside or outside of your account's domains. For more information about common group member tasks, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-group-members)."
    },
    "UserPhoto": {
      "id": "UserPhoto",
      "type": "object",
      "properties": {
        "height": {
          "type": "integer",
          "description": "Height of the photo in pixels.",
          "format": "int32"
        },
        "id": {
          "type": "string",
          "description": "The ID the API uses to uniquely identify the user."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "width": {
          "format": "int32",
          "type": "integer",
          "description": "Width of the photo in pixels."
        },
        "photoData": {
          "description": "The user photo's upload data in [web-safe Base64](https://en.wikipedia.org/wiki/Base64#URL_applications) format in bytes. This means: * The slash (/) character is replaced with the underscore (_) character. * The plus sign (+) character is replaced with the hyphen (-) character. * The equals sign (=) character is replaced with the asterisk (*). * For padding, the period (.) character is used instead of the RFC-4648 baseURL definition which uses the equals sign (=) for padding. This is done to simplify URL-parsing. * Whatever the size of the photo being uploaded, the API downsizes it to 96x96 pixels.",
          "format": "byte",
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.photos.update"
            ]
          }
        },
        "primaryEmail": {
          "type": "string",
          "description": "The user's primary email address."
        },
        "kind": {
          "default": "admin#directory#user#photo",
          "type": "string",
          "description": "The type of the API resource. For Photo resources, this is `admin#directory#user#photo`."
        },
        "mimeType": {
          "type": "string",
          "description": "The MIME type of the photo. Allowed values are `JPEG`, `PNG`, `GIF`, `BMP`, `TIFF`, and web-safe base64 encoding."
        }
      }
    },
    "Feature": {
      "properties": {
        "etags": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "name": {
          "description": "The name of the feature.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.resources.features.insert"
            ]
          }
        },
        "kind": {
          "default": "admin#directory#resources#features#Feature",
          "description": "Kind of resource this is.",
          "type": "string"
        }
      },
      "id": "Feature",
      "description": "JSON template for Feature object in Directory API.",
      "type": "object"
    },
    "CreatePrinterRequest": {
      "type": "object",
      "description": "Request for adding a new printer.",
      "properties": {
        "printer": {
          "description": "Required. A printer to create. If you want to place the printer under particular OU then populate printer.org_unit_id filed. Otherwise the printer will be placed under root OU.",
          "$ref": "Printer"
        },
        "parent": {
          "type": "string",
          "description": "Required. The name of the customer. Format: customers/{customer_id}"
        }
      },
      "id": "CreatePrinterRequest"
    },
    "Printer": {
      "type": "object",
      "properties": {
        "orgUnitId": {
          "type": "string",
          "description": "Organization Unit that owns this printer (Only can be set during Printer creation)"
        },
        "displayName": {
          "type": "string",
          "description": "Editable. Name of printer."
        },
        "makeAndModel": {
          "type": "string",
          "description": "Editable. Make and model of printer. e.g. Lexmark MS610de Value must be in format as seen in ListPrinterModels response."
        },
        "auxiliaryMessages": {
          "items": {
            "$ref": "AuxiliaryMessage"
          },
          "description": "Output only. Auxiliary messages about issues with the printer configuration if any.",
          "type": "array",
          "readOnly": true
        },
        "description": {
          "description": "Editable. Description of printer.",
          "type": "string"
        },
        "name": {
          "description": "The resource name of the Printer object, in the format customers/{customer-id}/printers/{printer-id} (During printer creation leave empty)",
          "type": "string"
        },
        "uri": {
          "type": "string",
          "description": "Editable. Printer URI."
        },
        "createTime": {
          "type": "string",
          "format": "google-datetime",
          "readOnly": true,
          "description": "Output only. Time when printer was created."
        },
        "id": {
          "description": "Id of the printer. (During printer creation leave empty)",
          "type": "string"
        },
        "useDriverlessConfig": {
          "description": "Editable. flag to use driverless configuration or not. If it's set to be true, make_and_model can be ignored",
          "type": "boolean"
        }
      },
      "description": "Printer configuration.",
      "id": "Printer"
    },
    "Empty": {
      "id": "Empty",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.",
      "properties": {},
      "type": "object"
    },
    "OrgUnit": {
      "id": "OrgUnit",
      "properties": {
        "name": {
          "annotations": {
            "required": [
              "directory.orgunits.insert"
            ]
          },
          "type": "string",
          "description": "The organizational unit's path name. For example, an organizational unit's name within the /corp/support/sales_support parent path is sales_support. Required."
        },
        "parentOrgUnitPath": {
          "type": "string",
          "description": "The organizational unit's parent path. For example, /corp/sales is the parent path for /corp/sales/sales_support organizational unit. Required, unless `parentOrgUnitId` is set."
        },
        "description": {
          "type": "string",
          "description": "Description of the organizational unit."
        },
        "parentOrgUnitId": {
          "type": "string",
          "description": "The unique ID of the parent organizational unit. Required, unless `parentOrgUnitPath` is set."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "orgUnitPath": {
          "type": "string",
          "description": "The full path to the organizational unit. The `orgUnitPath` is a derived property. When listed, it is derived from `parentOrgunitPath` and organizational unit's `name`. For example, for an organizational unit named 'apps' under parent organization '/engineering', the orgUnitPath is '/engineering/apps'. In order to edit an `orgUnitPath`, either update the name of the organization or the `parentOrgunitPath`. A user's organizational unit determines which Google Workspace services the user has access to. If the user is moved to a new organization, the user's access changes. For more information about organization structures, see the [administration help center](https://support.google.com/a/answer/4352075). For more information about moving a user to a different organization, see [Update a user](/admin-sdk/directory/v1/guides/manage-users.html#update_user)."
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. For Orgunits resources, the value is `admin#directory#orgUnit`.",
          "default": "admin#directory#orgUnit"
        },
        "blockInheritance": {
          "description": "Determines if a sub-organizational unit can inherit the settings of the parent organization. The default value is `false`, meaning a sub-organizational unit inherits the settings of the nearest parent organizational unit. For more information on inheritance and users in an organization structure, see the [administration help center](https://support.google.com/a/answer/4352075).",
          "type": "boolean"
        },
        "orgUnitId": {
          "description": "The unique ID of the organizational unit.",
          "type": "string"
        }
      },
      "description": "Managing your account's organizational units allows you to configure your users' access to services and custom settings. For more information about common organizational unit tasks, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-org-units.html).",
      "type": "object"
    },
    "UserSshPublicKey": {
      "type": "object",
      "id": "UserSshPublicKey",
      "properties": {
        "key": {
          "description": "An SSH public key.",
          "type": "string"
        },
        "fingerprint": {
          "readOnly": true,
          "description": "A SHA-256 fingerprint of the SSH public key. (Read-only)",
          "type": "string"
        },
        "expirationTimeUsec": {
          "format": "int64",
          "type": "string",
          "description": "An expiration time in microseconds since epoch."
        }
      },
      "description": "JSON template for a POSIX account entry."
    },
    "MembersHasMember": {
      "type": "object",
      "id": "MembersHasMember",
      "properties": {
        "isMember": {
          "type": "boolean",
          "description": "Output only. Identifies whether the given user is a member of the group. Membership can be direct or nested.",
          "readOnly": true
        }
      },
      "description": "JSON template for Has Member response in Directory API."
    },
    "RoleAssignments": {
      "type": "object",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "RoleAssignment"
          },
          "type": "array",
          "description": "A list of RoleAssignment resources."
        },
        "kind": {
          "description": "The type of the API resource. This is always `admin#directory#roleAssignments`.",
          "default": "admin#directory#roleAssignments",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string"
        }
      },
      "id": "RoleAssignments"
    },
    "ChromeOsDevices": {
      "id": "ChromeOsDevices",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "default": "admin#directory#chromeosdevices",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "nextPageToken": {
          "description": "Token used to access the next page of this result. To access the next page, use this token's value in the `pageToken` query string of this request.",
          "type": "string"
        },
        "chromeosdevices": {
          "description": "List of Chrome OS Device objects.",
          "items": {
            "$ref": "ChromeOsDevice"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "UserAddress": {
      "type": "object",
      "properties": {
        "streetAddress": {
          "type": "string",
          "description": "Street."
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary address. Only one entry could be marked as primary."
        },
        "poBox": {
          "type": "string",
          "description": "Other parts of address."
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard values of that entry. For example address could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such type should have the CUSTOM value as type and also have a customType value."
        },
        "country": {
          "type": "string",
          "description": "Country."
        },
        "extendedAddress": {
          "type": "string",
          "description": "Extended Address."
        },
        "countryCode": {
          "type": "string",
          "description": "Country code."
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "sourceIsStructured": {
          "description": "User supplied address was structured. Structured addresses are NOT supported at this time. You might be able to write structured addresses but any values will eventually be clobbered.",
          "type": "boolean"
        },
        "formatted": {
          "type": "string",
          "description": "Formatted address."
        },
        "postalCode": {
          "type": "string",
          "description": "Postal code."
        },
        "locality": {
          "type": "string",
          "description": "Locality."
        },
        "region": {
          "description": "Region.",
          "type": "string"
        }
      },
      "description": "JSON template for address.",
      "id": "UserAddress"
    },
    "AuxiliaryMessage": {
      "id": "AuxiliaryMessage",
      "description": "Auxiliary message about issues with printers or settings. Example: {message_type:AUXILIARY_MESSAGE_WARNING, field_mask:make_and_model, message:\"Given printer is invalid or no longer supported.\"}",
      "properties": {
        "fieldMask": {
          "description": "Field that this message concerns.",
          "format": "google-fieldmask",
          "type": "string"
        },
        "auxiliaryMessage": {
          "type": "string",
          "description": "Human readable message in English. Example: \"Given printer is invalid or no longer supported.\""
        },
        "severity": {
          "description": "Message severity",
          "type": "string",
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "SEVERITY_INFO",
            "SEVERITY_WARNING",
            "SEVERITY_ERROR"
          ],
          "enumDescriptions": [
            "Message type unspecified.",
            "Message of severity: info.",
            "Message of severity: warning.",
            "Message of severity: error."
          ]
        }
      },
      "type": "object"
    },
    "MobileDeviceAction": {
      "id": "MobileDeviceAction",
      "type": "object",
      "properties": {
        "action": {
          "annotations": {
            "required": [
              "directory.mobiledevices.action"
            ]
          },
          "description": "The action to be performed on the device.",
          "type": "string"
        }
      }
    },
    "Domains2": {
      "id": "Domains2",
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#domains"
        },
        "domains": {
          "description": "List of domain objects.",
          "items": {
            "$ref": "Domains"
          },
          "type": "array"
        }
      }
    },
    "UserPosixAccount": {
      "id": "UserPosixAccount",
      "properties": {
        "homeDirectory": {
          "type": "string",
          "description": "The path to the home directory for this account."
        },
        "gid": {
          "type": "string",
          "format": "uint64",
          "description": "The default group ID."
        },
        "operatingSystemType": {
          "description": "The operating system type for this account.",
          "type": "string"
        },
        "shell": {
          "description": "The path to the login shell for this account.",
          "type": "string"
        },
        "uid": {
          "description": "The POSIX compliant user ID.",
          "format": "uint64",
          "type": "string"
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary account within the SystemId."
        },
        "accountId": {
          "description": "A POSIX account field identifier.",
          "type": "string"
        },
        "username": {
          "description": "The username of the account.",
          "type": "string"
        },
        "gecos": {
          "description": "The GECOS (user information) for this account.",
          "type": "string"
        },
        "systemId": {
          "description": "System identifier for which account Username or Uid apply to.",
          "type": "string"
        }
      },
      "description": "JSON template for a POSIX account entry.",
      "type": "object"
    },
    "VerificationCodes": {
      "description": "JSON response template for List verification codes operation in Directory API.",
      "properties": {
        "kind": {
          "default": "admin#directory#verificationCodesList",
          "description": "The type of the resource. This is always `admin#directory#verificationCodesList`.",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "VerificationCode"
          },
          "description": "A list of verification code resources.",
          "type": "array"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "type": "object",
      "id": "VerificationCodes"
    },
    "Groups": {
      "type": "object",
      "id": "Groups",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "groups": {
          "description": "List of group objects.",
          "type": "array",
          "items": {
            "$ref": "Group"
          }
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#groups"
        }
      }
    },
    "UserLanguage": {
      "id": "UserLanguage",
      "type": "object",
      "properties": {
        "languageCode": {
          "type": "string",
          "description": "Language Code. Should be used for storing Google III LanguageCode string representation for language. Illegal values cause SchemaException."
        },
        "customLanguage": {
          "description": "Other language. User can provide own language name if there is no corresponding Google III language code. If this is set LanguageCode can't be set",
          "type": "string"
        }
      },
      "description": "JSON template for a language entry."
    },
    "UserMakeAdmin": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "annotations": {
            "required": [
              "directory.users.makeAdmin"
            ]
          },
          "description": "Indicates the administrator status of the user."
        }
      },
      "id": "UserMakeAdmin"
    },
    "CalendarResources": {
      "description": "Public API: Resources.calendars",
      "type": "object",
      "id": "CalendarResources",
      "properties": {
        "kind": {
          "description": "Identifies this as a collection of CalendarResources. This is always `admin#directory#resources#calendars#calendarResourcesList`.",
          "default": "admin#directory#resources#calendars#calendarResourcesList",
          "type": "string"
        },
        "items": {
          "type": "array",
          "description": "The CalendarResources in this page of results.",
          "items": {
            "$ref": "CalendarResource"
          }
        },
        "nextPageToken": {
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      }
    },
    "BuildingAddress": {
      "description": "Public API: Resources.buildings",
      "id": "BuildingAddress",
      "type": "object",
      "properties": {
        "administrativeArea": {
          "description": "Optional. Highest administrative subdivision which is used for postal addresses of a country or region.",
          "type": "string"
        },
        "locality": {
          "description": "Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines.",
          "type": "string"
        },
        "postalCode": {
          "type": "string",
          "description": "Optional. Postal code of the address."
        },
        "sublocality": {
          "type": "string",
          "description": "Optional. Sublocality of the address."
        },
        "addressLines": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Unstructured address lines describing the lower levels of an address."
        },
        "regionCode": {
          "type": "string",
          "description": "Required. CLDR region code of the country/region of the address."
        },
        "languageCode": {
          "description": "Optional. BCP-47 language code of the contents of this address (if known).",
          "type": "string"
        }
      }
    },
    "ChromeOsDevice": {
      "type": "object",
      "description": "Google Chrome devices run on the [Chrome OS](https://support.google.com/chromeos). For more information about common API tasks, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-chrome-devices).",
      "id": "ChromeOsDevice",
      "properties": {
        "ethernetMacAddress0": {
          "type": "string",
          "description": "(Read-only) MAC address used by the Chromebook’s internal ethernet port, and for onboard network (ethernet) interface. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices."
        },
        "platformVersion": {
          "type": "string",
          "description": "The Chrome device's platform version."
        },
        "osVersion": {
          "type": "string",
          "description": "The Chrome device's operating system version."
        },
        "meid": {
          "description": "The Mobile Equipment Identifier (MEID) or the International Mobile Equipment Identity (IMEI) for the 3G mobile card in a mobile device. A MEID/IMEI is typically used when adding a device to a wireless carrier's post-pay service plan. If the device does not have this information, this property is not included in the response. For more information on how to export a MEID/IMEI list, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-chrome-devices.html#export_meid).",
          "type": "string"
        },
        "willAutoRenew": {
          "type": "boolean",
          "description": "Determines if the device will auto renew its support after the support end date. This is a read-only property."
        },
        "supportEndDate": {
          "type": "string",
          "description": "Final date the device will be supported (Read-only)",
          "format": "date-time"
        },
        "diskVolumeReports": {
          "type": "array",
          "items": {
            "properties": {
              "volumeInfo": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "storageFree": {
                      "type": "string",
                      "format": "int64",
                      "description": "Free disk space [in bytes]"
                    },
                    "volumeId": {
                      "description": "Volume id",
                      "type": "string"
                    },
                    "storageTotal": {
                      "format": "int64",
                      "description": "Total disk space [in bytes]",
                      "type": "string"
                    }
                  }
                },
                "description": "Disk volumes"
              }
            },
            "type": "object"
          },
          "description": "Reports of disk space and other info about mounted/connected volumes."
        },
        "bootMode": {
          "description": "The boot mode for the device. The possible values are: * `Verified`: The device is running a valid version of the Chrome OS. * `Dev`: The devices's developer hardware switch is enabled. When booted, the device has a command line shell. For an example of a developer switch, see the [Chromebook developer information](https://www.chromium.org/chromium-os/developer-information-for-chrome-os-devices/samsung-series-5-chromebook#TOC-Developer-switch).",
          "type": "string"
        },
        "status": {
          "description": "The status of the device.",
          "type": "string"
        },
        "systemRamFreeReports": {
          "description": "Reports of amounts of available RAM memory (Read-only)",
          "items": {
            "type": "object",
            "properties": {
              "systemRamFreeInfo": {
                "type": "array",
                "items": {
                  "format": "int64",
                  "type": "string"
                }
              },
              "reportTime": {
                "format": "date-time",
                "description": "Date and time the report was received.",
                "type": "string"
              }
            }
          },
          "type": "array"
        },
        "serialNumber": {
          "type": "string",
          "description": "The Chrome device serial number entered when the device was enabled. This value is the same as the Admin console's *Serial Number* in the *Chrome OS Devices* tab."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "lastSync": {
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "format": "date-time",
          "type": "string"
        },
        "orderNumber": {
          "description": "The device's order number. Only devices directly purchased from Google have an order number.",
          "type": "string"
        },
        "systemRamTotal": {
          "description": "Total RAM on the device [in bytes] (Read-only)",
          "format": "int64",
          "type": "string"
        },
        "notes": {
          "description": "Notes about this device added by the administrator. This property can be [searched](https://support.google.com/chrome/a/answer/1698333) with the [list](/admin-sdk/directory/v1/reference/chromeosdevices/list) method's `query` parameter. Maximum length is 500 characters. Empty values are allowed.",
          "type": "string"
        },
        "dockMacAddress": {
          "type": "string",
          "description": "(Read-only) Built-in MAC address for the docking station that the device connected to. Factory sets Media access control address (MAC address) assigned for use by a dock. It is reserved specifically for MAC pass through device policy. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices."
        },
        "macAddress": {
          "type": "string",
          "description": "The device's wireless MAC address. If the device does not have this information, it is not included in the response."
        },
        "ethernetMacAddress": {
          "description": "The device's MAC address on the ethernet network interface.",
          "type": "string"
        },
        "autoUpdateExpiration": {
          "format": "int64",
          "description": "(Read-only) The timestamp after which the device will stop receiving Chrome updates or support",
          "type": "string"
        },
        "firmwareVersion": {
          "type": "string",
          "description": "The Chrome device's firmware version."
        },
        "cpuStatusReports": {
          "description": "Reports of CPU utilization and temperature (Read-only)",
          "type": "array",
          "items": {
            "properties": {
              "cpuTemperatureInfo": {
                "items": {
                  "type": "object",
                  "properties": {
                    "label": {
                      "type": "string",
                      "description": "CPU label"
                    },
                    "temperature": {
                      "format": "int32",
                      "type": "integer",
                      "description": "Temperature in Celsius degrees."
                    }
                  }
                },
                "description": "List of CPU temperature samples.",
                "type": "array"
              },
              "cpuUtilizationPercentageInfo": {
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "type": "array"
              },
              "reportTime": {
                "type": "string",
                "description": "Date and time the report was received.",
                "format": "date-time"
              }
            },
            "type": "object"
          }
        },
        "deviceFiles": {
          "description": "List of device files to download (Read-only)",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "File name"
              },
              "downloadUrl": {
                "type": "string",
                "description": "File download URL"
              },
              "createTime": {
                "description": "Date and time the file was created",
                "type": "string",
                "format": "date-time"
              },
              "type": {
                "description": "File type",
                "type": "string"
              }
            }
          }
        },
        "tpmVersionInfo": {
          "description": "Trusted Platform Module (TPM) (Read-only)",
          "type": "object",
          "properties": {
            "firmwareVersion": {
              "type": "string",
              "description": "TPM firmware version."
            },
            "family": {
              "description": "TPM family. We use the TPM 2.0 style encoding, e.g.: TPM 1.2: \"1.2\" -\u003e 312e3200 TPM 2.0: \"2.0\" -\u003e 322e3000",
              "type": "string"
            },
            "vendorSpecific": {
              "description": "Vendor-specific information such as Vendor ID.",
              "type": "string"
            },
            "specLevel": {
              "description": "TPM specification level. See Library Specification for TPM 2.0 and Main Specification for TPM 1.2.",
              "type": "string"
            },
            "manufacturer": {
              "type": "string",
              "description": "TPM manufacturer code."
            },
            "tpmModel": {
              "description": "TPM model number.",
              "type": "string"
            }
          }
        },
        "recentUsers": {
          "items": {
            "$ref": "RecentUsers"
          },
          "type": "array",
          "description": "List of recent device users, in descending order, by last login time."
        },
        "model": {
          "type": "string",
          "description": "The device's model information. If the device does not have this information, this property is not included in the response."
        },
        "manufactureDate": {
          "description": "(Read-only) The date the device was manufactured in yyyy-mm-dd format.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#chromeosdevice",
          "description": "The type of resource. For the Chromeosdevices resource, the value is `admin#directory#chromeosdevice`.",
          "type": "string"
        },
        "orgUnitPath": {
          "description": "The full parent path with the organizational unit's name associated with the device. Path names are case insensitive. If the parent organizational unit is the top-level organization, it is represented as a forward slash, `/`. This property can be [updated](/admin-sdk/directory/v1/guides/manage-chrome-devices#update_chrome_device) using the API. For more information about how to create an organizational structure for your device, see the [administration help center](https://support.google.com/a/answer/182433).",
          "type": "string"
        },
        "lastKnownNetwork": {
          "items": {
            "description": "Information for an ip address.",
            "properties": {
              "ipAddress": {
                "type": "string",
                "description": "The IP address."
              },
              "wanIpAddress": {
                "type": "string",
                "description": "The WAN IP address."
              }
            },
            "type": "object"
          },
          "type": "array",
          "description": "Contains last known network (Read-only)"
        },
        "deviceId": {
          "description": "The unique ID of the Chrome device.",
          "type": "string"
        },
        "annotatedLocation": {
          "type": "string",
          "description": "The address or location of the device as noted by the administrator. Maximum length is `200` characters. Empty values are allowed."
        },
        "screenshotFiles": {
          "items": {
            "properties": {
              "type": {
                "description": "File type",
                "type": "string"
              },
              "createTime": {
                "format": "date-time",
                "description": "Date and time the file was created",
                "type": "string"
              },
              "downloadUrl": {
                "description": "File download URL",
                "type": "string"
              },
              "name": {
                "description": "File name",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array",
          "description": "List of screenshot files to download. Type is always \"SCREENSHOT_FILE\". (Read-only)"
        },
        "annotatedAssetId": {
          "description": "The asset identifier as noted by an administrator or specified during enrollment.",
          "type": "string"
        },
        "activeTimeRanges": {
          "items": {
            "type": "object",
            "properties": {
              "date": {
                "format": "date",
                "description": "Date of usage",
                "type": "string"
              },
              "activeTime": {
                "type": "integer",
                "description": "Duration of usage in milliseconds.",
                "format": "int32"
              }
            }
          },
          "description": "List of active time ranges (Read-only).",
          "type": "array"
        },
        "annotatedUser": {
          "description": "The user of the device as noted by the administrator. Maximum length is 100 characters. Empty values are allowed.",
          "type": "string"
        },
        "lastEnrollmentTime": {
          "description": "Date and time the device was last enrolled (Read-only)",
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "DomainAlias": {
      "id": "DomainAlias",
      "type": "object",
      "properties": {
        "domainAliasName": {
          "description": "The domain alias name.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#domainAlias",
          "description": "Kind of resource this is."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "parentDomainName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          },
          "description": "The parent domain name that the domain alias is associated with. This can either be a primary or secondary domain name within a customer."
        },
        "verified": {
          "type": "boolean",
          "description": "Indicates the verification state of a domain alias. (Read-only)"
        },
        "creationTime": {
          "format": "int64",
          "description": "The creation time of the domain alias. (Read-only).",
          "type": "string"
        }
      }
    },
    "FeatureRename": {
      "properties": {
        "newName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.resources.features.rename"
            ]
          },
          "description": "New name of the feature."
        }
      },
      "id": "FeatureRename",
      "type": "object"
    },
    "BatchCreatePrintersRequest": {
      "properties": {
        "requests": {
          "description": "A list of Printers to be created. Max 50 at a time.",
          "items": {
            "$ref": "CreatePrinterRequest"
          },
          "type": "array"
        }
      },
      "id": "BatchCreatePrintersRequest",
      "description": "Request for adding new printers in batch.",
      "type": "object"
    },
    "UserRelation": {
      "properties": {
        "value": {
          "type": "string",
          "description": "The name of the relation."
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "type": {
          "description": "The relation of the user. Some of the possible values are mother father sister brother manager assistant partner.",
          "type": "string"
        }
      },
      "description": "JSON template for a relation entry.",
      "type": "object",
      "id": "UserRelation"
    },
    "Members": {
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "members": {
          "description": "List of member objects.",
          "type": "array",
          "items": {
            "$ref": "Member"
          }
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#members"
        }
      },
      "type": "object",
      "id": "Members"
    },
    "UserPhone": {
      "type": "object",
      "id": "UserPhone",
      "properties": {
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary phone or not."
        },
        "value": {
          "description": "Phone number.",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example phone could be of home_fax work mobile etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        }
      },
      "description": "JSON template for a phone entry."
    },
    "Buildings": {
      "type": "object",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#resources#buildings#buildingsList"
        },
        "buildings": {
          "items": {
            "$ref": "Building"
          },
          "type": "array",
          "description": "The Buildings in this page of results."
        }
      },
      "id": "Buildings",
      "description": "Public API: Resources.buildings"
    },
    "ChromeOsDeviceAction": {
      "type": "object",
      "properties": {
        "deprovisionReason": {
          "description": "Only used when the action is `deprovision`. With the `deprovision` action, this field is required. *Note*: The deprovision reason is audited because it might have implications on licenses for perpetual subscription customers.",
          "type": "string"
        },
        "action": {
          "annotations": {
            "required": [
              "directory.chromeosdevices.action"
            ]
          },
          "description": "Action to be taken on the Chrome OS device.",
          "type": "string"
        }
      },
      "id": "ChromeOsDeviceAction"
    },
    "FailureInfo": {
      "id": "FailureInfo",
      "type": "object",
      "properties": {
        "printerId": {
          "description": "Id of a failed printer.",
          "type": "string"
        },
        "printer": {
          "$ref": "Printer",
          "description": "Failed printer."
        },
        "errorMessage": {
          "description": "Failure reason message.",
          "type": "string"
        },
        "errorCode": {
          "enumDescriptions": [
            "Not an error; returned on success HTTP Mapping: 200 OK",
            "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
            "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
            "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
            "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
            "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
            "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
            "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
            "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
            "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
            "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level (e.g., when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence). (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. E.g., if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
            "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
            "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
            "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
            "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
            "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
            "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
          ],
          "type": "string",
          "enum": [
            "OK",
            "CANCELLED",
            "UNKNOWN",
            "INVALID_ARGUMENT",
            "DEADLINE_EXCEEDED",
            "NOT_FOUND",
            "ALREADY_EXISTS",
            "PERMISSION_DENIED",
            "UNAUTHENTICATED",
            "RESOURCE_EXHAUSTED",
            "FAILED_PRECONDITION",
            "ABORTED",
            "OUT_OF_RANGE",
            "UNIMPLEMENTED",
            "INTERNAL",
            "UNAVAILABLE",
            "DATA_LOSS"
          ],
          "description": "Canonical code for why the update failed to apply."
        }
      },
      "description": "Info about failures"
    },
    "UserEmail": {
      "description": "JSON template for an email.",
      "type": "object",
      "id": "UserEmail",
      "properties": {
        "address": {
          "description": "Email id of the user.",
          "type": "string"
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary email. Only one entry could be marked as primary."
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example email could be of home, work etc. In addition to the standard type, an entry can have a custom type and can take any value Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        }
      }
    },
    "Alias": {
      "id": "Alias",
      "properties": {
        "etag": {
          "type": "string"
        },
        "primaryEmail": {
          "type": "string"
        },
        "alias": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#alias",
          "type": "string"
        }
      },
      "type": "object",
      "description": "JSON template for Alias object in Directory API."
    },
    "Channel": {
      "description": "An notification channel used to watch for resource changes.",
      "type": "object",
      "id": "Channel",
      "properties": {
        "id": {
          "description": "A UUID or similar unique string that identifies this channel.",
          "type": "string"
        },
        "resourceId": {
          "type": "string",
          "description": "An opaque ID that identifies the resource being watched on this channel. Stable across different API versions."
        },
        "resourceUri": {
          "type": "string",
          "description": "A version-specific identifier for the watched resource."
        },
        "params": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Additional parameters controlling delivery channel behavior. Optional.",
          "type": "object"
        },
        "kind": {
          "type": "string",
          "default": "api#channel",
          "description": "Identifies this as a notification channel used to watch for changes to a resource, which is `api#channel`."
        },
        "expiration": {
          "type": "string",
          "format": "int64",
          "description": "Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional."
        },
        "type": {
          "type": "string",
          "description": "The type of delivery mechanism used for this channel."
        },
        "token": {
          "description": "An arbitrary string delivered to the target address with each notification delivered over this channel. Optional.",
          "type": "string"
        },
        "address": {
          "description": "The address where notifications are delivered for this channel.",
          "type": "string"
        },
        "payload": {
          "description": "A Boolean value to indicate whether payload is wanted. Optional.",
          "type": "boolean"
        }
      }
    },
    "BatchCreatePrintersResponse": {
      "description": "Response for adding new printers in batch.",
      "type": "object",
      "id": "BatchCreatePrintersResponse",
      "properties": {
        "failures": {
          "description": "A list of create failures. Printer IDs are not populated, as printer were not created.",
          "type": "array",
          "items": {
            "$ref": "FailureInfo"
          }
        },
        "printers": {
          "items": {
            "$ref": "Printer"
          },
          "description": "A list of successfully created printers with their IDs populated.",
          "type": "array"
        }
      }
    },
    "Asps": {
      "type": "object",
      "properties": {
        "kind": {
          "description": "The type of the API resource. This is always `admin#directory#aspList`.",
          "type": "string",
          "default": "admin#directory#aspList"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "items": {
          "type": "array",
          "description": "A list of ASP resources.",
          "items": {
            "$ref": "Asp"
          }
        }
      },
      "id": "Asps"
    },
    "SchemaFieldSpec": {
      "id": "SchemaFieldSpec",
      "description": "You can use schemas to add custom fields to user profiles. You can use these fields to store information such as the projects your users work on, their physical locations, their hire dates, or whatever else fits your business needs. For more information, see [Custom User Fields](/admin-sdk/directory/v1/guides/manage-schemas).",
      "type": "object",
      "properties": {
        "fieldType": {
          "type": "string",
          "description": "The type of the field.",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          }
        },
        "displayName": {
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "type": "string",
          "description": "Display Name of the field."
        },
        "numericIndexingSpec": {
          "type": "object",
          "properties": {
            "minValue": {
              "type": "number",
              "description": "Minimum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.",
              "format": "double"
            },
            "maxValue": {
              "format": "double",
              "description": "Maximum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.",
              "type": "number"
            }
          },
          "description": "Indexing spec for a numeric field. By default, only exact match queries will be supported for numeric fields. Setting the `numericIndexingSpec` allows range queries to be supported."
        },
        "fieldId": {
          "description": "The unique identifier of the field (Read-only)",
          "type": "string"
        },
        "fieldName": {
          "description": "The name of the field.",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "type": "string"
        },
        "multiValued": {
          "description": "A boolean specifying whether this is a multi-valued field or not. Default: `false`.",
          "type": "boolean"
        },
        "etag": {
          "type": "string",
          "description": "The ETag of the field."
        },
        "indexed": {
          "description": "Boolean specifying whether the field is indexed or not. Default: `true`.",
          "default": "true",
          "type": "boolean"
        },
        "kind": {
          "default": "admin#directory#schema#fieldspec",
          "description": "The kind of resource this is. For schema fields this is always `admin#directory#schema#fieldspec`.",
          "type": "string"
        },
        "readAccessType": {
          "default": "ALL_DOMAIN_USERS",
          "description": "Specifies who can view values of this field. See [Retrieve users as a non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin) for more information. Note: It may take up to 24 hours for changes to this field to be reflected.",
          "type": "string"
        }
      }
    },
    "UserKeyword": {
      "id": "UserKeyword",
      "description": "JSON template for a keyword entry.",
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "Keyword."
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard type of that entry. For example keyword could be of type occupation or outlook. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value."
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        }
      }
    },
    "ListPrinterModelsResponse": {
      "properties": {
        "nextPageToken": {
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.",
          "type": "string"
        },
        "printerModels": {
          "items": {
            "$ref": "PrinterModel"
          },
          "description": "Printer models that are currently allowed to be configured for ChromeOs. Some printers may be added or removed over time.",
          "type": "array"
        }
      },
      "type": "object",
      "description": "Response for listing allowed printer models.",
      "id": "ListPrinterModelsResponse"
    },
    "Role": {
      "properties": {
        "roleDescription": {
          "description": "A short description of the role.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#role",
          "description": "The type of the API resource. This is always `admin#directory#role`.",
          "type": "string"
        },
        "roleName": {
          "description": "Name of the role.",
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          },
          "type": "string"
        },
        "isSuperAdminRole": {
          "description": "Returns `true` if the role is a super admin role.",
          "type": "boolean"
        },
        "rolePrivileges": {
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          },
          "items": {
            "properties": {
              "serviceId": {
                "type": "string",
                "description": "The obfuscated ID of the service this privilege is for. This value is returned with [`Privileges.list()`](/admin-sdk/directory/v1/reference/privileges/list)."
              },
              "privilegeName": {
                "type": "string",
                "description": "The name of the privilege."
              }
            },
            "type": "object"
          },
          "description": "The set of privileges that are granted to this role.",
          "type": "array"
        },
        "isSystemRole": {
          "description": "Returns `true` if this is a pre-defined system role.",
          "type": "boolean"
        },
        "roleId": {
          "description": "ID of the role.",
          "format": "int64",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "Role"
    },
    "User": {
      "id": "User",
      "properties": {
        "includeInGlobalAddressList": {
          "type": "boolean",
          "description": "Indicates if the user's profile is visible in the Google Workspace global address list when the contact sharing feature is enabled for the domain. For more information about excluding user profiles, see the [administration help center](https://support.google.com/a/answer/1285988)."
        },
        "customSchemas": {
          "description": "Custom fields of the user.",
          "additionalProperties": {
            "$ref": "UserCustomProperties"
          },
          "type": "object"
        },
        "etag": {
          "description": "Output only. ETag of the resource.",
          "readOnly": true,
          "type": "string"
        },
        "password": {
          "description": "User's password",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "type": "string"
        },
        "orgUnitPath": {
          "description": "The full path of the parent organization associated with the user. If the parent organization is the top-level, it is represented as a forward slash (`/`).",
          "type": "string"
        },
        "ims": {
          "description": "The user's Instant Messenger (IM) accounts. A user account can have multiple ims properties. But, only one of these ims properties can be the primary IM contact. The maximum allowed data size for this field is 2Kb.",
          "type": "any"
        },
        "phones": {
          "description": "A list of the user's phone numbers. The maximum allowed data size for this field is 1Kb.",
          "type": "any"
        },
        "organizations": {
          "type": "any",
          "description": "A list of organizations the user belongs to. The maximum allowed data size for this field is 10Kb."
        },
        "isEnrolledIn2Sv": {
          "description": "Output only. Is enrolled in 2-step verification (Read-only)",
          "readOnly": true,
          "type": "boolean"
        },
        "emails": {
          "type": "any",
          "description": "A list of the user's email addresses. The maximum allowed data size for this field is 10Kb."
        },
        "lastLoginTime": {
          "readOnly": true,
          "format": "date-time",
          "description": "User's last login time. (Read-only)",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "The unique ID for the user. A user `id` can be used as a user request URI's `userKey`."
        },
        "primaryEmail": {
          "description": "The user's primary email address. This property is required in a request to create a user account. The `primaryEmail` must be unique and cannot be an alias of another user.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "thumbnailPhotoEtag": {
          "description": "Output only. ETag of the user's photo (Read-only)",
          "readOnly": true,
          "type": "string"
        },
        "locations": {
          "description": "The user's locations. The maximum allowed data size for this field is 10Kb.",
          "type": "any"
        },
        "agreedToTerms": {
          "readOnly": true,
          "description": "Output only. This property is `true` if the user has completed an initial login and accepted the Terms of Service agreement.",
          "type": "boolean"
        },
        "name": {
          "description": "Holds the given and family names of the user, and the read-only `fullName` value. The maximum number of characters in the `givenName` and in the `familyName` values is 60. In addition, name values support unicode/UTF-8 characters, and can contain spaces, letters (a-z), numbers (0-9), dashes (-), forward slashes (/), and periods (.). For more information about character usage rules, see the [administration help center](https://support.google.com/a/answer/9193374). Maximum allowed data size for this field is 1Kb.",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "$ref": "UserName"
        },
        "gender": {
          "description": "The user's gender. The maximum allowed data size for this field is 1Kb.",
          "type": "any"
        },
        "customerId": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The customer ID to [retrieve all account users](/admin-sdk/directory/v1/guides/manage-users.html#get_all_users). You can use the alias `my_customer` to represent your account's `customerId`. As a reseller administrator, you can use the resold customer account's `customerId`. To get a `customerId`, use the account's primary domain in the `domain` parameter of a [users.list](/admin-sdk/directory/v1/reference/users/list) request."
        },
        "deletionTime": {
          "format": "date-time",
          "type": "string",
          "readOnly": true
        },
        "websites": {
          "type": "any",
          "description": "The user's websites. The maximum allowed data size for this field is 2Kb."
        },
        "isAdmin": {
          "readOnly": true,
          "type": "boolean",
          "description": "Output only. Indicates a user with super admininistrator privileges. The `isAdmin` property can only be edited in the [Make a user an administrator](/admin-sdk/directory/v1/guides/manage-users.html#make_admin) operation ( [makeAdmin](/admin-sdk/directory/v1/reference/users/makeAdmin.html) method). If edited in the user [insert](/admin-sdk/directory/v1/reference/users/insert.html) or [update](/admin-sdk/directory/v1/reference/users/update.html) methods, the edit is ignored by the API service."
        },
        "recoveryEmail": {
          "description": "Recovery email of the user.",
          "type": "string"
        },
        "changePasswordAtNextLogin": {
          "description": "Indicates if the user is forced to change their password at next login. This setting doesn't apply when [the user signs in via a third-party identity provider](https://support.google.com/a/answer/60224).",
          "type": "boolean"
        },
        "posixAccounts": {
          "description": "A list of [POSIX](https://www.opengroup.org/austin/papers/posix_faq.html) account information for the user.",
          "type": "any"
        },
        "isMailboxSetup": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Indicates if the user's Google mailbox is created. This property is only applicable if the user has been assigned a Gmail license."
        },
        "aliases": {
          "type": "array",
          "description": "Output only. List of the user's alias email addresses.",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "sshPublicKeys": {
          "type": "any",
          "description": "A list of SSH public keys."
        },
        "nonEditableAliases": {
          "readOnly": true,
          "description": "Output only. List of the user's non-editable alias email addresses. These are typically outside the account's primary domain or sub-domain.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "recoveryPhone": {
          "description": "Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example: *+16506661212*.",
          "type": "string"
        },
        "archived": {
          "type": "boolean",
          "description": "Indicates if user is archived."
        },
        "suspended": {
          "type": "boolean",
          "description": "Indicates if user is suspended."
        },
        "notes": {
          "description": "Notes for the user.",
          "type": "any"
        },
        "keywords": {
          "type": "any",
          "description": "The user's keywords. The maximum allowed data size for this field is 1Kb."
        },
        "addresses": {
          "type": "any",
          "description": "A list of the user's addresses. The maximum allowed data size for this field is 10Kb."
        },
        "ipWhitelisted": {
          "description": "If `true`, the user's IP address is [whitelisted](https://support.google.com/a/answer/60752).",
          "type": "boolean"
        },
        "suspensionReason": {
          "readOnly": true,
          "description": "Output only. Has the reason a user account is suspended either by the administrator or by Google at the time of suspension. The property is returned only if the `suspended` property is `true`.",
          "type": "string"
        },
        "externalIds": {
          "type": "any",
          "description": "A list of external IDs for the user, such as an employee or network ID. The maximum allowed data size for this field is 2Kb."
        },
        "isEnforcedIn2Sv": {
          "description": "Output only. Is 2-step verification enforced (Read-only)",
          "readOnly": true,
          "type": "boolean"
        },
        "isDelegatedAdmin": {
          "readOnly": true,
          "description": "Output only. Indicates if the user is a delegated administrator. Delegated administrators are supported by the API but cannot create or undelete users, or make users administrators. These requests are ignored by the API service. Roles and privileges for administrators are assigned using the [Admin console](https://support.google.com/a/answer/33325).",
          "type": "boolean"
        },
        "hashFunction": {
          "description": "Stores the hash format of the password property. We recommend sending the `password` property value as a base 16 bit hexadecimal-encoded hash value. Set the `hashFunction` values as either the [SHA-1](https://wikipedia.org/wiki/SHA-1), [MD5](https://wikipedia.org/wiki/MD5), or [crypt](https://en.wikipedia.org/wiki/Crypt_\\(C\\)) hash format.",
          "type": "string"
        },
        "thumbnailPhotoUrl": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Photo Url of the user (Read-only)"
        },
        "kind": {
          "default": "admin#directory#user",
          "type": "string",
          "description": "Output only. The type of the API resource. For Users resources, the value is `admin#directory#user`.",
          "readOnly": true
        },
        "relations": {
          "description": "A list of the user's relationships to other users. The maximum allowed data size for this field is 2Kb.",
          "type": "any"
        },
        "creationTime": {
          "description": "User's G Suite account creation time. (Read-only)",
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "languages": {
          "type": "any",
          "description": "The user's languages. The maximum allowed data size for this field is 1Kb."
        }
      },
      "type": "object",
      "description": "The Directory API allows you to create and manage your account's users, user aliases, and user Gmail chat profile photos. For more information about common tasks, see the [User Accounts Developer's Guide](/admin-sdk/directory/v1/guides/manage-users.html) and the [User Aliases Developer's Guide](/admin-sdk/directory/v1/guides/manage-user-aliases.html)."
    },
    "BatchDeletePrintersResponse": {
      "type": "object",
      "description": "Response for deleting existing printers in batch.",
      "properties": {
        "failedPrinters": {
          "type": "array",
          "items": {
            "$ref": "FailureInfo"
          },
          "description": "A list of update failures."
        },
        "printerIds": {
          "items": {
            "type": "string"
          },
          "description": "A list of Printer.id that were successfully deleted.",
          "type": "array"
        }
      },
      "id": "BatchDeletePrintersResponse"
    },
    "UserExternalId": {
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the Id."
        },
        "value": {
          "type": "string",
          "description": "The value of the id."
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        }
      },
      "description": "JSON template for an externalId entry.",
      "id": "UserExternalId",
      "type": "object"
    },
    "Tokens": {
      "id": "Tokens",
      "type": "object",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#tokenList",
          "description": "The type of the API resource. This is always `admin#directory#tokenList`.",
          "type": "string"
        },
        "items": {
          "description": "A list of Token resources.",
          "type": "array",
          "items": {
            "$ref": "Token"
          }
        }
      },
      "description": "JSON response template for List tokens operation in Directory API."
    },
    "DirectoryChromeosdevicesIssueCommandResponse": {
      "description": "A response for issuing a command.",
      "type": "object",
      "id": "DirectoryChromeosdevicesIssueCommandResponse",
      "properties": {
        "commandId": {
          "description": "The unique ID of the issued command, used to retrieve the command status.",
          "format": "int64",
          "type": "string"
        }
      }
    },
    "Token": {
      "description": "JSON template for token resource in Directory API.",
      "properties": {
        "nativeApp": {
          "type": "boolean",
          "description": "Whether the token is issued to an installed application. The value is `true` if the application is installed to a desktop or mobile device."
        },
        "anonymous": {
          "type": "boolean",
          "description": "Whether the application is registered with Google. The value is `true` if the application has an anonymous Client ID."
        },
        "displayText": {
          "description": "The displayable name of the application the token is issued to.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#token",
          "type": "string",
          "description": "The type of the API resource. This is always `admin#directory#token`."
        },
        "clientId": {
          "description": "The Client ID of the application the token is issued to.",
          "type": "string"
        },
        "scopes": {
          "description": "A list of authorization scopes the application is granted.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "userKey": {
          "type": "string",
          "description": "The unique ID of the user that issued the token."
        }
      },
      "type": "object",
      "id": "Token"
    },
    "DomainAliases": {
      "type": "object",
      "id": "DomainAliases",
      "properties": {
        "kind": {
          "default": "admin#directory#domainAliases",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "domainAliases": {
          "description": "List of domain alias objects.",
          "items": {
            "$ref": "DomainAlias"
          },
          "type": "array"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      }
    },
    "UserWebsite": {
      "properties": {
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary website or not."
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example website could be of home work blog etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value."
        },
        "value": {
          "type": "string",
          "description": "Website."
        }
      },
      "id": "UserWebsite",
      "type": "object",
      "description": "JSON template for a website entry."
    },
    "Schemas": {
      "id": "Schemas",
      "description": "JSON response template for List Schema operation in Directory API.",
      "type": "object",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#schemas",
          "type": "string"
        },
        "schemas": {
          "items": {
            "$ref": "Schema"
          },
          "type": "array",
          "description": "List of UserSchema objects."
        }
      }
    },
    "UserCustomProperties": {
      "id": "UserCustomProperties",
      "additionalProperties": {
        "type": "any"
      },
      "description": "JSON template for a set of custom properties (i.e. all fields in a particular schema)",
      "type": "object"
    },
    "ChromeOsMoveDevicesToOu": {
      "properties": {
        "deviceIds": {
          "type": "array",
          "description": "Chrome OS devices to be moved to OU",
          "items": {
            "type": "string"
          },
          "annotations": {
            "required": [
              "directory.chromeosdevices.moveDevicesToOu"
            ]
          }
        }
      },
      "type": "object",
      "id": "ChromeOsMoveDevicesToOu"
    },
    "BuildingCoordinates": {
      "type": "object",
      "description": "Public API: Resources.buildings",
      "id": "BuildingCoordinates",
      "properties": {
        "latitude": {
          "description": "Latitude in decimal degrees.",
          "type": "number",
          "format": "double"
        },
        "longitude": {
          "description": "Longitude in decimal degrees.",
          "type": "number",
          "format": "double"
        }
      }
    },
    "Customer": {
      "id": "Customer",
      "properties": {
        "postalAddress": {
          "description": "The customer's postal address information.",
          "$ref": "CustomerPostalAddress"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "phoneNumber": {
          "type": "string",
          "description": "The customer's contact phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format."
        },
        "language": {
          "description": "The customer's ISO 639-2 language code. See the [Language Codes](/admin-sdk/directory/v1/languages) page for the list of supported codes. Valid language codes outside the supported set will be accepted by the API but may lead to unexpected behavior. The default value is `en`.",
          "type": "string"
        },
        "customerDomain": {
          "description": "The customer's primary domain name string. Do not include the `www` prefix when creating a new customer.",
          "type": "string"
        },
        "alternateEmail": {
          "type": "string",
          "description": "The customer's secondary contact email address. This email address cannot be on the same domain as the `customerDomain`"
        },
        "customerCreationTime": {
          "description": "The customer's creation time (Readonly)",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "description": "The unique ID for the customer's Google Workspace account. (Readonly)",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#customer",
          "type": "string",
          "description": "Identifies the resource as a customer. Value: `admin#directory#customer`"
        }
      },
      "type": "object"
    },
    "Group": {
      "properties": {
        "kind": {
          "description": "The type of the API resource. For Groups resources, the value is `admin#directory#group`.",
          "type": "string",
          "default": "admin#directory#group"
        },
        "email": {
          "description": "The group's email address. If your account has multiple domains, select the appropriate domain for the email address. The `email` must be unique. This property is required when creating a group. Group email addresses are subject to the same character usage rules as usernames, see the [help center](https://support.google.com/a/answer/9193374) for details.",
          "annotations": {
            "required": [
              "directory.groups.insert"
            ]
          },
          "type": "string"
        },
        "aliases": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of a group's alias email addresses."
        },
        "id": {
          "description": "The unique ID of a group. A group `id` can be used as a group request URI's `groupKey`.",
          "type": "string"
        },
        "directMembersCount": {
          "format": "int64",
          "type": "string",
          "description": "The number of users that are direct members of the group. If a group is a member (child) of this group (the parent), members of the child group are not counted in the `directMembersCount` property of the parent group."
        },
        "description": {
          "description": "An extended description to help users determine the purpose of a group. For example, you can include information about who should join the group, the types of messages to send to the group, links to FAQs about the group, or related groups. Maximum length is `4,096` characters.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The group's display name."
        },
        "adminCreated": {
          "description": "Value is `true` if this group was created by an administrator rather than a user.",
          "type": "boolean"
        },
        "nonEditableAliases": {
          "description": "List of the group's non-editable alias email addresses that are outside of the account's primary domain or subdomains. These are functioning email addresses used by the group. This is a read-only property returned in the API's response for a group. If edited in a group's POST or PUT request, the edit is ignored by the API service.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "id": "Group",
      "type": "object",
      "description": "Google Groups provide your users the ability to send messages to groups of people using the group's email address. For more information about common tasks, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-groups)."
    },
    "VerificationCode": {
      "type": "object",
      "id": "VerificationCode",
      "properties": {
        "verificationCode": {
          "type": "string",
          "description": "A current verification code for the user. Invalidated or used verification codes are not returned as part of the result."
        },
        "kind": {
          "default": "admin#directory#verificationCode",
          "description": "The type of the resource. This is always `admin#directory#verificationCode`.",
          "type": "string"
        },
        "userId": {
          "description": "The obfuscated unique ID of the user.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "description": "The Directory API allows you to view, generate, and invalidate backup verification codes for a user."
    },
    "BatchDeletePrintersRequest": {
      "type": "object",
      "id": "BatchDeletePrintersRequest",
      "description": "Request for deleting existing printers in batch.",
      "properties": {
        "printerIds": {
          "type": "array",
          "description": "A list of Printer.id that should be deleted. Max 100 at a time.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "FeatureInstance": {
      "id": "FeatureInstance",
      "type": "object",
      "description": "JSON template for a feature instance.",
      "properties": {
        "feature": {
          "$ref": "Feature",
          "description": "The feature that this is an instance of. A calendar resource may have multiple instances of a feature."
        }
      }
    },
    "UserLocation": {
      "id": "UserLocation",
      "description": "JSON template for a location entry.",
      "properties": {
        "buildingId": {
          "description": "Building Identifier.",
          "type": "string"
        },
        "deskCode": {
          "type": "string",
          "description": "Most specific textual code of individual desk location."
        },
        "floorName": {
          "description": "Floor name/number.",
          "type": "string"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example location could be of types default and desk. In addition to standard type an entry can have a custom type and can give it any name. Such types should have 'custom' as type and also have a customType value.",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "floorSection": {
          "description": "Floor section. More specific location within the floor. For example if a floor is divided into sections 'A', 'B' and 'C' this field would identify one of those values.",
          "type": "string"
        },
        "area": {
          "description": "Textual location. This is most useful for display purposes to concisely describe the location. For example 'Mountain View, CA', 'Near Seattle', 'US-NYC-9TH 9A209A.''",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Building": {
      "type": "object",
      "description": "Public API: Resources.buildings",
      "id": "Building",
      "properties": {
        "buildingName": {
          "type": "string",
          "description": "The building name as seen by users in Calendar. Must be unique for the customer. For example, \"NYC-CHEL\". The maximum length is 100 characters."
        },
        "address": {
          "$ref": "BuildingAddress",
          "description": "The postal address of the building. See [`PostalAddress`](/my-business/reference/rest/v4/PostalAddress) for details. Note that only a single address line and region code are required."
        },
        "coordinates": {
          "description": "The geographic coordinates of the center of the building, expressed as latitude and longitude in decimal degrees.",
          "$ref": "BuildingCoordinates"
        },
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "floorNames": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "The display names for all floors in this building. The floors are expected to be sorted in ascending order, from lowest floor to highest floor. For example, [\"B2\", \"B1\", \"L\", \"1\", \"2\", \"2M\", \"3\", \"PH\"] Must contain at least one entry."
        },
        "buildingId": {
          "type": "string",
          "description": "Unique identifier for the building. The maximum length is 100 characters."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#resources#buildings#Building",
          "description": "Kind of resource this is."
        },
        "description": {
          "type": "string",
          "description": "A brief description of the building. For example, \"Chelsea Market\"."
        }
      }
    },
    "Users": {
      "type": "object",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "trigger_event": {
          "type": "string",
          "description": "Event that triggered this response (only used in case of Push Response)"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#users",
          "description": "Kind of resource this is."
        },
        "users": {
          "type": "array",
          "description": "List of user objects.",
          "items": {
            "$ref": "User"
          }
        }
      },
      "id": "Users"
    },
    "Schema": {
      "properties": {
        "schemaName": {
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          },
          "description": "The schema's name.",
          "type": "string"
        },
        "displayName": {
          "description": "Display name for the schema.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          }
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#schema"
        },
        "schemaId": {
          "description": "The unique identifier of the schema (Read-only)",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "The ETag of the resource."
        },
        "fields": {
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "items": {
            "$ref": "SchemaFieldSpec"
          },
          "type": "array",
          "description": "A list of fields in the schema."
        }
      },
      "description": "The type of API resource. For Schema resources, this is always `admin#directory#schema`.",
      "id": "Schema",
      "type": "object"
    },
    "MobileDevice": {
      "properties": {
        "wifiMacAddress": {
          "type": "string",
          "description": "The device's MAC address on Wi-Fi networks."
        },
        "applications": {
          "type": "array",
          "description": "The list of applications installed on an Android mobile device. It is not applicable to Google Sync and iOS devices. The list includes any Android applications that access Google Workspace data. When updating an applications list, it is important to note that updates replace the existing list. If the Android device has two existing applications and the API updates the list with five applications, the is now the updated list of five applications.",
          "items": {
            "properties": {
              "permission": {
                "items": {
                  "type": "string"
                },
                "description": "The list of permissions of this application. These can be either a standard Android permission or one defined by the application, and are found in an application's [Android manifest](https://developer.android.com/guide/topics/manifest/uses-permission-element.html). Examples of a Calendar application's permissions are `READ_CALENDAR`, or `MANAGE_ACCOUNTS`.",
                "type": "array"
              },
              "versionCode": {
                "type": "integer",
                "description": "The application's version code. An example is `13`.",
                "format": "int32"
              },
              "versionName": {
                "type": "string",
                "description": "The application's version name. An example is `3.2-140714`."
              },
              "displayName": {
                "type": "string",
                "description": "The application's display name. An example is `Browser`."
              },
              "packageName": {
                "description": "The application's package name. An example is `com.android.browser`.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "privilege": {
          "description": "DMAgentPermission (Read-only)",
          "type": "string"
        },
        "networkOperator": {
          "type": "string",
          "description": "Mobile Device mobile or network operator (if available) (Read-only)"
        },
        "email": {
          "type": "array",
          "description": "List of owner's email addresses. If your application needs the current list of user emails, use the [get](/admin-sdk/directory/v1/reference/mobiledevices/get.html) method. For additional information, see the [retrieve a user](/admin-sdk/directory/v1/guides/manage-users#get_user) method.",
          "items": {
            "type": "string"
          }
        },
        "kind": {
          "description": "The type of the API resource. For Mobiledevices resources, the value is `admin#directory#mobiledevice`.",
          "default": "admin#directory#mobiledevice",
          "type": "string"
        },
        "unknownSourcesStatus": {
          "type": "boolean",
          "description": "Unknown sources enabled or disabled on device (Read-only)"
        },
        "brand": {
          "type": "string",
          "description": "Mobile Device Brand (Read-only)"
        },
        "deviceId": {
          "type": "string",
          "description": "The serial number for a Google Sync mobile device. For Android and iOS devices, this is a software generated unique identifier."
        },
        "devicePasswordStatus": {
          "description": "DevicePasswordStatus (Read-only)",
          "type": "string"
        },
        "bootloaderVersion": {
          "description": "Mobile Device Bootloader version (Read-only)",
          "type": "string"
        },
        "status": {
          "type": "string",
          "description": "The device's status."
        },
        "os": {
          "type": "string",
          "description": "The mobile device's operating system, for example IOS 4.3 or Android 2.3.5. This property can be [updated](/admin-sdk/directory/v1/reference/mobiledevices/update.html). For more information, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-mobile-devices#update_mobile_device)."
        },
        "kernelVersion": {
          "type": "string",
          "description": "The device's kernel version."
        },
        "securityPatchLevel": {
          "format": "int64",
          "type": "string",
          "description": "Mobile Device Security patch level (Read-only)"
        },
        "type": {
          "type": "string",
          "description": "The type of mobile device."
        },
        "deviceCompromisedStatus": {
          "type": "string",
          "description": "The compromised device status."
        },
        "buildNumber": {
          "description": "The device's operating system build number.",
          "type": "string"
        },
        "name": {
          "type": "array",
          "description": "List of the owner's user names. If your application needs the current list of device owner names, use the [get](/admin-sdk/directory/v1/reference/mobiledevices/get.html) method. For more information about retrieving mobile device user information, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-users#get_user).",
          "items": {
            "type": "string"
          }
        },
        "adbStatus": {
          "type": "boolean",
          "description": "Adb (USB debugging) enabled or disabled on device (Read-only)"
        },
        "managedAccountIsOnOwnerProfile": {
          "description": "Boolean indicating if this account is on owner/primary profile or not.",
          "type": "boolean"
        },
        "userAgent": {
          "type": "string",
          "description": "Gives information about the device such as `os` version. This property can be [updated](/admin-sdk/directory/v1/reference/mobiledevices/update.html). For more information, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-mobile-devices#update_mobile_device)."
        },
        "model": {
          "description": "The mobile device's model name, for example Nexus S. This property can be [updated](/admin-sdk/directory/v1/reference/mobiledevices/update.html). For more information, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-mobile=devices#update_mobile_device).",
          "type": "string"
        },
        "lastSync": {
          "type": "string",
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "format": "date-time"
        },
        "serialNumber": {
          "type": "string",
          "description": "The device's serial number."
        },
        "supportsWorkProfile": {
          "description": "Work profile supported on device (Read-only)",
          "type": "boolean"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "resourceId": {
          "description": "The unique ID the API service uses to identify the mobile device.",
          "type": "string"
        },
        "basebandVersion": {
          "type": "string",
          "description": "The device's baseband version."
        },
        "firstSync": {
          "format": "date-time",
          "description": "Date and time the device was first synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "type": "string"
        },
        "manufacturer": {
          "type": "string",
          "description": "Mobile Device manufacturer (Read-only)"
        },
        "encryptionStatus": {
          "type": "string",
          "description": "Mobile Device Encryption Status (Read-only)"
        },
        "otherAccountsInfo": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of accounts added on device (Read-only)"
        },
        "developerOptionsStatus": {
          "description": "Developer options enabled or disabled on device (Read-only)",
          "type": "boolean"
        },
        "hardware": {
          "description": "Mobile Device Hardware (Read-only)",
          "type": "string"
        },
        "releaseVersion": {
          "description": "Mobile Device release version version (Read-only)",
          "type": "string"
        },
        "hardwareId": {
          "type": "string",
          "description": "The IMEI/MEID unique identifier for Android hardware. It is not applicable to Google Sync devices. When adding an Android mobile device, this is an optional property. When updating one of these devices, this is a read-only property."
        },
        "imei": {
          "type": "string",
          "description": "The device's IMEI number."
        },
        "defaultLanguage": {
          "type": "string",
          "description": "The default locale used on the device."
        },
        "meid": {
          "type": "string",
          "description": "The device's MEID number."
        }
      },
      "id": "MobileDevice",
      "type": "object",
      "description": "Google Workspace Mobile Management includes Android, [Google Sync](https://support.google.com/a/answer/135937), and iOS devices. For more information about common group mobile device API tasks, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-mobile-devices.html)."
    }
  }
}
